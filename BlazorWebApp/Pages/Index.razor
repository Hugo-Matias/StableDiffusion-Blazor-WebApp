@inject DatabaseService DB
@inject ImageService ImageService
@inject JavascriptService JS
@inject AppState AppState
@implements IDisposable
@page "/"

<PageTitle>Blazor Diffusion</PageTitle>

@if(_projects == null || _projects.Count() == 0)
{
	<div class="row" style="color: var(--app-light-2);">
		<div class="col">
			<h2>
				Looks like you haven't created any project yet.<br/>
				<small>Create a new project to store your images.</small>
			</h2>
			<CreateProjectModal>
				<ButtonText>Create Project</ButtonText>
			</CreateProjectModal>
		</div>
	</div>

}
else
{
	<ImagesContainer Images="@images" OnPageSelected="LoadImages"/>
}

@code {
	private ImagesDto images = new();
	private List<Project>? _projects;
	private Project _newProject = new();

	protected override void OnInitialized()
	{
		base.OnInitialized();
		AppState.OnProjectChange += HandleProjectChanged;
	}


	protected override async Task OnInitializedAsync()
	{
		_projects = await DB.GetProjects();
		await LoadImages(1);

		//images = await ImageService.GetImageInfoFromPath(@"H:\O meu disco\Vault\j7ip64ns2b0bbl4esvurdrl7n4\zoiwettonçzxbioqaanpfosdgin\StableDiffusion\Text-2-Image\_samples\110d33ce\DPM++ 2M");
	}

	private async Task LoadImages(int page)
	{
		images = await DB.GetImages(page, AppState.CurrentProjectId);
		await InvokeAsync(StateHasChanged);
	}

	private async Task HandleProjectChanged()
	{
		await LoadImages(1);
	}

	public void Dispose() => AppState.OnProjectChange -= HandleProjectChanged;
}
