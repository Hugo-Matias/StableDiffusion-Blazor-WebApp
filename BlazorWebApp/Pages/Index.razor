@page "/"
@inject DatabaseService DB
@inject ManagerService M
@inject ProgressService ProgressService
@implements IDisposable

<PageTitle>Blazor Diffusion</PageTitle>

@if (_projects == null)
{
    <LoadingSpinner />
}
else if (_projects.Count() == 0 && M.State.Gallery.FolderId == 0)
{
    <MudContainer Class="d-flex flex-column align-items-center justify-content-center" Style="height: 50vh">
        <MudPaper Class="pa-10 d-flex flex-column align-items-center" MaxWidth="30vw" Elevation="5">
            <MudText Typo="Typo.h4" Class="mb-5" Style="text-align:center;">Create a new project to get started! 😎</MudText>
            <CreateProjectButton Color="Color.Info" Variant="Variant.Text" OnProjectCreated="async () => await RefreshProjects()">
                Lets Go
            </CreateProjectButton>
        </MudPaper>
    </MudContainer>
}
else
{
    <GallerySettings OnFilterImages="async () => await FilterImages(false)" OnResetFilters="async () => await FilterImages(true)" OnProjectDeleted="async () => await RefreshProjects()" OnPageChanged="HandlePageSelected" />
    if (images != null && images.Images != null && images.Images.Count > 0)
    {
        <ImagesContainer @ref=_imagesContainer Style="margin-bottom: 2rem;" Images="@images" OnPageSelected="async (page) => await LoadPage(page)" OnDeleteImage="async () => await LoadImages()" OnCoverChanged="async () => await InvokeAsync(StateHasChanged)" CanSelect=true />
    }
    else if (images.Images.Count == 0)
    {
        <MudText Style="opacity: 0.4; text-align: center; margin-top: 10rem;" Typo="Typo.h5">Empty Project</MudText>
    }
    else
    {
        <MudStack Row Justify="Justify.Center" Style="margin-top: 10rem;">
        <MudProgressCircular Color="Color.Success" Indeterminate />
        </MudStack>
    }
}


@code {
    private BaseProgress prog = new() { BarColor = Color.Error };
    private void UpdateProg() { prog.Value += 10; ProgressService.Update(prog.Id, prog.Value); }

    private ImagesContainer _imagesContainer = new();
    private ImagesDto images = new();
    private List<Project>? _projects;
    private int currentImgPage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        M.OnProjectChangeTask += HandleProjectChanged;
        M.OnStateHasChanged += Refresh;
        M.OnSelectedImagesChanged += Refresh;
        await LoadProjects();
    }

    private async Task FilterImages(bool resetFilter)
    {
        currentImgPage = 1;
        M.IsGalleryFiltered = !resetFilter;
        await M.SaveState();
        await LoadImages();
    }

    private async Task LoadProjects()
    {
        _projects = await DB.GetProjects(M.State.Gallery.FolderId);
        await M.GetProjects();
        currentImgPage = 1;
        await LoadImages();
    }

    private async Task LoadPage(int page)
    {
        currentImgPage = page;
        await LoadImages();
    }

    private async Task LoadImages()
    {
        if (images != null && images.Images != null) images.Images.Clear();
        if (M.IsGalleryFiltered) images = await DB.GetSortedImages(currentImgPage, M.State.Gallery.ProjectId, M.State.Gallery);
        else images = await DB.GetPagedImages(currentImgPage, M.State.Gallery.ProjectId);
        await InvokeAsync(StateHasChanged);
        // Hack to hold execution before ImageCard checked state is updated.
        // Without the delay the event triggers too soon and the ImagesContainer is still populated with pre fetching data.
        // https://stackoverflow.com/questions/75933636/awaiting-re-render-of-invokeasyncstatehaschanged
        await Task.Yield();
        M.RefreshImagesContainer();
    }

    private async Task RefreshProjects()
    {
        await LoadProjects();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleProjectChanged()
    {
        currentImgPage = 1;
        await LoadImages();
    }

    private void HandlePageSelected(int page) => _imagesContainer.HandlePageChanged(page);

    private async void Refresh() => await LoadImages();

    public void Dispose()
    {
        M.OnProjectChangeTask -= HandleProjectChanged;
        M.OnStateHasChanged -= Refresh;
        M.OnSelectedImagesChanged -= Refresh;
    }
}
