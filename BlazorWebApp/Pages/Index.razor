@inject DatabaseService DB
@inject AppState AppState
@implements IDisposable
@page "/"

<PageTitle>Blazor Diffusion</PageTitle>

@if (_projects == null)
{
    <div style="margin-top: 15rem;">
        <Blazorise.SpinKit.SpinKit Type="Blazorise.SpinKit.SpinKitType.Grid" Color="#0d6efd" Centered />
    </div>
}
else if (_projects.Count() == 0)
{
    <div class="row" style="color: var(--app-light-2);">
        <div class="col">
            <h2>
                Looks like you haven't created any project yet.<br />
                <small>Create a new project to store your images.</small>
            </h2>
            <CreateProjectModal>
                <ButtonText>Create Project</ButtonText>
            </CreateProjectModal>
        </div>
    </div>
}
else
{
    <GallerySettings OnFilterImages="async () => await FilterImages(false)" OnResetFilters="async () => await FilterImages(true)" />
    if (images.Images.Count > 0)
    {
        <ImagesContainer Images="@images" OnPageSelected="(page) => LoadPage(page)" OnDeleteImage="LoadImages" OnCoverChanged="async () => await InvokeAsync(StateHasChanged)" />
    }
}

@code {
    private ImagesDto images = new();
    private List<Project>? _projects;
    private int currentImgPage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        AppState.OnProjectChangeTask += HandleProjectChanged;
        _projects = await DB.GetProjects();
        currentImgPage = 1;
        await LoadImages();
    }

    private async Task FilterImages(bool resetFilter)
    {
        AppState.IsGalleryFiltered = !resetFilter;
        await LoadImages();
    }

    private async Task LoadPage(int page)
    {
        Console.WriteLine(page);
        currentImgPage = page;
        await LoadImages();
    }

    private async Task LoadImages()
    {
        if (AppState.IsGalleryFiltered) images = await DB.GetSortedImages(currentImgPage, AppState.CurrentProjectId, AppState.Settings.GallerySettings);
        else images = await DB.GetImages(currentImgPage, AppState.CurrentProjectId);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleProjectChanged()
    {
        currentImgPage = 1;
        await LoadImages();
    }

    public void Dispose() => AppState.OnProjectChangeTask -= HandleProjectChanged;
}
