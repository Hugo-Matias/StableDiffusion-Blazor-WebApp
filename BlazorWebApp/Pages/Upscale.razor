@page "/upscale"
@inject ManagerService M
@inject ImageService IM
@implements IDisposable

<EditForm Model="Parameters" OnSubmit="Generate">
    <MudGrid Class="mb-3 px-4">
        <MudItem xs="3">
            <MudText Typo="Typo.caption">Scale by</MudText>
            <MudRadioGroup @bind-SelectedOption=Parameters.ResizeMode>
                <MudRadio Option="0" Color="Color.Primary">Multiplier</MudRadio>
                <MudRadio Option="1" Color="Color.Secondary">Resolution</MudRadio>
            </MudRadioGroup>
            @if (Parameters.ResizeMode == 0)
            {
                <MudSlider Class="mt-n2" @bind-Value=Parameters.UpscalingMultiplier Min="M.Settings.Generation.Upscale.UpscalingMultiplier.Min" Max="M.Settings.Generation.Upscale.UpscalingMultiplier.Max" Step="M.Settings.Generation.Upscale.UpscalingMultiplier.Step" Variant="Variant.Filled" ValueLabel><small>Value:</small> @(Parameters.UpscalingMultiplier)x</MudSlider>
            }
            else
            {
                <MudStack Row>
                <MudNumericField @bind-Value=Parameters.UpscalingWidth Label="Width" Min="0" T="int" />
                <MudNumericField @bind-Value=Parameters.UpscalingHeight Label="Height" Min="0" T="int" />
            </MudStack>
            }
        </MudItem>
        <MudItem xs="2">
            <MudSelect Label="Upscaler Primary" @bind-Value=Parameters.UpscalerPrimary AnchorOrigin=Origin.BottomLeft TransformOrigin="Origin.TopLeft" T="string">
                @if (M.Upscalers != null && M.Upscalers.Count > 0)
                {
                    @foreach (var upscaler in M.Upscalers)
                    {
                        <MudSelectItem Value="@upscaler.Name" />
                    }
                }

            </MudSelect>
            @if (Parameters.ResizeMode == 1)
            {
                <MudCheckBox @bind-Checked=Parameters.UpscalingCrop Color=Color.Secondary Label="Crop to Fit" Class="mt-5" />
            }
        </MudItem>
        <MudItem xs="2">
            <MudSelect Label="Upscaler Secondary" @bind-Value=Parameters.UpscalerSecondary AnchorOrigin=Origin.BottomLeft TransformOrigin="Origin.TopLeft" T="string">
                @if (M.Upscalers != null && M.Upscalers.Count > 0)
                {
                    @foreach (var upscaler in M.Upscalers)
                    {
                        <MudSelectItem Value="@upscaler.Name" />
                    }
                }
            </MudSelect>
            @if (Parameters.UpscalerSecondary != "None")
            {
                <MudSlider Class="mt-2" @bind-Value=Parameters.UpscalerSecondaryVisibility Min="M.Settings.Generation.Upscale.UpscalerSecondary.Min" Max="M.Settings.Generation.Upscale.UpscalerSecondary.Max" Step="M.Settings.Generation.Upscale.UpscalerSecondary.Step" Variant="Variant.Filled" ValueLabel><small>Visibility:</small> @Parameters.UpscalerSecondaryVisibility</MudSlider>
            }
        </MudItem>
        <MudItem xs="4">
            <MudSlider @bind-Value=Parameters.GfpganVisibility Min="M.Settings.Generation.Upscale.FaceRestoration.Min" Max="M.Settings.Generation.Upscale.FaceRestoration.Max" Step="M.Settings.Generation.Upscale.FaceRestoration.Step" Variant="Variant.Filled" ValueLabel><strong>GFPGAN </strong><small>Visibility:</small> @Parameters.GfpganVisibility</MudSlider>
            <MudStack Row>
                <MudSlider @bind-Value=Parameters.CodeformerVisibility Min="M.Settings.Generation.Upscale.FaceRestoration.Min" Max="M.Settings.Generation.Upscale.FaceRestoration.Max" Step="M.Settings.Generation.Upscale.FaceRestoration.Step" Variant="Variant.Filled" ValueLabel><strong>CodeFormer </strong><small>Visibility:</small> @Parameters.CodeformerVisibility</MudSlider>
                <MudSlider @bind-Value=Parameters.CodeformerWeight Min="M.Settings.Generation.Upscale.FaceRestoration.Min" Max="M.Settings.Generation.Upscale.FaceRestoration.Max" Step="M.Settings.Generation.Upscale.FaceRestoration.Step" Variant="Variant.Filled" ValueLabel><small>Attenuation:</small> @Parameters.CodeformerWeight</MudSlider>
            </MudStack>
        </MudItem>
        <MudItem xs="1" Class="d-flex">
            <MudButton Color=Color.Success Variant=Variant.Filled Disabled=@(M.UpscaleImageData == null || M.IsConverging) ButtonType="ButtonType.Submit">Upscale</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

<MudGrid>
    <MudItem xs="6" Class="d-flex flex-column align-items-center">
        <ImageDropzone ImageData=@M.UpscaleImageData OnImageChanged="@(Refresh)" />
    </MudItem>
    <MudItem xs="6">
        <MudTabs Elevation="1" PanelClass="pa-3 d-flex flex-column align-items-cente" Rounded Centered>
            <MudTabPanel Text="Preview">
                @if (M.GeneratedUpscaleImage != null)
                {
                    <MudImage Src=@($"data:image/png;base64,{M.GeneratedUpscaleImage.Image}") Width="512" Height="512" ObjectFit="ObjectFit.Contain" Fluid />
                    <br />
                    <span class="generation-info-text"><small>@M.GeneratedUpscaleImage.Info</small></span>
                }
            </MudTabPanel>
            <MudTabPanel Text="Generated">
                @if (M.GeneratedImageEntities != null)
                {
                    <ImagesContainer Images=M.GeneratedImageEntities />
                }
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>

@code {
    public UpscaleParameters Parameters { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await M.GetUpscalers();
        M.OnUpscaleParametersChanged += InitializeParameters;
        InitializeParameters();
    }

    private string ParseResizeMode(int value) => value == 0 ? "Multiplier" : "Resolution";

    private async Task Refresh(string data)
    {
        M.UpscaleImageData = data;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Generate()
    {
        Parameters.Image = M.UpscaleImageData;
        M.GeneratedImageEntities = await IM.GetImages(ModeType.Extras);
        await M.SaveState();
        await InvokeAsync(StateHasChanged);
    }

    private async void InitializeParameters()
    {
        Parameters = M.ParametersUpscale;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        M.OnUpscaleParametersChanged -= InitializeParameters;
    }
}
