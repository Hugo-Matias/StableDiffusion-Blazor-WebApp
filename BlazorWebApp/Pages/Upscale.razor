@page "/upscale"
@inject AppState AppState
@inject ImageService IM

<div class="row">
    <div class="col-12">
        <div class="card p-3 mb-3">
            <EditForm Model="Parameters" OnSubmit="Generate">
                <div class="row ms-1">
                    <div class="col">
                        <div class="row">
                            <div class="col-3">
                                <label class="form-label">Scale By:</label>
                                <InputRadioGroup @bind-Value="Parameters.ResizeMode">
                                    <div class="row">
                                        @for (var i = 0; i < 2; i++)
                                        {
                                            <div class="col-6 px-1 from-check">
                                                <InputRadio Value="i" id=@($"mode-{ParseResizeMode(i)}") class="btn-check" />
                                                <label class="btn btn-outline-secondary expand-btn" for=@($"mode-{ParseResizeMode(i)}")>@ParseResizeMode(i)</label>
                                            </div>
                                        }
                                    </div>
                                </InputRadioGroup>
                                @if (Parameters.ResizeMode == 0)
                                {
                                    <label class="form-label mt-3" for="upscale-multiplier">Value: <strong class="ms-2">@Parameters.UpscalingMultiplier</strong>x</label>
                                    <input type="range" class="form-range" id="upscale-multiplier" @bind-value="@Parameters.UpscalingMultiplier" @bind-value:event="oninput" min="@AppState.Settings.Upscale.UpscalingMultiplier.Min" max="@AppState.Settings.Upscale.UpscalingMultiplier.Max" step="@AppState.Settings.Upscale.UpscalingMultiplier.Step" />
                                }
                                else
                                {
                                    <div class="row">
                                        <div class="col-6">
                                            <label class="form-label mt-3" for="upscale-width">Width: <strong class="ms-2">@Parameters.UpscalingWidth</strong>px</label>
                                            <input type="number" class="form-control" id="upscale-width" min="0" @bind-value="@Parameters.UpscalingWidth" @bind-value:event="oninput" />
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label mt-3" for="upscale-height">Height: <strong class="ms-2">@Parameters.UpscalingHeight</strong>px</label>
                                            <input type="number" class="form-control" id="upscale-height" min="0" @bind-value="@Parameters.UpscalingHeight" @bind-value:event="oninput" />
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="col-2">
                                <label class="form-label">Upscaler Primary:</label>
                                <Dropdown OnSelected="(value) => Parameters.UpscalerPrimary = value" ButtonText="@Parameters.UpscalerPrimary" ButtonId="upscaler-primary">
                                    <Button>@Parameters.UpscalerPrimary</Button>
                                    <Items>
                                        @if (AppState.Upscalers != null && AppState.Upscalers.Count > 0)
                                        {
                                            @foreach (var upscaler in AppState.Upscalers)
                                            {
                                                <DropdownItem Text="@upscaler.Name" />
                                            }
                                        }
                                    </Items>
                                </Dropdown>
                                @if (Parameters.ResizeMode == 1)
                                {
                                    <input type="checkbox" class="btn-check" id="crop" autocomplete="off" @bind-value="@Parameters.UpscalingCrop" checked="@Parameters.UpscalingCrop" />
                                    <label class="btn btn-outline-secondary expand-btn mt-5" for="crop">Crop to Fit</label>
                                }
                            </div>
                            <div class="col-2">
                                <label class="form-label">Upscaler Secondary:</label>
                                <Dropdown OnSelected="(value) => Parameters.UpscalerSecondary = value" ButtonText="@Parameters.UpscalerSecondary" ButtonId="upscaler-secondary">
                                    <Button>@Parameters.UpscalerSecondary</Button>
                                    <Items>
                                        @if (AppState.Upscalers != null && AppState.Upscalers.Count > 0)
                                        {
                                            @foreach (var upscaler in AppState.Upscalers)
                                            {
                                                <DropdownItem Text="@upscaler.Name" />
                                            }
                                        }
                                    </Items>
                                </Dropdown>
                                @if (Parameters.UpscalerSecondary != "None")
                                {
                                    <label class="form-label mt-3" for="upscaler-secondary-visibility">Visibility: <strong class="ms-2">@Parameters.UpscalerSecondaryVisibility</strong></label>
                                    <input type="range" class="form-range" id="upscaler-secondary-visibility" @bind-value="@Parameters.UpscalerSecondaryVisibility" @bind-value:event="oninput" min="@AppState.Settings.Upscale.UpscalerSecondary.Min" max="@AppState.Settings.Upscale.UpscalerSecondary.Max" step="@AppState.Settings.Upscale.UpscalerSecondary.Step" />
                                }
                            </div>
                            <div class="col-5">
                                <label class="form-label" for="gfpgan-visibility"><lead><strong>GFPGAN</strong></lead> Visibility:<strong class="ms-2">@Parameters.GfpganVisibility</strong></label>
                                <input type="range" class="form-range" id="gfpgan-visibility" @bind-value="@Parameters.GfpganVisibility" @bind-value:event="oninput" min="@AppState.Settings.Upscale.FaceRestoration.Min" max="@AppState.Settings.Upscale.FaceRestoration.Max" step="@AppState.Settings.Upscale.FaceRestoration.Step" />
                                <div class="row">
                                    <div class="col">
                                        <label class="form-label mt-3" for="codeformer-visibility"><lead><strong>CodeFormer</strong></lead> Visibility:<strong class="ms-2">@Parameters.CodeformerVisibility</strong></label>
                                        <input type="range" class="form-range" id="codeformer-visibility" @bind-value="@Parameters.CodeformerVisibility" @bind-value:event="oninput" min="@AppState.Settings.Upscale.FaceRestoration.Min" max="@AppState.Settings.Upscale.FaceRestoration.Max" step="@AppState.Settings.Upscale.FaceRestoration.Step" />
                                    </div>
                                    <div class="col">
                                        <label class="form-label mt-3" for="codeformer-weight">Attenuation:<strong class="ms-2">@Parameters.CodeformerWeight</strong></label>
                                        <input type="range" class="form-range" id="codeformer-weight" @bind-value="@Parameters.CodeformerWeight" @bind-value:event="oninput" min="@AppState.Settings.Upscale.FaceRestoration.Min" max="@AppState.Settings.Upscale.FaceRestoration.Max" step="@AppState.Settings.Upscale.FaceRestoration.Step" />
                                    </div>
                                </div>
                                <div />
                            </div>
                        </div>
                    </div>
                    <div class="col-1 d-flex align-items-center">
                        <button class="btn btn-outline-@(AppState.UpscaleImageData == null ? "secondary" : "success") expand-btn h-75 align-items-center" type="submit" disabled="@(AppState.UpscaleImageData == null || AppState.IsConverging)">Upscale</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="col-6">
        <UpscaleDropzone OnImageChanged="StateHasChanged"/>
    </div>
    <div class="col-6">
        <nav>
            <div class="nav nav-tabs" id="nav-tabs" role="tablist">
                <button class="nav-link active" id="nav-gallery-tab" data-bs-toggle="tab" data-bs-target="#nav-gallery" type="button" role="tab" aria-controls="nav-gallery" aria-selected="true">Gallery</button>
                <button class="nav-link" id="nav-gen-tab" data-bs-toggle="tab" data-bs-target="#nav-gen" type="button" role="tab" aria-controls="nav-gen" aria-selected="false">Generated</button>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-gallery" role="tabpanel" aria-labelledby="nav-gallery-tab" tabindex="0">
                @if (AppState.GeneratedUpscaleImage != null)
                {
                    List<string> generatedImages = new() { AppState.GeneratedUpscaleImage.Image};
                    <ImageCarousel Images="generatedImages" GalleryId="generated-gallery"/>
                    <ImageParametersInfo Text="@AppState.GeneratedUpscaleImage.Info" />
                }
            </div>
            <div class="tab-pane fade" id="nav-gen" role="tabpanel" aria-labelledby="nav-gen-tab" tabindex="0">
                @if (AppState.GeneratedImageEntities != null)
                {
                    <ImagesContainer Images="AppState.GeneratedImageEntities"></ImagesContainer>
                }
            </div>
        </div>
    </div>
</div>
@code {
    public UpscaleParametersModel Parameters { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await AppState.GetUpscalers();
        Parameters = AppState.ParametersUpscale;
    }

    private string ParseResizeMode(int value) => value == 0 ? "Multiplier" : "Resolution";

    private async Task Generate()
    {
        Parameters.Image = AppState.UpscaleImageData;
        AppState.GeneratedImageEntities = await IM.GetImages(ModeType.Extras);
        await InvokeAsync(StateHasChanged);
    }
}
