@page "/txt2img"
@inject SDAPIService SDAPIService
@inject JavascriptService JSConsole
@inject PromptButtonService PromptButtonService
@inject AppState AppState
@inject ImageService ImageService
@inject ParsingService Parser
@implements IDisposable

<PromptFields @bind-Parameters="Parameters" />

<div class="row">
	<div class="col">
		<GenerateForm Parameters="@Parameters" OnGenerate="Generate"></GenerateForm>
		<div class="accordion" id="tagsAccordion">
			@foreach (var item in PromptButtonService.Tags.Items)
			{
				<TagAccordion Tag="@item" DataParent="tagsAccordion" OnButtonClicked="TagClicked" />
			}
		</div>
	</div>
	<!-- Carousel Tabs-->
	<div class="col">
		<nav>
			<div class="nav nav-tabs" id="nav-tabs" role="tablist">
				<button class="nav-link active" id="nav-gen-tab" data-bs-toggle="tab" data-bs-target="#nav-gen" type="button" role="tab" aria-controls="nav-gen" aria-selected="true">Generated</button>
				<button class="nav-link" id="nav-progress-tab" data-bs-toggle="tab" data-bs-target="#nav-progress" type="button" role="tab" aria-controls="nav-progress" aria-selected="false">Progress</button>
			</div>
		</nav>
		<div class="tab-content" id="nav-tabContent">
			<div class="tab-pane fade show active" id="nav-gen" role="tabpanel" aria-labelledby="nav-gen-tab" tabindex="0">
				@if (AppState.Images.Images != null)
				{
					<ImageCarousel Images="AppState.Images.Images" />
					<ImageParametersInfo Text="@AppState.ImagesInfo.InfoTexts[0]" />
				}
			</div>
			<div class="tab-pane fade" id="nav-progress" role="tabpanel" aria-labelledby="nav-progress-tab" tabindex="0">
				@if (AppState.Progress.State != null)
				{
					<ProgressBar Value="AppState.Progress.State.SamplingStep" MaxValue="AppState.Progress.State.SamplingSteps" />

					if (AppState.Progress.CurrentImage != null)
					{
						string[] imageAsArray = { AppState.Progress.CurrentImage };
						<ImageCarousel Images="imageAsArray" />
					}
				}
			</div>
		</div>
	</div>
</div>

@code {
	public Txt2ImgParametersModel Parameters { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		ImageService.OnChange += Refresh;
		Parameters = AppState.Parameters;
	}

	private async void Generate()
	{
		await JSConsole.LogAsync(Parser.ParseParameters(new Txt2ImgParametersModel(Parameters)));
		//await ImageState.GetTxt2Images(Parameters);

		if (AppState.Options.SamplesSave)
		{
			//ImageState.SaveImages(Outdir.Txt2ImgSamples, Outdir.Txt2ImgGrid);
		}

		Refresh();
	}

	private void TagClicked(string tag)
	{
		Parameters.Prompt += $", {tag}";
	}

	public void Dispose() => ImageService.OnChange -= Refresh;

	void Refresh() => InvokeAsync(StateHasChanged);
}
