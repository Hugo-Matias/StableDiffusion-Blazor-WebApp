@page "/"
@inject SDAPIService SDAPIService
@inject JavascriptService JSConsole
@inject AppState AppState
@inject ImageService ImageService
@implements IDisposable

<PromptFields @bind-Parameters="SharedParameters" OnGenerate="Generate" OnSkip="Skip" OnInterrupt="Interrupt" OnPromptTagAppended="@((tags) => TagAppended(tags, false))" OnNegativePromptTagAppended="@((tags) => TagAppended(tags, true))" />

<div class="row">
    <div class="col">
        <GenerateFormTxt2Img Parameters="@Parameters" />
    </div>
    <!-- Carousel Tabs-->
    <div class="col">
        <nav>
            <div class="nav nav-tabs" id="nav-tabs" role="tablist">
                <button class="nav-link active" id="nav-gallery-tab" data-bs-toggle="tab" data-bs-target="#nav-gallery" type="button" role="tab" aria-controls="nav-gallery" aria-selected="true">Gallery</button>
                <button class="nav-link" id="nav-gen-tab" data-bs-toggle="tab" data-bs-target="#nav-gen" type="button" role="tab" aria-controls="nav-gen" aria-selected="false">Generated</button>
                <button class="nav-link" id="nav-progress-tab" data-bs-toggle="tab" data-bs-target="#nav-progress" type="button" role="tab" aria-controls="nav-progress" aria-selected="false">Progress</button>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-gallery" role="tabpanel" aria-labelledby="nav-gallery-tab" tabindex="0">
                @if (AppState.Images.Images != null)
                {
                    List<string> generatedImages = new();

                    if (!string.IsNullOrWhiteSpace(AppState.GridImage)) generatedImages.Add(AppState.GridImage);

                    generatedImages.AddRange(AppState.Images.Images);

                    <ImageCarousel Images="generatedImages" GalleryId="generated-gallery" IncrementCounter=!(bool)AppState.Options.GridSave />

                    <ImageParametersInfo Text="@AppState.ImagesInfo.InfoTexts[0]" />
                }
            </div>
            <div class="tab-pane fade" id="nav-gen" role="tabpanel" aria-labelledby="nav-gen-tab" tabindex="0">
                @if (AppState.GeneratedImageEntities != null)
                {
                    <ImagesContainer Images="AppState.GeneratedImageEntities"></ImagesContainer>
                }
            </div>
            <div class="tab-pane fade" id="nav-progress" role="tabpanel" aria-labelledby="nav-progress-tab" tabindex="0">
                @if (AppState.Progress.State != null)
                {
                    var value = AppState.Progress.Value;
                    <ProgressBar Value="@value" MaxValue=1>
                        <Compact>
                            <span><strong>@(Convert.ToInt32(value * 100))%</strong></span>
                        </Compact>
                        <Expanded>
                            <span><strong>@(Convert.ToInt32(value * 100))%</strong> | <small>@AppState.Progress.State.Job</small></span>
                        </Expanded>
                    </ProgressBar>

                    if (AppState.Progress.CurrentImage != null)
                    {
                        List<string> imageAsList = new List<string> { AppState.Progress.CurrentImage };
                        <ImageCarousel Images="imageAsList" GalleryId="progress-image" />
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    public Txt2ImgParameters Parameters { get; set; }
    public SharedParameters SharedParameters { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ImageService.OnChange += Refresh;
        Parameters = AppState.ParametersTxt2Img;
        SharedParameters = AppState.ParametersTxt2Img;
    }

    private async void Generate()
    {
        AppState.GeneratedImageEntities = await ImageService.GetImages(ModeType.Txt2Img);
        Refresh();
    }

    private async void Skip() => await SDAPIService.PostSkip();

    private async void Interrupt() => await SDAPIService.PostInterrupt();

    private void TagAppended(AppendedTags tags, bool isNegativePrompt)
    {
        if (isNegativePrompt)
        {
            if (tags.IsPrefix) Parameters.NegativePrompt = tags.Tags + (string.IsNullOrEmpty(Parameters.NegativePrompt) ? "" : ", " + Parameters.NegativePrompt);
            else Parameters.NegativePrompt += (string.IsNullOrEmpty(Parameters.NegativePrompt) ? "" : ", ") + tags.Tags;
        }
        else
        {
            if (tags.IsPrefix) Parameters.Prompt = tags.Tags + (string.IsNullOrEmpty(Parameters.Prompt) ? "" : ", " + Parameters.Prompt);
            else Parameters.Prompt += (string.IsNullOrEmpty(Parameters.Prompt) ? "" : ", ") + tags.Tags;
        }
    }

    public void Dispose() => ImageService.OnChange -= Refresh;

    void Refresh() => InvokeAsync(StateHasChanged);
}
