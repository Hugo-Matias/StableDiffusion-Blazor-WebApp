@page "/txt2img"
@inject SDAPIService SDAPIService
@inject JSConsole JSConsole
@inject PromptButtonService PromptButtonService
@inject AppState AppState
@inject ImageState ImageState
@implements IDisposable

<PromptFields @bind-Parameters="Parameters" />

<div class="row">
	<div class="col">
		<GenerateForm Parameters="@Parameters" OnGenerate="Generate"></GenerateForm>
		<div class="accordion" id="tagsAccordion">
				@foreach (var item in PromptButtonService.Tags.Items)
				{
					<TagAccordion Tag="@item" DataParent="tagsAccordion" OnButtonClicked="TagClicked"/>
				}
		</div>
	</div>
	<!-- Carousel Tabs-->
	<div class="col">
		<nav>
			<div class="nav nav-tabs" id="nav-tabs" role="tablist">
				<button class="nav-link active" id="nav-gen-tab" data-bs-toggle="tab" data-bs-target="#nav-gen" type="button" role="tab" aria-controls="nav-gen" aria-selected="true">Generated</button>
				<button class="nav-link" id="nav-progress-tab" data-bs-toggle="tab" data-bs-target="#nav-progress" type="button" role="tab" aria-controls="nav-progress" aria-selected="false">Progress</button>
			</div>
		</nav>
		<div class="tab-content" id="nav-tabContent">
			<div class="tab-pane fade show active" id="nav-gen" role="tabpanel" aria-labelledby="nav-gen-tab" tabindex="0">
					@if (ImageState.Images.Images != null)
					{
						<ImageCarousel Images="ImageState.Images.Images" />
						<ImageParametersInfo Text="@ImageState.ImagesInfo.InfoTexts[0]" />
					}
			</div>
			<div class="tab-pane fade" id="nav-progress" role="tabpanel" aria-labelledby="nav-progress-tab" tabindex="0">
					@if (ImageState.Progress.State != null)
					{
						<ProgressBar Value="ImageState.Progress.State.SamplingStep" MaxValue="ImageState.Progress.State.SamplingSteps" />

						if (ImageState.Progress.CurrentImage != null)
						{
							string[] imageAsArray = { ImageState.Progress.CurrentImage };
								<ImageCarousel Images="imageAsArray" />
						}
					}
			</div>
		</div>
	</div>
</div>

	@code {
		public Txt2ImgParametersModel Parameters { get; set; }

		protected override void OnInitialized()
		{
			base.OnInitialized();

			ImageState.OnChange += Refresh;
			Parameters = AppState.Parameters;
		}

		private async void Generate()
		{
			//await JSConsole.LogAsync(Parameters);
			await ImageState.GetTxt2Images(Parameters);
		}

		private void TagClicked(string tag)
		{
			Parameters.Prompt += $", {tag}";
		}

		public void Dispose() => ImageState.OnChange -= Refresh;

		void Refresh() => InvokeAsync(StateHasChanged);
}
