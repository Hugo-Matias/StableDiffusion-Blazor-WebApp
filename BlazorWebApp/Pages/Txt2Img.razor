@page "/txt2img"
@inject SDAPIService SDAPIService
@inject JavascriptService JSConsole
@inject PromptButtonService PromptButtonService
@inject AppState AppState
@inject ImageService ImageService
@inject ParsingService Parser
@implements IDisposable

<PromptFields @bind-Parameters="Parameters" OnGenerate="Generate" OnSkip="Skip" OnInterrupt="Interrupt"/>

<div class="row">
	<div class="col">
		<GenerateForm Parameters="@Parameters" />
		<div class="accordion" id="tagsAccordion">
			@foreach (var item in PromptButtonService.Tags.Items)
			{
				<TagAccordion Tag="@item" DataParent="tagsAccordion" OnButtonClicked="TagClicked" />
			}
		</div>
	</div>
	<!-- Carousel Tabs-->
	<div class="col">
		<nav>
			<div class="nav nav-tabs" id="nav-tabs" role="tablist">
				<button class="nav-link active" id="nav-gen-tab" data-bs-toggle="tab" data-bs-target="#nav-gen" type="button" role="tab" aria-controls="nav-gen" aria-selected="true">Generated</button>
				<button class="nav-link" id="nav-progress-tab" data-bs-toggle="tab" data-bs-target="#nav-progress" type="button" role="tab" aria-controls="nav-progress" aria-selected="false">Progress</button>
			</div>
		</nav>
		<div class="tab-content" id="nav-tabContent">
			<div class="tab-pane fade show active" id="nav-gen" role="tabpanel" aria-labelledby="nav-gen-tab" tabindex="0">
				@if (AppState.Images.Images != null) 
				{
					List<string> generatedImages = new();

					if (AppState.GridImage != null) generatedImages.Add(AppState.GridImage);

					generatedImages.AddRange(AppState.Images.Images);

					<ImageCarousel Images="generatedImages" />

					<ImageParametersInfo Text="@AppState.ImagesInfo.InfoTexts[0]" />
				}
			</div>
			<div class="tab-pane fade" id="nav-progress" role="tabpanel" aria-labelledby="nav-progress-tab" tabindex="0">
				@if (AppState.Progress.State != null)
				{
					var value = AppState.Progress.Progress;
					<ProgressBar Value="@value" MaxValue=1>
						<Compact>
							<span><strong>@(Convert.ToInt32(value * 100))%</strong></span>
						</Compact>
						<Expanded>
							<span><strong>@(Convert.ToInt32(value * 100))%</strong> | <small>@AppState.Progress.State.Job</small></span>
						</Expanded>
					</ProgressBar>

					if (AppState.Progress.CurrentImage != null)
					{
						List<string> imageAsList = new List<string> { AppState.Progress.CurrentImage };
						<ImageCarousel Images="imageAsList" />
					}
				}
			</div>
		</div>
	</div>
</div>

@code {
	public Txt2ImgParametersModel Parameters { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		ImageService.OnChange += Refresh;
		Parameters = AppState.Parameters;
	}

	private async void Generate()
	{
		//await JSConsole.LogAsync(Parser.ParseParameters(new Txt2ImgParametersModel(Parameters)));
		await ImageService.GetTxt2Images();
		Refresh();
	}

	private async void Skip() => await SDAPIService.PostSkip();

	private async void Interrupt() => await SDAPIService.PostInterrupt();

	private void TagClicked(string tag)
	{
		Parameters.Prompt += $", {tag}";
	}

	public void Dispose() => ImageService.OnChange -= Refresh;

	void Refresh() => InvokeAsync(StateHasChanged);
}
