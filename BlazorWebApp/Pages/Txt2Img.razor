@page "/txt2img"
@inject SDAPIService SDAPIService
@inject JavascriptService JSConsole
@inject AppState AppState
@inject ImageService ImageService
@implements IDisposable

<PromptFields @bind-Parameters="SharedParameters" OnGenerate="Generate" OnSkip="Skip" OnInterrupt="Interrupt" OnPromptTagAppended="@((tags) => TagAppended(tags, false))" OnNegativePromptTagAppended="@((tags) => TagAppended(tags, true))" />

<MudGrid>
    <MudItem xs="6">
        <GenerateFormTxt2Img Parameters="@Parameters" />
    </MudItem>
    <MudItem xs="6">
        <GeneratedImageTabs />
    </MudItem>
</MudGrid>

@code {
    public Txt2ImgParameters Parameters { get; set; }
    public SharedParameters SharedParameters { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ImageService.OnChange += Refresh;
        Parameters = AppState.ParametersTxt2Img;
        SharedParameters = AppState.ParametersTxt2Img;
    }

    private async void Generate()
    {
        AppState.GeneratedImageEntities = await ImageService.GetImages(ModeType.Txt2Img);
        Refresh();
    }

    private async void Skip() => await SDAPIService.PostSkip();

    private async void Interrupt() => await SDAPIService.PostInterrupt();

    private void TagAppended(AppendedTags tags, bool isNegativePrompt)
    {
        if (isNegativePrompt)
        {
            if (tags.IsPrefix) Parameters.NegativePrompt = tags.Tags + (string.IsNullOrEmpty(Parameters.NegativePrompt) ? "" : ", " + Parameters.NegativePrompt);
            else Parameters.NegativePrompt += (string.IsNullOrEmpty(Parameters.NegativePrompt) ? "" : ", ") + tags.Tags;
        }
        else
        {
            if (tags.IsPrefix) Parameters.Prompt = tags.Tags + (string.IsNullOrEmpty(Parameters.Prompt) ? "" : ", " + Parameters.Prompt);
            else Parameters.Prompt += (string.IsNullOrEmpty(Parameters.Prompt) ? "" : ", ") + tags.Tags;
        }
    }

    public void Dispose() => ImageService.OnChange -= Refresh;

    void Refresh() => InvokeAsync(StateHasChanged);
}
