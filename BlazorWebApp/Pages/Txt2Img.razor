@page "/txt2img"
@inject SDAPIService SDAPIService
@inject JSConsole JSConsole
@inject PromptButtonService PromptButtonService
@inject ImageState ImageState
@implements IDisposable

<div class="row">
	<div class="col">
		<GenerateForm OnGenerate="Generate"></GenerateForm>
		<div class="accordion" id="tagsAccordion">
			@foreach (var item in PromptButtonService.Tags.Items)
			{
				<TagAccordion Tag="@item" DataParent="tagsAccordion" />
			}
		</div>
	</div>
	<!-- Carousel Tabs-->
	<div class="col">
		<nav>
			<div class="nav nav-tabs" id="nav-tabs" role="tablist">
				<button class="nav-link active" id="nav-gen-tab" data-bs-toggle="tab" data-bs-target="#nav-gen" type="button" role="tab" aria-controls="nav-gen" aria-selected="true">Generated</button>
				<button class="nav-link" id="nav-progress-tab" data-bs-toggle="tab" data-bs-target="#nav-progress" type="button" role="tab" aria-controls="nav-progress" aria-selected="false">Progress</button>
			</div>
		</nav>
		<div class="tab-content" id="nav-tabContent">
			<div class="tab-pane fade show active" id="nav-gen" role="tabpanel" aria-labelledby="nav-gen-tab" tabindex="0">
				@if (ImageState.Images.Images != null)
				{
					<ImageCarousel Images="ImageState.Images.Images" />
					<ImageParametersInfo Text="@ImageState.ImagesInfo.InfoTexts[0]" />
				}
			</div>
			<div class="tab-pane fade" id="nav-progress" role="tabpanel" aria-labelledby="nav-progress-tab" tabindex="0">
				@if (ImageState.Progress.State != null)
				{
					<ProgressBar Value="ImageState.Progress.State.SamplingStep" MaxValue="ImageState.Progress.State.SamplingSteps" />

					if (ImageState.Progress.CurrentImage != null)
					{
						string[] imageAsArray = { ImageState.Progress.CurrentImage };
						<ImageCarousel Images="imageAsArray" />
					}
				}
			</div>
		</div>
	</div>
</div>
@*<Dropdown TItem="SDModelModel" OnSelected="@OnSelected">
	<InitialTip>@_initialTip</InitialTip>
	<ChildContent>
		@if (Models != null)
		{
			@foreach (var model in Models)
			{
				<DropdownListItem Item="@model">@model.Title</DropdownListItem>
			}
		}
	</ChildContent>
</Dropdown>
*@

@code {
	protected override void OnInitialized()
	{
		base.OnInitialized();

		ImageState.OnChange += Refresh;
	}

	private async void Generate(Txt2ImgParametersModel param)
	{
		param.Steps = 10;
		param.NIter = 1;
		await ImageState.GetTxt2Images(param);
	}

	public void Dispose() => ImageState.OnChange -= Refresh;

	void Refresh() => InvokeAsync(StateHasChanged);
}
