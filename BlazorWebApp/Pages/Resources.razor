@page "/resources"
@inject AppState AppState
@inject SDAPIService SD
@inject IOService IO
@inject DatabaseService DB
@inject CivitaiService Civitai
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<MudTabs Elevation="4" PanelClass="px-5 py-2" Rounded Centered>
    <MudTabPanel Text="CivitAI">
        <CivitaiPanel />
    </MudTabPanel>
    @foreach (var resource in _resources)
    {
        <MudTabPanel Text=@(resource.Key.Name == "TextualInversion" ? "Embedding" : resource.Key.Name)>
            <ResourceAccordion Resources="resource.Value" OnLoad=@((r) => r.Files.Count > 1 ? ShowResourceVersionsDialog(r) : LoadResource(r, r.Files[0])) />
        </MudTabPanel>
    }
    <MudTabPanel Text="Audit">
        <ResourceAuditPanel />
    </MudTabPanel>
</MudTabs>

@code {
    private Dictionary<ResourceType, List<LocalResource>> _resources;
    private List<string> _resourceFormats = new() { ".safetensors", ".ckpt", ".pt" };

    protected async override Task OnInitializedAsync()
    {
        AppState.OnWebuiStateChanged += Refresh;
        AppState.OnDownloadCompleted += Refresh;
        if (AppState.ResourceTypeDirectories == null) await AppState.GetResourceTypeDirectories();
        await InitializeResourceDictionary();
    }

    private async Task InitializeResourceDictionary()
    {
        var resourceTypes = await DB.GetResourceTypes(ordered: true);
        _resources = new();
        foreach (var type in resourceTypes)
        {
            _resources.Add(type, await CreateResourceEntities(type.Id));
        }
    }

    private async Task<List<LocalResource>> CreateResourceEntities(int typeId)
    {
        List<LocalResource> resources = new();
        var entities = await DB.GetResources(typeId);
        if (entities != null && entities.Count > 0)
        {
            var type = entities.FirstOrDefault()!.Type.Name;
            if (type.Equals("vae", StringComparison.InvariantCultureIgnoreCase))
            {
                resources.AddRange(new List<LocalResource> {
                new() { Title = "None", Type = new() { Name = type } },
                new() { Title = "Automatic", Type = new() { Name = type } }});
            }
            foreach (var entity in entities)
            {
                if (resources.Any(r => r.Title == entity.Title))
                {
                    var createdResource = resources.FirstOrDefault(r => r.Title == entity.Title);
                    var file = new LocalResourceFile(entity);
                    file.ImageSrc = IO.GetResourceImagePath(createdResource.Type.Name, file.Filename);
                    file.Title = Path.GetFileNameWithoutExtension(file.Filename);
                    file.IsEnabled = entity.IsEnabled;
                    createdResource.Files.Insert(0, file);
                    createdResource.ImageSrc = file.ImageSrc;
                }
                else
                {
                    var resource = new LocalResource(entity);
                    var file = new LocalResourceFile(entity);
                    file.ImageSrc = IO.GetResourceImagePath(resource.Type.Name, file.Filename);
                    file.Title = Path.GetFileNameWithoutExtension(file.Filename);
                    file.IsEnabled = entity.IsEnabled;
                    resource.ImageSrc = file.ImageSrc;
                    resource.Files = new() { file };
                    resources.Add(resource);
                }
            }
        }
        return resources.OrderBy(r => r.Title).ToList();
    }

    private async Task ShowResourceVersionsDialog(LocalResource resource)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var param = new DialogParameters();
        param.Add("Resource", resource);
        var dialog = await DialogService.ShowAsync<ResourceVersionsDialog>(resource.Title, param, options);
        var result = await dialog.Result;
        if (!result.Canceled) await LoadResource(resource, (LocalResourceFile)result.Data);
    }

    private async Task LoadResource(LocalResource resource, LocalResourceFile file)
    {
        var comp = StringComparison.InvariantCultureIgnoreCase;
        if (resource.Type.Name.Equals("vae", comp))
        {
            if (!AppState.IsWebuiUp) return;
            await AppState.PostOptions(new() { SDVae = resource.Title });
            return;
        }

        var fileDir = AppState.ResourceTypeDirectories.FirstOrDefault(f => f.Key.Equals(resource.Type.Name, comp)).Value;
        if (string.IsNullOrWhiteSpace(fileDir)) fileDir = Path.Combine(Configuration["ResourcesPath"], resource.Type.Name);
        if (resource.SubType != null) fileDir = Path.Combine(fileDir, resource.SubType.Name);
        if (File.Exists(Parser.ConvertCloudMount(Path.Combine(fileDir, file.Filename))))
        {
            file.IsEnabled = true;
            file.File = new FileInfo(Path.Combine(fileDir, file.Filename));
        }
        else
        {
            file.IsEnabled = false;
            var storagePath = Path.Combine(Configuration["ResourcesPath"], "_storage", resource.Type.Name);
            if (resource.SubType != null) storagePath = Path.Combine(storagePath, resource.SubType.Name);
            storagePath = Parser.ConvertCloudMount(Path.Combine(storagePath, file.Filename));
            if (File.Exists(storagePath)) file.File = new FileInfo(storagePath);
            else
            {
                Snackbar.Add($"Resource is disabled and was not found in the storage folder!\nExpected path: {storagePath}", Severity.Error);
                return;
            }
        }
        var filename = file.File.Name.Replace(file.File.Extension, "");

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var dialogParam = new DialogParameters();
        dialogParam.Add("Resource", resource);
        dialogParam.Add("File", file);
        var dialog = await DialogService.ShowAsync<LoadResourceDialog>("", dialogParam, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data != null)
            {
                if (result.Data.ToString().Equals("Edit"))
                {
                    await ShowResourceInfoDialog(file);
                    Refresh();
                    return;
                }
                else if (result.Data.ToString() == "Toggle")
                {
                    Refresh();
                    return;
                }
            }

            if (!AppState.IsWebuiUp) return;

            // result.Data is null if the Load Checkpoint button was clicked, loading the relevant TriggerWords otherwise
            if (resource.Type.Name.Equals("Checkpoint", comp) && result.Data != null)
            {
                if (result.Data.ToString() == "Load")
                {
                    await AppState.GetSDModels(refresh: true);
                    var model = AppState.SDModels.SingleOrDefault(m => m.Model_name.Contains(filename, comp));
                    await AppState.SetSDModel(model.Title);
                    return;
                }
            }

            var keyword = string.Empty;
            var triggerWords = string.Empty;
            var weight = AppState.Settings.Resources.Weight.Value;
            var target = (ValueTuple<ModeType, bool>)result.Data;

            if (resource.Type.Name.Equals("TextualInversion", comp)) keyword = weight != 1 ? $", ({filename}:{weight})" : filename;
            else if (resource.Type.Name.Equals("Hypernetwork", comp)) keyword = $", <hypernet:{filename}:{weight}>";
            else if (resource.Type.Name.Equals("LORA", comp) || resource.Type.Name.Equals("LoCon", comp)) keyword = $", <lora:{filename}:{weight}>";

            if (AppState.Settings.Resources.LoadTriggerWords && file.TriggerWords != null)
            {
                triggerWords = ", ";
                triggerWords += string.Join(", ", file.TriggerWords);
            }

            if (target.Item1 == ModeType.Txt2Img)
            {
                if (target.Item2 == true) AppState.ParametersTxt2Img.Prompt += $"{keyword}{triggerWords}";
                else AppState.ParametersTxt2Img.NegativePrompt += $", {keyword}{triggerWords}";
            }
            else if (target.Item1 == ModeType.Img2Img)
            {
                if (target.Item2 == true) AppState.ParametersImg2Img.Prompt += $"{keyword}{triggerWords}";
                else AppState.ParametersImg2Img.NegativePrompt += $"{keyword}{triggerWords}";
            }
        }
    }

    private async Task ShowResourceInfoDialog(LocalResourceFile file)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var entity = await DB.GetResourceById(file.ResourceId);
        var param = new DialogParameters();
        param.Add("Resource", entity);
        var dialog = await DialogService.ShowAsync<ResourceInfoDialog>("Edit", param, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = (ValueTuple<Resource, string>)result.Data;
            if (data.Item2 == "Update")
            {
                var fileInfos = IO.GetFilesByName(file.File.Directory.FullName, file.File.Name.Replace(file.File.Extension, ""));
                var baseDestPath = file.IsEnabled ? AppState.ResourceTypeDirectories[data.Item1.Type.Name] : Path.Combine(Configuration["ResourcesPath"], "_storage", data.Item1.Type.Name);
                if (data.Item1.SubType != null) baseDestPath = Path.Combine(baseDestPath, data.Item1.SubType.Name);
                // Update other files linked to the model that must share the same name, ie. yaml configs or txt info
                foreach (var fileInfo in fileInfos)
                {
                    var currentFile = new FileInfo(data.Item1.Filename);
                    var filename = currentFile.Name.Replace(currentFile.Extension, fileInfo.Extension);
                    var sourcePath = fileInfo.FullName;
                    var destinationPath = Path.Combine(baseDestPath, filename);
                    IO.MoveFile(sourcePath, destinationPath);
                }
                // Update resource preview
                var resourceEntity = await DB.GetResourceById(file.ResourceId);
                var previewFiles = IO.GetFilesByName(Path.Combine(Configuration["ResourcePreviewsPath"], resourceEntity.Type.Name), file.File.Name.Replace(file.File.Extension, "")).ToArray();
                if (previewFiles != null)
                {
                    if (previewFiles.Length > 1) Snackbar.Add("More than one resource preview found.", Severity.Warning);
                    var previewFilename = new FileInfo(data.Item1.Filename);
                    var previewDestination = Path.Combine(Configuration["ResourcePreviewsPath"], data.Item1.Type.Name, previewFilename.Name.Replace(previewFilename.Extension, previewFiles[0].Extension));
                    IO.MoveFile(previewFiles[0].FullName, previewDestination);
                }
                await DB.UpdateResource(data.Item1);
            }
            else if (data.Item2 == "Delete")
            {
                var confirmParam = new DialogParameters();
                confirmParam.Add(nameof(ConfirmationDialog.CancelButtonText), "No");
                confirmParam.Add(nameof(ConfirmationDialog.OkButtonText), "Yes");
                confirmParam.Add(nameof(ConfirmationDialog.OkButtonColor), Color.Error);
                confirmParam.Add(nameof(ConfirmationDialog.Content), new MarkupString(@"<span class='lead'>Are you sure you want to <strong class='text-danger'>delete</strong> this resource?<br /></span><small>This action is irreversible!</small>"));
                confirmParam.Add(nameof(ConfirmationDialog.CheckboxEnabled), true);
                confirmParam.Add(nameof(ConfirmationDialog.CheckboxContent), "Delete files from disk?");
                confirmParam.Add(nameof(ConfirmationDialog.CheckboxColor), Color.Error);
                options.MaxWidth = MaxWidth.Small;
                var confirmationDialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Resource", confirmParam, options);
                var confirmationResult = await confirmationDialog.Result;
                if (!confirmationResult.Canceled)
                {
                    if (confirmationResult.Data != null && (bool)confirmationResult.Data == true)
                    {
                        var files = IO.GetFilesByName(file.File.Directory.FullName, file.File.Name.Replace(file.File.Extension, ""));
                        foreach (var localFile in files)
                        {
                            IO.DeleteFile(localFile.FullName);
                        }
                    }
                    await DB.DeleteResource(data.Item1.Id);
                }
            }
        }
    }

    private async void Refresh()
    {
        await InitializeResourceDictionary();
        await AppState.GetResourceTypeDirectories();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppState.OnWebuiStateChanged -= Refresh;
        AppState.OnDownloadCompleted -= Refresh;
    }
}
