@page "/resources"
@inject AppState AppState
@inject SDAPIService SD
@inject IOService IO
@inject DatabaseService DB
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<MudTabs Elevation="4" PanelClass="px-5 py-2" Rounded Centered>
    <MudTabPanel Text="CivitAI">
        <CivitaiPanel />
    </MudTabPanel>
    @foreach (var type in _resourceTypes)
    {
        <MudTabPanel Text=@(type.Name == "TextualInversion" ? "Embedding" : type.Name)>
            <ResourceAccordion Resources="CreateResourceEntities(type.Id).Result" OnLoad=@((r) => r.Files.Count > 1 ? ShowResourceVersionsDialog(r) : LoadResource(r, r.Files[0])) />
        </MudTabPanel>
    }
    <MudTabPanel Text="Audit">
        <ResourceAuditPanel />
    </MudTabPanel>
</MudTabs>

@code {
    private List<ResourceType> _resourceTypes;
    private List<string> _resourceFormats = new() { ".safetensors", ".ckpt", ".pt" };

    protected async override Task OnInitializedAsync()
    {
        AppState.OnDownloadCompleted += Refresh;
        _resourceTypes = await DB.GetResourceTypes(ordered: true);
        if (AppState.ResourceTypeDirectories == null) await AppState.GetResourceTypeDirectories();
    }

    private async Task<List<LocalResource>> CreateResourceEntities(int typeId)
    {
        List<LocalResource> resources = new();
        var entities = await DB.GetResources(typeId);
        if (entities != null)
        {
            var type = entities.FirstOrDefault()!.Type.Name;
            if (type.Equals("vae", StringComparison.InvariantCultureIgnoreCase))
            {
                resources.AddRange(new List<LocalResource> {
                new() { Title = "None", Type = new() { Name = type } },
                new() { Title = "Automatic", Type = new() { Name = type } }});
            }
            foreach (var entity in entities)
            {
                if (resources.Any(r => r.Title == entity.Title))
                {
                    var createdResource = resources.FirstOrDefault(r => r.Title == entity.Title);
                    var file = new LocalResourceFile(entity);
                    file.ImageSrc = IO.GetResourceImagePath(createdResource.Type.Name, file.Filename);
                    file.Title = Path.GetFileNameWithoutExtension(file.Filename);
                    createdResource.Files.Add(file);
                }
                else
                {
                    var resource = new LocalResource(entity);
                    var file = new LocalResourceFile(entity);
                    file.ImageSrc = IO.GetResourceImagePath(resource.Type.Name, file.Filename);
                    file.Title = Path.GetFileNameWithoutExtension(file.Filename);
                    resource.ImageSrc = file.ImageSrc;
                    resource.Files = new() { file };
                    resources.Add(resource);
                }
            }
        }
        return resources;
    }

    private async Task ShowResourceVersionsDialog(LocalResource resource)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var param = new DialogParameters();
        param.Add("Resource", resource);
        var dialog = await DialogService.ShowAsync<ResourceVersionsDialog>(resource.Title, param, options);
        var result = await dialog.Result;
        if (!result.Canceled) await LoadResource(resource, (LocalResourceFile)result.Data);
    }

    private async Task LoadResource(LocalResource resource, LocalResourceFile file)
    {
        var comp = StringComparison.InvariantCultureIgnoreCase;
        if (resource.Type.Name.Equals("vae", comp)) { await AppState.PostOptions(new() { SDVae = resource.Title }); return; }

        var fileDir = AppState.ResourceTypeDirectories.FirstOrDefault(f => f.Key.Equals(resource.Type.Name, comp)).Value;
        if (string.IsNullOrWhiteSpace(fileDir)) fileDir = Path.Combine(Configuration["ResourcesPath"], resource.Type.Name);
        if (resource.SubType != null) fileDir = Path.Combine(fileDir, resource.SubType.Name);
        if (File.Exists(Path.Combine(fileDir, file.Filename)))
        {
            file.IsEnabled = true;
            file.File = new FileInfo(Path.Combine(fileDir, file.Filename));
        }
        else
        {
            file.IsEnabled = false;
            var storagePath = Path.Combine(Configuration["ResourcesPath"], "_storage", resource.Type.Name);
            if (resource.SubType != null) storagePath = Path.Combine(storagePath, resource.SubType.Name);
            storagePath = Path.Combine(storagePath, file.Filename);
            if (File.Exists(storagePath)) file.File = new FileInfo(storagePath);
            else
            {
                Snackbar.Add($"Resource is disabled and was not found in the storage folder!\nExpected path: {storagePath}", Severity.Error);
                return;
            }
        }
        var filename = file.File.Name.Replace(file.File.Extension, "");

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };
        var dialogParam = new DialogParameters();
        dialogParam.Add("Resource", resource);
        dialogParam.Add("File", file);
        var dialog = await DialogService.ShowAsync<LoadResourceDialog>("", dialogParam, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (resource.Type.Name.Equals("Checkpoint", comp))
            {
                await AppState.GetSDModels(refresh: true);
                var model = AppState.SDModels.SingleOrDefault(m => m.Model_name.Contains(filename, comp));
                await AppState.SetSDModel(model.Title);
                return;
            }

            var keyword = string.Empty;
            var triggerWords = string.Empty;
            var weight = AppState.Settings.Resources.Weight.Value;
            var target = (ValueTuple<ModeType, bool>)result.Data;

            if (resource.Type.Name.Equals("TextualInversion", comp)) keyword = weight != 1 ? $"({filename}:{weight})" : filename;
            else if (resource.Type.Name.Equals("Hypernetwork", comp)) keyword = $"<hypernet:{filename}:{weight}>";
            else if (resource.Type.Name.Equals("LORA", comp)) keyword = $"<lora:{filename}:{weight}>";

            if (AppState.Settings.Resources.LoadTriggerWords && file.TriggerWords != null)
            {
                triggerWords = ", ";
                triggerWords += string.Join(", ", file.TriggerWords);
            }

            if (target.Item1 == ModeType.Txt2Img)
            {
                if (target.Item2 == true) AppState.ParametersTxt2Img.Prompt += $", {keyword}{triggerWords}";
                else AppState.ParametersTxt2Img.NegativePrompt += $", {keyword}{triggerWords}";
            }
            else if (target.Item1 == ModeType.Img2Img)
            {
                if (target.Item2 == true) AppState.ParametersImg2Img.Prompt += $", {keyword}{triggerWords}";
                else AppState.ParametersImg2Img.NegativePrompt += $", {keyword}{triggerWords}";
            }
        }
    }

    private async void Refresh() => await InvokeAsync(StateHasChanged);

    public void Dispose() => AppState.OnDownloadCompleted -= Refresh;
}
