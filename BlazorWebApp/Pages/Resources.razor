@page "/resources"
@inject ManagerService M
@inject SDAPIService SD
@inject IOService IO
@inject DatabaseService DB
@inject ResourcesService ResourcesService
@inject CivitaiService Civitai
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<MudTabs @bind-ActivePanelIndex=M.State.Resources.ActiveTabIndex Elevation="4" PanelClass="px-5 py-2" Rounded Centered>
    <MudTabPanel Text="CivitAI">
        <CivitaiPanel />
    </MudTabPanel>
    @foreach (var resource in _resources)
    {
        <MudTabPanel Text=@(resource.Key.Name == "TextualInversion" ? "Embedding" : resource.Key.Name)>
            <ResourcePanel Resources="resource.Value" OnLoad=@((r) => r.Files.Count > 1 ? ShowResourceVersionsDialog(r) : LoadResource(r, r.Files[0])) />
        </MudTabPanel>
    }
    <MudTabPanel Text="Audit">
        <ResourceAuditPanel />
    </MudTabPanel>
</MudTabs>

@code {
    private Dictionary<ResourceType, List<LocalResource>> _resources;
    private List<string> _resourceFormats = new() { ".safetensors", ".ckpt", ".pt" };

    protected async override Task OnInitializedAsync()
    {
        M.OnWebuiStateChanged += Refresh;
        M.OnDownloadCompleted += Refresh;
        M.OnResourcesStateChanged += Refresh;
        if (M.ResourceTypeDirectories == null) await M.GetResourceTypeDirectories();
        await InitializeResourceDictionary();
    }

    private async Task InitializeResourceDictionary()
    {
        var resourceTypes = await DB.GetResourceTypes(ordered: true);
        _resources = new();
        foreach (var type in resourceTypes)
        {
            _resources.Add(type, await ResourcesService.CreateLocalResourcesByType(type.Id));
        }
    }

    private async Task ShowResourceVersionsDialog(LocalResource resource)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var param = new DialogParameters();
        param.Add("Resource", resource);
        var dialog = await DialogService.ShowAsync<ResourceVersionsDialog>(resource.Title, param, options);
        var result = await dialog.Result;
        if (!result.Canceled) await LoadResource(resource, (LocalResourceFile)result.Data);
    }

    private async Task LoadResource(LocalResource resource, LocalResourceFile resourceFile)
    {
        if (resource.Type.Name.Equals("vae", StringComparison.InvariantCultureIgnoreCase))
        {
            if (!M.IsWebuiUp) return;
            await M.PostOptions(new() { SDVae = resource.Title });
            return;
        }

        var subtype = resource.SubType != null ? resource.SubType.Name : null;
        var file = await ResourcesService.GetResourceFileInfo(resource.Type.Name, subtype, resourceFile);

        if (file == null)
        {
            Snackbar.Add($"Couldn't get file info!\nFile: {resourceFile.Filename} | Type: {resource.Type.Name} | SubType: {subtype}", Severity.Error);
            return;
        }

        await ShowLoadResourceDialog(resource, file);
    }

    private async Task ShowLoadResourceDialog(LocalResource resource, LocalResourceFile file)
    {
        var comp = StringComparison.InvariantCultureIgnoreCase;
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var dialogParam = new DialogParameters();
        dialogParam.Add("Resource", resource);
        dialogParam.Add("File", file);
        var dialog = await DialogService.ShowAsync<LoadResourceDialog>("", dialogParam, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data != null)
            {
                var command = result.Data.ToString();
                if (string.IsNullOrEmpty(command)) return;
                if (command.Equals("Edit", comp))
                {
                    await ShowResourceInfoDialog(file);
                    Refresh();
                }
                else if (command == "Toggle") Refresh();
                else if (!M.IsWebuiUp) return;
                // result.Data is null if the Load Checkpoint button was clicked, loading the relevant TriggerWords otherwise
                else if (command.Equals("Load", comp) && resource.Type.Name.Equals("Checkpoint", comp))
                {
                    await M.GetSDModels(refresh: true);
                    var filename = file.File.Name.Replace(file.File.Extension, "");
                    var model = M.SDModels.SingleOrDefault(m => m.Model_name.Contains(filename, comp));
                    await M.SetSDModel(model.Title);
                    await DB.UpdateResourceLoadedDate(file.ResourceId);
                }
                else
                {
                    var target = (ValueTuple<ModeType, bool>)result.Data;
                    await ResourcesService.LoadPrompt(file, resource.Type.Name, target);
                    await DB.UpdateResourceLoadedDate(file.ResourceId);
                }
            }
        }
    }

    private async Task ShowResourceInfoDialog(LocalResourceFile file)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var entity = await DB.GetResourceById(file.ResourceId);
        var param = new DialogParameters();
        param.Add("Resource", entity);
        var dialog = await DialogService.ShowAsync<ResourceInfoDialog>("Edit", param, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = (ValueTuple<Resource, string>)result.Data;
            if (data.Item2 == "Update")
            {
                var directory = file.File.Directory.FullName;
                var filename = file.File.Name.Replace(file.File.Extension, "");
                var resourceId = file.ResourceId;
                var isEnabled = file.IsEnabled;
                await ResourcesService.UpdateResource(data.Item1, directory, filename, resourceId, isEnabled);
            }
            else if (data.Item2 == "Delete")
            {
                await ShowDeleteDialog(data.Item1, file);
            }
        }
    }

    private async Task ShowDeleteDialog(Resource resource, LocalResourceFile file)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var confirmParam = new DialogParameters();
        var msg = new MarkupString(@"<span class='lead'>Are you sure you want to <strong class='text-danger'>delete</strong> this resource?<br /></span><small>All preview images associated with this resource will also be removed.<br/>This action is irreversible!</small>");
        confirmParam.Add(nameof(ConfirmationDialog.CancelButtonText), "No");
        confirmParam.Add(nameof(ConfirmationDialog.OkButtonText), "Yes");
        confirmParam.Add(nameof(ConfirmationDialog.OkButtonColor), Color.Error);
        confirmParam.Add(nameof(ConfirmationDialog.Content), msg);
        confirmParam.Add(nameof(ConfirmationDialog.CheckboxEnabled), true);
        confirmParam.Add(nameof(ConfirmationDialog.CheckboxContent), "Delete files from disk?");
        confirmParam.Add(nameof(ConfirmationDialog.CheckboxColor), Color.Error);
        options.MaxWidth = MaxWidth.Small;
        var confirmationDialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Resource", confirmParam, options);
        var confirmationResult = await confirmationDialog.Result;
        if (!confirmationResult.Canceled)
        {
            var deleteFiles = confirmationResult.Data != null && (bool)confirmationResult.Data == true;
            await ResourcesService.DeleteResource(resource, deleteFiles, file.File.Directory.FullName, file.File.Name.Replace(file.File.Extension, ""));
            Snackbar.Add(deleteFiles ? "Resource and files were" : "Resource was" + " deleted successfully.", Severity.Success);
        }
    }

    private async void Refresh()
    {
        await InitializeResourceDictionary();
        await M.GetResourceTypeDirectories();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        M.OnWebuiStateChanged -= Refresh;
        M.OnDownloadCompleted -= Refresh;
        M.OnResourcesStateChanged -= Refresh;
    }
}
