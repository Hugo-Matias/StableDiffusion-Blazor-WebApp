@page "/img2img"
@inject SDAPIService SDAPIService
@inject JavascriptService JS
@inject AppState AppState
@inject ImageService ImageService
@inject ISnackbar Snackbar

<PromptFields @bind-Parameters="SharedParameters" OnGenerate="Generate" OnSkip="Skip" OnInterrupt="Interrupt" OnPromptTagAppended="@((tags) => TagAppended(tags, false))" OnNegativePromptTagAppended="@((tags) => TagAppended(tags, true))" ButtonDisabled=CheckCanvasState() />

<MudGrid>
    <MudItem xs="6" Class="d-flex flex-column align-items-center">
        <Img2ImgCanvas @ref="canvasRef" OnImageChanged="StateHasChanged" />
        <GenerateFormImg2Img Parameters="@Parameters" OnDelete="OnDelete" OnSet="OnSet" OnClear="OnClear" OnUndo="OnUndo" />
    </MudItem>
    <MudItem xs="6">
        <GeneratedImageTabs />
    </MudItem>
</MudGrid>

@code {
    private Img2ImgCanvas? canvasRef;

    public Img2ImgParameters Parameters { get; set; }
    public SharedParameters SharedParameters { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Parameters = AppState.ParametersImg2Img;
        SharedParameters = AppState.ParametersImg2Img;
    }

    private async Task OnSet() => await canvasRef.SetInpaint();
    private async Task OnDelete() { await canvasRef.Delete(); await InvokeAsync(StateHasChanged); }
    private async Task OnClear() => await canvasRef.Clear();
    private async Task OnUndo() => await canvasRef.Undo();

    private async void Generate()
    {
        await canvasRef.Generate();
        if (AppState.Settings.Img2Img.Mode == "Mask" && AppState.CanvasMaskData == null)
        {
            Snackbar.Add("Mask is empty! Use the canvas to draw the area you want to change.", Severity.Warning);
            return;
        }
        Parameters.InitImages = new() { AppState.CanvasImageData };
        Parameters.Mask = AppState.CanvasMaskData;
        AppState.GeneratedImageEntities = await ImageService.GetImages(ModeType.Img2Img);
    }

    private bool CheckCanvasState() => AppState.CanvasImageData == null;

    private async void Skip() => await SDAPIService.PostSkip();

    private async void Interrupt() => await SDAPIService.PostInterrupt();

    private void TagAppended(AppendedTags tags, bool isNegativePrompt)
    {
        if (isNegativePrompt)
        {
            if (tags.IsPrefix) Parameters.NegativePrompt = tags.Tags + (string.IsNullOrEmpty(Parameters.NegativePrompt) ? "" : ", " + Parameters.NegativePrompt);
            else Parameters.NegativePrompt += (string.IsNullOrEmpty(Parameters.NegativePrompt) ? "" : ", ") + tags.Tags;
        }
        else
        {
            if (tags.IsPrefix) Parameters.Prompt = tags.Tags + (string.IsNullOrEmpty(Parameters.Prompt) ? "" : ", " + Parameters.Prompt);
            else Parameters.Prompt += (string.IsNullOrEmpty(Parameters.Prompt) ? "" : ", ") + tags.Tags;
        }
    }

}
