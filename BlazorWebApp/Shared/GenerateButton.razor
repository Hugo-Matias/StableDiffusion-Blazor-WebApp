@inject AppState AppState

<EditForm Model="Parameters" OnSubmit="@Generate">
	@if (!AppState.IsConverging)
	{
		<div class="row">
			<div class="col">
				<button id="generate-btn" class="btn btn-outline-success" type="submit"><span class="fa-solid fa-circle-half-stroke me-2"/> Generate</button>
			</div>
		</div>
	}
	else
	{
		<div class="row">
			<div class="col-6">
				<button id="skip-btn" class="btn btn-outline-warning" type="button" @onclick="OnSkip"><span class="fa-solid fa-forward me-2" />Skip</button>
			</div>
			<div class="col-6">
				<button id="interrupt-btn" class="btn btn-outline-danger" type="button" @onclick="OnInterrupt"><span class="fa-solid fa-ban me-2" />Interrupt</button>
			</div>
		</div>
	}
</EditForm>

@code {
	[Parameter] public Txt2ImgParametersModel Parameters { get; set; }
	[Parameter] public EventCallback<Txt2ImgParametersModel> OnGenerate { get; set; }
	[Parameter] public EventCallback OnSkip { get; set; }
	[Parameter] public EventCallback OnInterrupt { get; set; }

	public async void Generate()
	{
		await OnGenerate.InvokeAsync(Parameters);
	}
}
