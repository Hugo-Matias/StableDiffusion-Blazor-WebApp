@inject AppState AppState

<EditForm Model="@Parameters" OnSubmit="@Generate">
	<div class="generate-form col m-4">
		<button class="btn btn-success p-3 mb-3 w-50 d-flex m-auto justify-content-center fw-bold" type="submit">Generate</button>
		<div class="row">
			<div class="col-8">
				<label class="form-label" for="steps">Steps: <strong class="ms-2">@Parameters.Steps</strong></label>
				<input type="range" class="form-range" id="steps" @bind-value="@Parameters.Steps" @bind-value:event="oninput" min="@AppState.Settings.StepsMin" max="@AppState.Settings.StepsMax" step="@AppState.Settings.StepsStep" />
			</div>
			<div class="col-4">
				<label class="form-label" for="samplerGroup">Sampler</label> <br />
				<Dropdown ButtonText="@Parameters.SamplerIndex" OnSelected="SamplerSelected">
					<Button>
						@Parameters.SamplerIndex
					</Button>
					<Items>
						@foreach (var sampler in AppState.Samplers)
						{
							<DropdownItem Text="@sampler.Name" />
						}
					</Items>
				</Dropdown>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public Txt2ImgParametersModel Parameters { get; set; }

	private OptionsModel _options;

	[Parameter]
	public EventCallback<Txt2ImgParametersModel> OnGenerate { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_options = AppState.Options;
	}

	private void SamplerSelected(string selection) => Parameters.SamplerIndex = selection;

	public async void Generate()
	{
		await OnGenerate.InvokeAsync(Parameters);
	}
}