@inject AppState AppState
@inject DatabaseService DB
@inject JavascriptService JS
@implements IDisposable

<nav class="navbar navbar-dark navbar-expand-lg">
	<div class="container-fluid">
		<NavLink class="navbar-brand me-4" href="/" Match="NavLinkMatch.All"><span class="oi oi-image"></span> Blazor<strong>Diffusion</strong></NavLink>
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarSupportedContent">
			<ul class="navbar-nav me-auto mb-2 mb-lg-0">
				<li class="nav-item me-2">
					<NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
						<span class="oi oi-home me-1" aria-hidden="true"></span> Home
					</NavLink>
				</li>
				<li class="nav-item me-2">
					<NavLink class="nav-link" href="txt2img">
						<span class="oi oi-text me-1" aria-hidden="true"></span> Txt2Img
					</NavLink>
				</li>
				<li class="nav-item me-2">
					<NavLink class="nav-link" href="img2img">
						<span class="fa-solid fa-image me-1" aria-hidden="true"></span> Img2Img
					</NavLink>
				</li>
				<li class="nav-item me-2">
					<NavLink class="nav-link" href="settings">
						<span class="fa-solid fa-cog me-1" aria-hidden="true"></span> Settings
					</NavLink>
				</li>
			</ul>
			<Dropdown ButtonText="@ProjectSelected" OnSelected="@HandleProjectSelected" ButtonId="navbar-project-dropdown" IsDisabled="@AppState.IsConverging">
				<Button>@ProjectSelected</Button>
				<Items>
					@if (AppState.Projects.Count > 0)
					{
						@foreach (var project in AppState.Projects)
						{
							<DropdownItem Text="@project.Name"></DropdownItem>
						}
					}
				</Items>
			</Dropdown>

			<CreateProjectModal>
				<ButtonText>
					<span class="fa-solid fa-add"></span>
				</ButtonText>
			</CreateProjectModal>

			<Dropdown ButtonText="@ModelSelected" OnSelected="@HandleModelSelected" IsDisabled="@AppState.IsConverging">
				<Button>
					@if (ModelSelected == "Loading...")
					{
						<span class="spinner-border spinner-border-sm me-2" role="status"></span> @ModelSelected
					}
					else
					{
						<span>@ModelSelected</span>
					}
					<span class="fa-solid fa-flask ms-3"></span>
				</Button>
				<Items>
					@if (AppState.SDModels != null)
					{
						@foreach (var model in AppState.SDModels)
						{
							<DropdownItem Text="@model.Title"></DropdownItem>
						}
					}
				</Items>
			</Dropdown>
		</div>
	</div>
</nav>

@code {
	public string ModelSelected { get; set; } = "Loading...";
	public string ProjectSelected { get; set; }

	protected async override Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		await AppState.GetOptions();
		await AppState.GetSDModels();
		await AppState.GetSamplers();
		await AppState.GetStyles();

		AppState.OnConverging += Refresh;
		AppState.OnOptionsChange += Refresh;
		AppState.SetCurrentProjectId(1);

		PopulateProjects();

		ModelSelected = AppState.Options.SDModelCheckpoint;
		ProjectSelected = (AppState != null && AppState.Projects.Count > 0) ? AppState.Projects[0].Name : "Create New Project...";
	}

	private async void HandleModelSelected(string selected)
	{
		// TODO

		//var test = await AppState.PostOptions(new OptionsModel() { FilterNsfw = !AppState.Options.FilterNsfw });

		//await JSConsole.LogAsync(test);
		ModelSelected = selected;
		Refresh();
	}

	private async void PopulateProjects()
	{
		AppState.Projects = await DB.GetProjects();
		Refresh();
	}

	private async void HandleProjectSelected(string selected)
	{
		AppState.SetCurrentProjectId(DB.GetProject(selected).Result.Id);
		ProjectSelected = selected;
		Refresh();
	}

	public void Dispose()
	{
		AppState.OnConverging -= Refresh;
		AppState.OnOptionsChange -= Refresh;
	}

	private void Refresh() => InvokeAsync(StateHasChanged);
}
