@inject AppState AppState
@inject JavascriptService JSConsole
@implements IDisposable

<nav class="navbar navbar-dark navbar-expand-lg">
	<div class="container-fluid">
		<NavLink class="navbar-brand me-4" href="/" Match="NavLinkMatch.All"><span class="oi oi-image"></span> Blazor<strong>Diffusion</strong></NavLink>
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarSupportedContent">
			<ul class="navbar-nav me-auto mb-2 mb-lg-0">
				<li class="nav-item me-2">
					<NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
						<span class="oi oi-home me-1" aria-hidden="true"></span> Home
					</NavLink>
				</li>
				<li class="nav-item me-2">
					<NavLink class="nav-link" href="txt2img">
						<span class="oi oi-text me-1" aria-hidden="true"></span> Txt2Img
					</NavLink>
				</li>
			</ul>
			<Dropdown ButtonText="@DropdownSelected" OnSelected="@HandleDropdownSelected">
				<Button>
					@if (DropdownSelected == "Loading..." || AppState.IsConverging)
					{
						<span class="spinner-border spinner-border-sm me-2" role="status"></span> @DropdownSelected
					}
					else
					{
						<span>@DropdownSelected</span>
					}
					<span class="fa-solid fa-flask ms-3"></span>
				</Button>
				<Items>
					@if (Models != null)
					{
						@foreach (var model in Models)
						{
							<DropdownItem Text="@model.Title"></DropdownItem>
						}
					}
				</Items>
			</Dropdown>
		</div>
	</div>
</nav>

@code {
	public List<SDModelModel> Models { get; set; }
	public string DropdownSelected { get; set; } = "Loading...";

	protected override void OnInitialized()
	{
		base.OnInitializedAsync();

		AppState.OnOptionsChange += Refresh;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			GetModels();
		}
	}

	private void GetModels()
	{
		Models = AppState.SDModels;
		DropdownSelected = AppState.Options.SDModelCheckpoint;
		Refresh();
	}

	private async void HandleDropdownSelected(string selected)
	{
		// TODO

		//var test = await AppState.PostOptions(new OptionsModel() { FilterNsfw = !AppState.Options.FilterNsfw });

		//await JSConsole.LogAsync(test);
		DropdownSelected = selected;
		Refresh();
	}

	public void Dispose()
	{
		AppState.OnOptionsChange -= Refresh;
	}

	void Refresh() => InvokeAsync(StateHasChanged);
}
