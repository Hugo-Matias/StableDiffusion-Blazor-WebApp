@inject AppState AppState
@inject SDAPIService SD
@inject DatabaseService DB
@inject JavascriptService JS
@implements IDisposable

<nav class="navbar navbar-dark navbar-expand-lg">
    <div class="container-fluid">
        <NavLink class="navbar-brand me-4" href="/" Match="NavLinkMatch.All"><span class="oi oi-image"></span> Blazor<strong>Diffusion</strong></NavLink>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item me-2">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                        <span class="fa-solid fa-images me-1" aria-hidden="true"></span> Gallery
                    </NavLink>
                </li>
                <li class="nav-item me-2">
                    <NavLink class="nav-link" href="txt2img">
                        <span class="fa-regular fa-file-lines me-1" aria-hidden="true"></span> Txt2Img
                    </NavLink>
                </li>
                <li class="nav-item me-2">
                    <NavLink class="nav-link" href="img2img">
                        <span class="fa-regular fa-file-image me-1" aria-hidden="true"></span> Img2Img
                    </NavLink>
                </li>
                <li class="nav-item me-2">
                    <NavLink class="nav-link" href="upscale">
                        <span class="fa-solid fa-panorama me-1" aria-hidden="true"></span> Upscale
                    </NavLink>
                </li>
                <li class="nav-item me-2">
                    <NavLink class="nav-link" href="settings">
                        <span class="fa-solid fa-cog me-1" aria-hidden="true"></span> Settings
                    </NavLink>
                </li>
            </ul>
            <Dropdown ButtonText="@AppState.CurrentProjectName" OnSelected="@HandleProjectSelected" ButtonId="navbar-project-dropdown" IsDisabled="@AppState.IsConverging">
                <Button>@AppState.CurrentProjectName</Button>
                <Items>
                    @if (AppState.Projects.Count > 0)
                    {
                        @foreach (var project in AppState.Projects)
                        {
                            <DropdownItem Text="@project.Name"></DropdownItem>
                        }
                    }
                </Items>
            </Dropdown>

            <CreateProjectModal>
                <ButtonText>
                    <span class="fa-solid fa-add"></span>
                </ButtonText>
            </CreateProjectModal>

            <Dropdown ButtonText="@ModelSelected" OnSelected="@HandleModelSelected" IsDisabled="@AppState.IsConverging">
                <Button>
                    @if (ModelSelected == "Loading...")
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span> @ModelSelected
                    }
                    else
                    {
                        <span>@ModelSelected</span>
                    }
                    <span class="fa-solid fa-flask ms-3"></span>
                </Button>
                <Items>
                    @if (AppState.SDModels != null)
                    {
                        @foreach (var model in AppState.SDModels)
                        {
                            <DropdownItem Text="@model.Title"></DropdownItem>
                        }
                    }
                </Items>
            </Dropdown>
            <button class="btn btn-outline-primary ms-2" @onclick="@RefreshModels"><i class="fa-solid fa-rotate"></i></button>
        </div>
    </div>
</nav>

@code {
    public string ModelSelected { get; set; } = "Loading...";

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await AppState.GetOptions();
        await AppState.GetSDModels();
        await AppState.GetSamplers();
        await AppState.GetStyles();

        AppState.OnConverging += Refresh;
        AppState.OnOptionsChange += Refresh;
        AppState.OnProjectChange += Refresh;
        AppState.OnStateHasChanged += Refresh;

        await AppState.GetProjects();
        if (AppState.Projects != null && AppState.Projects.Count > 0)
        {
            if (AppState.CurrentProjectId == 0)
            {
                var latestProject = await DB.GetLatestProject();
                await AppState.SetCurrentProject(latestProject.Id);
            }
            else
            {
                await AppState.SetCurrentProject(AppState.CurrentProjectId);
            }
        }
        else
        {
            AppState.CurrentProjectName = "Create New Project...";
        }

        ModelSelected = AppState.Options.SDModelCheckpoint;
    }

    private async Task HandleModelSelected(string selected)
    {
        ModelSelected = "Loading...";
        Refresh();
        await SD.PostOptions(new() { SDModelCheckpoint = selected });
        ModelSelected = selected;
        Refresh();
    }

    private async Task RefreshModels()
    {
        var currentModel = ModelSelected;
        ModelSelected = "Loading...";
        Refresh();
        _ = await SD.PostRefreshModels();
        await AppState.GetSDModels();
        ModelSelected = currentModel;
        Refresh();
    }

    private async Task HandleProjectSelected(string selected)
    {
        await AppState.SetCurrentProject(DB.GetProject(selected).Result.Id);
        Refresh();
    }

    public void Dispose()
    {
        AppState.OnConverging -= Refresh;
        AppState.OnOptionsChange -= Refresh;
        AppState.OnProjectChange -= Refresh;
        AppState.OnStateHasChanged -= Refresh;
    }

    private void Refresh() => InvokeAsync(StateHasChanged);
}
