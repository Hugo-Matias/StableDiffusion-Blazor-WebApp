@inject JavascriptService JS
@inject ImageService ImageService

<div class="container">
	<div class="row justify-content-center">
		@if (!string.IsNullOrWhiteSpace(Title))
		{
			<div class="col-12">
				<h2 class="mb-3 text-center">@Title</h2>
			</div>
		}

		@if (Images.Images is not null && Images.Images.Count > 0)
		{
			@foreach (var image in Images.Images)
			{
				<ImageCard Image="@image" Target="fullscreen-modal" OnSelectImage="ShowFullscreen" />
			}
		}
	</div>
</div>

<!-- Fullscreen Viewer Modal -->
<div class="modal fade" id="fullscreen-modal" @onclick="HideFullscreen" tabindex="-1" aria-hidden="true">
	<div id="fullscreen-modal-dialog" class="modal-dialog modal-dialog-centered @(modalMaxMinIcon == "fa-minimize" ? "expanded" : "")" style="max-width: @(selectedImage.Width)px; max-height: @(selectedImage.Height)px;">
		<div class="modal-content"> 
			<img src="data:image/png;base64,@imageData" />
		</div>
	</div>
</div>

<div class="row modal-controls @(IsShowingModal?"show":"")">
	<div class="col">
		<button class="btn btn-outline-warning" @onclick="ToggleMaximize"><span class="fa-solid @modalMaxMinIcon"></span></button>
		<button class="btn btn-outline-danger" @onclick="HideFullscreen"><span class="fa-solid fa-xmark"></span></button>
	</div>
</div>

@code {
	[Parameter]
	public ImagesDto Images { get; set; }

	[Parameter]
	public string? Title { get; set; } = string.Empty;

	Image selectedImage = new();
	bool IsShowingModal;
	string modalMaxMinIcon = "fa-maximize";
	string imageData = string.Empty;

	private async void ShowFullscreen(Image image)
	{
		selectedImage = image;
		IsShowingModal = true;
		imageData = await ImageService.LoadImage(selectedImage.Path);
		StateHasChanged();
	}

	private async void HideFullscreen()
	{
		await JS.RunScript("HideModal", "#fullscreen-modal");
		IsShowingModal = false;
		StateHasChanged();
		selectedImage = new();
	}

	private void ToggleMaximize()
	{
		modalMaxMinIcon = modalMaxMinIcon == "fa-maximize" ? "fa-minimize" : "fa-maximize";
		StateHasChanged();
	}
}
