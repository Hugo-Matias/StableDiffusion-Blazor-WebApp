@inject AppState AppState
@inject MagickService Magick
@inject IJSRuntime JS
@implements IAsyncDisposable

<div id="dropzone-container">
	<img id="dropzone-image" src="./no_image.png" @ref="_image" />
    <div class="dropzone" @ref="_dropzone">
        <h1>Drop an image here.</h1>
        <InputFile OnChange="@OnDropFile" @ref="_inputFile" />
    </div>
</div>

@code {
	[Parameter]
	public EventCallback OnImageChanged { get; set; }

	private ElementReference _image;
	private ElementReference _dropzone;
	private InputFile _inputFile;
	private int _maxFileSizeMB = 30;

	private IJSObjectReference _dropzoneModule;
	private IJSObjectReference _dropzoneInstance;
	private IJSObjectReference _dropzoneImageModule;
	private IJSObjectReference _dropzoneImageInstance;

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_dropzoneModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/Dropzone.js");
			_dropzoneInstance = await _dropzoneModule.InvokeAsync<IJSObjectReference>("init", _dropzone, _inputFile.Element);

			_dropzoneImageModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/DropzoneImage.js");
			_dropzoneImageInstance = await _dropzoneImageModule.InvokeAsync<IJSObjectReference>("init", _image);

			if (!string.IsNullOrWhiteSpace(AppState.UpscaleImageData)) await LoadImage();
		}
	}

	private async Task OnDropFile(InputFileChangeEventArgs e)
	{
		var maxSize = _maxFileSizeMB * 1024 * 1024;
		using var stream = e.File.OpenReadStream(maxSize);
		using var ms = new MemoryStream();
		await stream.CopyToAsync(ms);
		var imageString = Convert.ToBase64String(ms.ToArray());
		//var imageString = Magick.ResizeImage(ms.ToArray());
		var data = $"data:{e.File.ContentType};base64,{imageString}";
		AppState.UpscaleImageData = data;
		await OnImageChanged.InvokeAsync();
		await LoadImage();
	}

	private async Task LoadImage()
	{
		await _dropzoneImageInstance.InvokeVoidAsync("loadImage", AppState.UpscaleImageData);
	}

	public async ValueTask DisposeAsync()
	{
		if (_dropzoneInstance != null)
		{
			await _dropzoneInstance.InvokeVoidAsync("dispose");
			await _dropzoneInstance.DisposeAsync();
		}
		if (_dropzoneModule != null) await _dropzoneModule.DisposeAsync();
		if (_dropzoneImageInstance != null) await _dropzoneImageInstance.DisposeAsync();
		if (_dropzoneImageModule != null) await _dropzoneImageModule.DisposeAsync();
	}
}
