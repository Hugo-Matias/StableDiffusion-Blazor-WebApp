@inject AppState AppState
@inject DatabaseService DB
@inject IDialogService DialogService
@implements IDisposable

<div>
    <MudPaper Class="p-3 mb-3">
        <MudStack Class="projects-container" Row>
            <MudStack Class="justify-content-center">
                <CreateProjectButton Variant="Variant.Text">
                    <MudStack Class="d-flex flex-column align-items-center">
                        <MudText Typo="Typo.caption">Add Project</MudText>
                        <MudIcon Icon="fa-solid fa-plus" />
                    </MudStack>
                </CreateProjectButton>
                @if (AppState.CurrentFolderId > 0)
                {
                    <MudButton OnClick="ShowDeleteFolderModal" Variant="Variant.Text" Color="Color.Error">
                        <MudStack Class="d-flex flex-column align-items-center">
                            <MudText Typo="Typo.caption">Delete Folder</MudText>
                            <MudIcon Icon="fa-solid fa-trash-can" />
                        </MudStack>
                    </MudButton>
                }
            </MudStack>
            @if (AppState.Projects != null && AppState.Projects.Count > 0)
            {
                @foreach (var project in AppState.Projects)
                {
                    <ProjectCard ProjectId="project.Id" Name="@project.Name" OnSelected="HandleProjectSelected" OnDeleted="ShowDeleteProjectModal" OnEdited="ShowEditProjectModal"></ProjectCard>
                }
            }
        </MudStack>
    </MudPaper>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudGrid>
            <MudItem xs="4">
                <MudStack>
                    <MudTextField T="string" @bind-Value="AppState.Settings.Gallery.SearchPrompt" Label="Prompt" HelperText="Search text contained in image's prompt." HelperTextOnFocus=true Variant="Variant.Text" />
                    <MudTextField Class="mt-n4" T="string" @bind-Value="AppState.Settings.Gallery.SearchNegativePrompt" Label="Negative Prompt" HelperText="Search text contained in image's negative prompt." HelperTextOnFocus=true Variant="Variant.Text" />
                </MudStack>
            </MudItem>
            <MudItem xs="3">
                <MudCheckBox Class="mt-4" Label="Favorites Only" @bind-Checked="AppState.Settings.Gallery.IsFavoritesOnly" Color="Color.Error" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder" />
                <MudStack Class="mt-2" Row=true>
                    <MudSelect Label="Order by" @bind-Value="AppState.Settings.Gallery.OrderBy">
                        @foreach (GalleryOrderBy order in Enum.GetValues(typeof(GalleryOrderBy)))
                        {
                            <MudSelectItem Value="order">@order</MudSelectItem>
                        }
                    </MudSelect>
                    <MudCheckBox Class="mt-2" Label="@(AppState.Settings.Gallery.OrderDescending ? "Desc" : "Asc")" CheckedIcon="@Icons.Material.Filled.ArrowDownward" UncheckedIcon="@Icons.Material.Filled.ArrowUpward" @bind-Checked="AppState.Settings.Gallery.OrderDescending" />
                </MudStack>
            </MudItem>
            <MudItem xs="4" Class="d-flex flex-column align-items-center">
                <MudText Typo="Typo.overline">Modes:</MudText>
                <MudChipSet SelectedChipsChanged="HandleModeSelection" Class="" Filter MultiSelection>
                    <MudChip Text="Txt2Img" Variant="Variant.Text" Color="Color.Primary" Default="AppState.Settings.Gallery.IsModeTxt2Img" />
                    <MudChip Text="Img2Img" Variant="Variant.Text" Color="Color.Primary" Default="AppState.Settings.Gallery.IsModeImg2Img" />
                    <MudChip Text="Upscale" Variant="Variant.Text" Color="Color.Primary" Default="AppState.Settings.Gallery.IsModeUpscale" />
                </MudChipSet>
                <MudDateRangePicker Label="Date Range" @bind-DateRange=AppState.Settings.Gallery.DateRange AutoClose=true />
            </MudItem>
            <MudItem xs=1>
                <MudButtonGroup Class="mt-5" Variant="Variant.Outlined" Color="Color.Primary" OverrideStyles=false>
                    <MudButton OnClick="async () => await OnFilterImages.InvokeAsync()" Variant="Variant.Text" Size="Size.Large" Color="Color.Warning">Filter</MudButton>
                    <MudButton OnClick="async () => await OnResetFilters.InvokeAsync()" Variant="Variant.Text" Size="Size.Large" Color="Color.Error">Reset</MudButton>
                </MudButtonGroup>
                <MudCheckBox Class="mt-4" Label="DateRange" CheckedIcon="fa-solid fa-calendar" Color="Color.Success" UncheckedIcon="fa-regular fa-calendar" UnCheckedColor="Color.Error" @bind-Checked=AppState.Settings.Gallery.FilterByDateRange />
            </MudItem>
        </MudGrid>
    </MudContainer>
</div>

@code {
    //  TODO: Refactor ProjectCard container into index or another component
    [Parameter] public EventCallback OnFilterImages { get; set; }
    [Parameter] public EventCallback OnResetFilters { get; set; }
    [Parameter] public EventCallback OnProjectDeleted { get; set; }

    DialogOptions _dialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

    protected override void OnInitialized()
    {
        AppState.OnFolderChange += Refresh;
    }

    private async Task HandleProjectSelected(int projectId)
    {
        await AppState.SetCurrentProject(projectId);
        await InvokeAsync(StateHasChanged);
    }

    private void HandleModeSelection(MudChip[] chips)
    {
        AppState.Settings.Gallery.IsModeTxt2Img = chips.Any(c => c.Text == "Txt2Img");
        AppState.Settings.Gallery.IsModeImg2Img = chips.Any(c => c.Text == "Img2Img");
        AppState.Settings.Gallery.IsModeUpscale = chips.Any(c => c.Text == "Upscale");
    }

    private async Task ShowDeleteProjectModal(int projectId)
    {
        var parameters = new DialogParameters();
        parameters.Add("OkButtonText", "Yes");
        parameters.Add("CancelButtonText", "No");
        parameters.Add("OkButtonColor", Color.Error);
        parameters.Add("Content", new MarkupString(@"<span class='lead'>Are you sure you want to <strong class='text-danger'>delete</strong> this project?<br /></span><small>This action is irreversible!</small>"));
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Project", parameters, _dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled) await DeleteProject(projectId);
    }

    private async Task ShowDeleteFolderModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("OkButtonText", "Yes");
        parameters.Add("CancelButtonText", "No");
        parameters.Add("OkButtonColor", Color.Error);
        parameters.Add("Content", new MarkupString(@"<span class='lead'>Are you sure you want to <strong class='text-danger'>delete</strong> this folder?<br /></span><span>All projects in this folder will be folderless and you can find them in the ""All"" projects folder.</span><br/><small>This action is irreversible!</small>"));
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Folder", parameters, _dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled) await DeleteFolder();
    }

    private async Task DeleteFolder()
    {
        await DB.DeleteFolder(AppState.CurrentFolderId);
        await AppState.GetFolders();
        await AppState.SetCurrentFolder(0);
    }

    private async Task DeleteProject(int id)
    {
        var project = await DB.DeleteProject(id);
        await AppState.GetProjects();
        if (project != null)
            await AppState.SetCurrentProject(project.Id);
        else
            await AppState.SetCurrentProject(0);
        await OnProjectDeleted.InvokeAsync();
    }

    private async Task ShowEditProjectModal(int projectId)
    {
        var project = AppState.Projects.FirstOrDefault(p => p.Id == projectId);
        var param = new DialogParameters();
        param.Add("Project", project);
        var dialog = await DialogService.ShowAsync<ProjectModal>($"Edit {project.Name}", param, _dialogOptions);
        var result = await dialog.Result;
        if (!result.Cancelled) await EditProject((Project)result.Data);
    }

    private async Task EditProject(Project project)
    {
        var updates = new Project() { Name = project.Name, Folder = project.Folder };
        await DB.UpdateProject(project.Id, updates);
        // Re-sets current project to refresh the relevant ui components
        await AppState.SetCurrentProject(AppState.CurrentProjectId);
        await InvokeAsync(StateHasChanged);
    }

    private async void Refresh() => await InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        AppState.OnFolderChange -= Refresh;
    }
}
