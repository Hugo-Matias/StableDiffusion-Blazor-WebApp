@inject ManagerService M

<div style="margin-bottom:15rem;">
    <EditForm Model="@Parameters">
        <MudGrid Class="pa-5">
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.Steps Min=M.Settings.Shared.Steps.Min Max=M.Settings.Shared.Steps.Max Step=M.Settings.Shared.Steps.Step Variant="Variant.Filled" ValueLabel><small>Steps:</small> @Parameters.Steps</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" Label="Sampler" @bind-Value=Parameters.SamplerIndex AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    @if (M.Samplers != null)
                    {
                        @foreach (var sampler in M.Samplers)
                        {
                            <MudSelectItem Value=@sampler.Name />
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.CfgScale Min=M.Settings.Shared.CfgScale.Min Max=M.Settings.Shared.CfgScale.Max Step=M.Settings.Shared.CfgScale.Step Variant="Variant.Filled" ValueLabel TickMarks><small>CFG Scale:</small> @Parameters.CfgScale</MudSlider>
            </MudItem>
            <MudItem xs="5">
                <MudNumericField @bind-Value=Parameters.Seed Label="Seed" Min="-1" Max="long.MaxValue" />
            </MudItem>
            <MudItem xs="1">
                <MudButtonGroup Variant="Variant.Text" VerticalAlign>
                    <MudIconButton OnClick=SetRandomSeed Icon="fa-solid fa-shuffle" ButtonType="ButtonType.Button" Class="icon" />
                    <MudIconButton OnClick=RestoreSeed Icon="fa-solid fa-rotate-left" ButtonType="ButtonType.Button" Class="icon" />
                </MudButtonGroup>
            </MudItem>
            <MudItem xs="6">
                <MudSlider T="int?" ValueChanged=@((v) => HandleResolutionChanged((int)v, isWidth: true)) Value=Parameters.Width Min=M.Settings.Shared.Resolution.Min Max=M.Settings.Shared.Resolution.Max Step=M.Settings.Shared.Resolution.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Width:</small> @(Parameters.Width)px</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider T="int?" ValueChanged=@((v) => HandleResolutionChanged((int)v, isWidth: false)) Value=Parameters.Height Min=M.Settings.Shared.Resolution.Min Max=M.Settings.Shared.Resolution.Max Step=M.Settings.Shared.Resolution.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Height:</small> @(Parameters.Height)px</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.NIter Min=M.Settings.Shared.Batch.Count.Min Max=M.Settings.Shared.Batch.Count.Max Step=M.Settings.Shared.Batch.Count.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Batch Count:</small> @Parameters.NIter</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.BatchSize Min=M.Settings.Shared.Batch.Size.Min Max=M.Settings.Shared.Batch.Size.Max Step=M.Settings.Shared.Batch.Size.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Batch Size:</small> @Parameters.BatchSize</MudSlider>
            </MudItem>
            <MudItem xs="12">
                <MudChipSet SelectedChipsChanged="HandleParameterChecked" MultiSelection Filter>
                    <MudChip Text="Restore Faces" Default="Parameters.RestoreFaces" Variant="Variant.Text" Color="Color.Primary">Restore Faces</MudChip>
                    <MudChip Text="Tiling" Default="Parameters.Tiling" Variant="Variant.Text" Color="Color.Primary">Tiling</MudChip>
                    <MudChip Text="Highres Fix" Default="Parameters.EnableHR" Variant="Variant.Text" Color="Color.Primary">Highres Fix</MudChip>
                    <MudChip Text="Tiled Diffusion" Default="Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Tiled Diffusion</MudChip>
                    <MudChip Text="Tiled VAE" Default="Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Tiled VAE</MudChip>
                    <MudChip Text="Cutoff" Default="Parameters.Scripts.Cutoff.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Cutoff</MudChip>
                    <MudChip Text="Regional Prompter" Default="Parameters.Scripts.RegionalPrompter.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Regional Prompter</MudChip>
                    <MudChip Text="Dynamic Prompts" Default="Parameters.Scripts.DynamicPrompts.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Dynamic Prompts</MudChip>
                    <MudChip Text="ControlNet" Default="M.ControlNetEnabled" Variant="Variant.Text" Color="Color.Primary">ControlNet</MudChip>
                </MudChipSet>
            </MudItem>
            <MudItem xs="12">
                <MudGrid Class=@($"collapse {(Parameters.EnableHR == true ? "show" : "")}")>
                    <MudItem xs="12" Class="align-items-center justify-content-center d-flex mt-n3">
                        <MudText Typo="Typo.overline">@_resizeInfo</MudText>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect T="string" Label="Upscaler" @bind-Value=Parameters.HRUpscaler AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                            @if (M.Upscalers != null && M.Upscalers.Count > 0)
                            {
                                @foreach (var upscaler in _hiresUpscalers)
                                {
                                    <MudSelectItem Value=@(upscaler.Name) />
                                }
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSlider @bind-Value=Parameters.HRSecondPassSteps Min=M.Settings.Txt2Img.HighRes.SecondPassSteps.Min Max=M.Settings.Txt2Img.HighRes.SecondPassSteps.Max Step=M.Settings.Txt2Img.HighRes.SecondPassSteps.Step Variant="Variant.Filled" ValueLabel><small>Steps:</small> @($"{(Parameters.HRSecondPassSteps > 0 ? Parameters.HRSecondPassSteps : $"Original ({Parameters.Steps})")}")</MudSlider>
                        </MudItem>
                        <MudItem xs="4">
                            <MudSlider @bind-Value=Parameters.DenoisingStrength Min=M.Settings.Shared.Denoising.Min Max=M.Settings.Shared.Denoising.Max Step=M.Settings.Shared.Denoising.Step Variant="Variant.Filled" ValueLabel><small>Denoising:</small> @Parameters.DenoisingStrength</MudSlider>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSlider T="double" ValueChanged=HandleHRScaleChanged Value=Parameters.HRScale Min=M.Settings.Txt2Img.HighRes.Scale.Min Max=M.Settings.Txt2Img.HighRes.Scale.Max Step=M.Settings.Txt2Img.HighRes.Scale.Step Variant="Variant.Filled" ValueLabel><small>Scale Multiplier:</small> @(Parameters.HRScale)x</MudSlider>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSlider T="int" ValueChanged=@((v) => HandleHRResolutionChanged(v, isWidth: true)) Value=Parameters.HRWidth Min=M.Settings.Txt2Img.HighRes.Resolution.Min Max=M.Settings.Txt2Img.HighRes.Resolution.Max Step=M.Settings.Txt2Img.HighRes.Resolution.Step Variant="Variant.Filled" ValueLabel><small>Width:</small> @(Parameters.HRWidth)px</MudSlider>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSlider T="int" ValueChanged=@((v) => HandleHRResolutionChanged(v, isWidth: false)) Value=Parameters.HRHeight Min=M.Settings.Txt2Img.HighRes.Resolution.Min Max=M.Settings.Txt2Img.HighRes.Resolution.Max Step=M.Settings.Txt2Img.HighRes.Resolution.Step Variant="Variant.Filled" ValueLabel><small>Height:</small> @(Parameters.HRHeight)px</MudSlider>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled ? "show" : "")}")">
                <MultiDiffusionTiledDiffusionForm Parameters=Parameters.Scripts.MultiDiffusionTiledDiffusion IsImg2Img=false />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled ? "show" : "")}")">
                <MultiDiffusionTiledVaeForm Parameters=Parameters.Scripts.MultiDiffusionTiledVae />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.Cutoff.IsEnabled ? "show" : "")}")">
                <CutoffForm Parameters=Parameters.Scripts.Cutoff />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.RegionalPrompter.IsEnabled ? "show" : "")}")">
                <RegionalPrompterForm Parameters=Parameters.Scripts.RegionalPrompter />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.DynamicPrompts.IsEnabled ? "show" : "")}")">
                <DynamicPromptsForm Parameters=Parameters.Scripts.DynamicPrompts />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(M.ControlNetEnabled ? "show" : "")}")">
                <ControlNetTabs Units="Parameters.Scripts.ControlNet" />
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    [Parameter] public Txt2ImgParameters Parameters { get; set; }
    [Parameter] public EventCallback<Txt2ImgParameters> ParametersChanged { get; set; }

    private Options _options;
    private MarkupString _resizeInfo;
    private List<Upscaler> _hiresUpscalers = new();
    private List<string> _hiresUpscalerNames = new() { "Latent", "Latent (antialiased)", "Latent (bicubic)", "Latent (bicubic antialiased)", "Latent (nearest)", "Latent (nearest-exact)" };

    protected async override Task OnInitializedAsync()
    {
        _options = M.Options;
        if (M.Upscalers == null || M.Upscalers.Count == 0) await M.GetUpscalers();
        RefreshHighresInfo();
        InitializeUpscalers();
    }

    private void InitializeUpscalers()
    {
        foreach (var upscaler in _hiresUpscalerNames)
        {
            _hiresUpscalers.Add(new Upscaler() { Name = upscaler, ModelName = upscaler, ModelPath = string.Empty, ModelUrl = string.Empty });
        }
        _hiresUpscalers.AddRange(M.Upscalers);
    }

    private void SetRandomSeed() => Parameters.Seed = -1;

    private void RestoreSeed()
    {
        if (M.ImagesInfo != null && M.ImagesInfo.Seed != null)
            Parameters.Seed = M.ImagesInfo.Seed;
    }

    private void HandleParameterChecked(MudChip[] checkboxes)
    {
        Parameters.RestoreFaces = false;
        Parameters.Tiling = false;
        Parameters.EnableHR = false;
        Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled = false;
        Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled = false;
        Parameters.Scripts.Cutoff.IsEnabled = false;
        Parameters.Scripts.RegionalPrompter.IsEnabled = false;
        Parameters.Scripts.DynamicPrompts.IsEnabled = false;
        M.ControlNetEnabled = false;
        if (checkboxes == null || checkboxes.Count() == 0) return;

        foreach (var check in checkboxes)
        {
            switch (check.Text)
            {
                case "Restore Faces":
                    Parameters.RestoreFaces = true;
                    break;
                case "Tiling":
                    Parameters.Tiling = true;
                    break;
                case "Highres Fix":
                    Parameters.EnableHR = true;
                    break;
                case "Tiled Diffusion":
                    Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled = true;
                    break;
                case "Tiled VAE":
                    Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled = true;
                    break;
                case "Cutoff":
                    Parameters.Scripts.Cutoff.IsEnabled = true;
                    break;
                case "Regional Prompter":
                    Parameters.Scripts.RegionalPrompter.IsEnabled = true;
                    break;
                case "Dynamic Prompts":
                    Parameters.Scripts.DynamicPrompts.IsEnabled = true;
                    break;
                case "ControlNet":
                    M.ControlNetEnabled = true;
                    break;
            }
        }
    }

    private void HandleResolutionChanged(int value, bool isWidth)
    {
        if (isWidth) Parameters.Width = value;
        else Parameters.Height = value;
        RefreshHighresInfo();
    }

    private void HandleHRResolutionChanged(int value, bool isWidth)
    {
        if (isWidth) Parameters.HRWidth = value;
        else Parameters.HRHeight = value;
        RefreshHighresInfo();
    }

    private void HandleHRScaleChanged(double value)
    {
        Parameters.HRScale = value;
        RefreshHighresInfo();
    }

    private void RefreshHighresInfo() => _resizeInfo = Parser.ParseHighresFixResizeInfo(Parameters);

}