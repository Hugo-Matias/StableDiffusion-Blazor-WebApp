@inherits LayoutComponentBase
@inject AppState AppState
@inject SDAPIService API
@implements IDisposable

<PageTitle>BlazorDiffusion</PageTitle>

<MudThemeProvider @bind-IsDarkMode=AppState.Settings.IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />

<div>
    <MudLayout Style="overflow:hidden;">
        <MudAppBar>
            <ProgressContainer />
            <MudIconButton Href="/" Variant="Variant.Text" Icon="fa-solid fa-image me-1" Class="brand w-auto" />
            <NavBar />
            <MudSpacer />
            <MudIconButton Class=@(AppState.CurrentSDModel == "Loading..." ? "spinner" : "") Icon="@Icons.Material.Filled.Settings" Color=@(AppState.CurrentSDModel == "Loading..." ? Color.Info : Color.Inherit) Edge="Edge.Start" OnClick="() => DrawerToggler()" />
        </MudAppBar>
        <MudExpansionPanels Style="position: fixed; width:100%; z-index:100;">
            <MudExpansionPanel HideIcon=true IsExpanded="_isToolbarOpen">
                <TopToolbar />
            </MudExpansionPanel>
        </MudExpansionPanels>
        <MudMainContent>
            <MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</div>

@code {
    private bool _isToolbarOpen = false;

    protected override void OnInitialized()
    {
        AppState.OnProgressChanged += Refresh;
        AppState.OnSDModelsChange += Refresh;
    }

    protected async override Task OnInitializedAsync() => AppState.IsWebuiUp = await API.CheckWebuiState();

    private void DrawerToggler() => _isToolbarOpen = !_isToolbarOpen;

    private async void Refresh() => await InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        AppState.OnProgressChanged -= Refresh;
        AppState.OnSDModelsChange += Refresh;
    }
}
