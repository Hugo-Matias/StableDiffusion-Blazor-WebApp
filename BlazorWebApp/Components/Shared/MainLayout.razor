@inherits LayoutComponentBase
@inject AppState AppState
@inject SDAPIService API
@implements IDisposable

<PageTitle>BlazorDiffusion</PageTitle>

<MudThemeProvider @bind-IsDarkMode=AppState.Settings.IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Style="overflow:hidden;">
    <MudAppBar>
        <MudIconButton Href="/" Variant="Variant.Text" Icon="fa-solid fa-image me-1" Class="brand w-auto" />
        <NavBar />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Edge="Edge.Start" OnClick="() => DrawerToggler()" />
    </MudAppBar>
    <MudExpansionPanels Style="position: fixed; width:100%; z-index:100;">
        <MudExpansionPanel HideIcon=true IsExpanded="_isToolbarOpen">
            <TopToolbar />
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudProgressLinear Style=@($"position: fixed; margin-top: {(AppState.CurrentProgress > 0 ? "64px; z-index: 1000;" : "60px; z-index: -1000;")}") Min="0" Max="100" @bind-Value="AppState.CurrentProgress" Color="Color.Primary" />
    <MudMainContent>
        <MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isToolbarOpen = false;

    protected override void OnInitialized() => AppState.OnProgressChanged += Refresh;

    protected async override Task OnInitializedAsync() => AppState.IsWebuiUp = await API.CheckWebuiState();

    private void DrawerToggler() => _isToolbarOpen = !_isToolbarOpen;

    private async void Refresh() => await InvokeAsync(StateHasChanged);

    public void Dispose() => AppState.OnProgressChanged -= Refresh;
}
