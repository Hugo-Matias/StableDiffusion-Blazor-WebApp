@implements IDisposable
@inject ToasterService ToasterService

@if (ToasterService.HasToasts)
{
    <div class="">
        <div class="toast-container">
            @foreach (var toast in ToasterService.GetToasts())
            {
                var _toastCss = GenerateCss(toast);
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header @_toastCss">
                        <strong class="me-auto">@toast.Title</strong>
                        <small class="@_toastCss">@toast.ElapsedTimeText</small>
                        <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="() => ClearToast(toast)"></button>
                    </div>
                    <div class="toast-body">@toast.Message</div>
                </div>
            }
        </div>
    </div>
}

@code {
    //https://www.codeproject.com/Articles/5322875/A-Blazor-Bootstrap-Toaster
    protected override void OnInitialized()
    {
        ToasterService.OnToasterChanged += ToastChanged;
        ToasterService.OnToasterTimeElapsed += ToastChanged;
    }

    private void ToastChanged(object? sender, EventArgs e) => InvokeAsync(StateHasChanged);

    private void ClearToast(Toast toast) => ToasterService.ClearToast(toast);

    private string GenerateCss(Toast toast)
    {
        var color = Enum.GetName(typeof(MessageColor), toast.MessageColor)?.ToLower();
        return toast.MessageColor switch
        {
            MessageColor.Light => "bg-light",
            _ => $"bg-{color} text-white"
        };
    }

    public void Dispose()
    {
        ToasterService.OnToasterChanged -= ToastChanged;
        ToasterService.OnToasterTimeElapsed -= ToastChanged;
    }
}
