@inject AppState AppState

<button class="btn btn-outline-secondary tags-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#@OffscreenId" aria-controls="tag-offcanvas"><span class="fa-solid fa-tags me-2"></span> Tags</button>

<div class="offcanvas offcanvas-end" tabindex="-1" id="@OffscreenId" aria-labelledby="tag-offcanvas-label">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="tag-offcanvas-label">Tag Selector</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        @if (_selectedTags.Count > 0)
        {
            <label class="form-label me-2">Selected Tags:</label>
            <div class="row selected-tags-container mb-4">
                @for (var i = 0; i < _selectedTags.Count; i++)
                {
                    var index = i;
                    <span class="badge rounded-pill" style="color:@GetTagBadgeColor(i)">
                        <div class="d-flex flex-column">
                            <button class="btn-weight" @onclick="() => ChangeTagWeight(index, increment: true)">
                                <i class="fa-solid fa-chevron-up" />
                            </button>
                            <button class="btn-weight" @onclick="() => ChangeTagWeight(index, increment: false)">
                                <i class="fa-solid fa-chevron-down" />
                            </button>
                        </div>
                        @ParseTagWeight(i)
                        <button class="btn-close btn-close-white" @onclick="() => RemoveTag(index)"></button>
                    </span>
                }
            </div>
            <div class="append-tags-btn-container d-flex align-items-baseline mb-3">
                <button class="btn btn-outline-primary me-2" @onclick="() => AppendTags(true)">Prefix</button>
                <button class="btn btn-outline-primary me-2" @onclick="() => AppendTags(false)">Suffix</button>
                <button class="btn btn-outline-danger" @onclick="() => _selectedTags.Clear()">Clear</button>
            </div>
        }
@*        <Autocomplete @ref="SearchInputRef"
                      TItem="CsvTagModel"
                      TValue="string"
                      Placeholder="Search tags..."
                      TextField="t => t.Name"
                      ValueField="t => t.Name"
                      Data="@CsvTags"
                      @bind-SelectedText="@SelectedText"
                      CustomFilter="@(SearchInputChanged)"
                      SelectedValueChanged="SelectedValueChanged"
                      FreeTyping
                      Virtualize
                      Context="acContext">
            <ItemContent>
                <p class="autocomplete-item-content align-content-end" style="color:@GetTagSuggestionColor(acContext.Item.Name, acContext.Item.Color)">
                    @acContext.Text
                    @if (!acContext.Item.Name.Contains(_searchText) && acContext.Item.Aliases.Contains(_searchText))
                    {
                        <small style="color: var(--app-light-2);"> => @(Parser.ParseCsvTagAlias(acContext.Item.Aliases, _searchText))</small>
                    }
                </p>
            </ItemContent>
        </Autocomplete>
*@        <div class="accordion mt-3" id="tagsAccordion">
            @foreach (var item in AppState.RootButtonTag.Items)
            {
                <TagAccordion Tag="@item" DataParent="tagsAccordion" OnButtonClicked="AddTag" />
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<AppendedTags> OnAppendTags { get; set; }
    [Parameter]
    public string OffscreenId { get; set; }
    [Parameter, EditorRequired]
    public List<CsvTag> CsvTags { get; set; }

    public string SelectedText { get; set; }

    private List<(string, float)> _selectedTags = new();
    private int _tagListCount = 10;
    private string _searchText;
    private float _incrementAmount = 0.05f;

    private bool SearchInputChanged(CsvTag tag, string search)
    {
        _searchText = search;
        return tag.Name.Contains(search, StringComparison.InvariantCultureIgnoreCase) || tag.Aliases.Contains(search, StringComparison.InvariantCultureIgnoreCase);
    }

    private void SelectedValueChanged(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return;
        _selectedTags.Add((value, 1.0f));
    }

    private void AddTag(string tag) => _selectedTags.Add((tag, 1.0f));

    private void RemoveTag(int tagIndex) => _selectedTags.RemoveAt(tagIndex);

    private void AppendTags(bool isPrefix)
    {
        var tags = string.Empty;
        for (int i = 0; i < _selectedTags.Count; i++)
            tags += ParseTagWeight(i) + (i < _selectedTags.Count - 1 ? ", " : "");
        OnAppendTags.InvokeAsync(new AppendedTags() { Tags = tags, IsPrefix = isPrefix });
        _selectedTags.Clear();
    }

    private string ParseTagWeight(int tagIndex)
    {
        var item = _selectedTags[tagIndex];
        if (item.Item2 == 1.0f) return item.Item1.ToString();
        else return $"({item.Item1}:{item.Item2:0.00})";
    }

    private void ChangeTagWeight(int tagIndex, bool increment)
    {
        var item = _selectedTags[tagIndex];
        _selectedTags.RemoveAt(tagIndex);
        if (increment) _selectedTags.Insert(tagIndex, (item.Item1, item.Item2 + _incrementAmount));
        else _selectedTags.Insert(tagIndex, (item.Item1, (item.Item2 - _incrementAmount <= 0 ? 0f : item.Item2 - _incrementAmount)));
    }

    private string GetTagSuggestionColor(string tag, int color)
    {
        return _selectedTags.Any(t => t.Item1 == tag) ? "--var(--app-light-3)" : Parser.ParseCsvTagColor(color) + " !important";
    }

    private string GetTagBadgeColor(int tagIndex)
    {
        var item = _selectedTags[tagIndex];
        return AppState.CsvTags.Any(t => t.Name == item.Item1.ToString()) ? Parser.ParseCsvTagColor(AppState.CsvTags.FirstOrDefault(t => t.Name == item.Item1.ToString()).Color) : "var(--app-light-3);";
    }
}
