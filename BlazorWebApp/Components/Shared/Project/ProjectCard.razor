@inject AppState AppState
@inject DatabaseService DB
@inject ImageService IM

<div>
    <MudCard Elevation="4" Class="@("project-card" + (AppState.CurrentProjectId == ProjectId ? " selected" : ""))">
        <MudCardMedia Image="@Image" />
        <MudCardContent>
            <MudText Typo="Typo.h6" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@Name</MudText>
        </MudCardContent>
        <MudCardActions Style="display: flex; justify-content: space-around">
            <MudIconButton OnClick="() => OnSelected.InvokeAsync(ProjectId)" Icon="fa-solid fa-check" Class="icon" ButtonType=ButtonType.Button Color=Color.Success />
            <MudIconButton OnClick="() => OnEdited.InvokeAsync(ProjectId)" Icon="fa-solid fa-pen" Class="icon" ButtonType=ButtonType.Button Color="Color.Info" />
            <MudIconButton OnClick="() => OnDeleted.InvokeAsync(ProjectId)" Icon="fa-solid fa-trash-can" Class="icon" ButtonType=ButtonType.Button Color="Color.Error" />
        </MudCardActions>
    </MudCard>
</div>

@code {
    [Parameter]
    public int ProjectId { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }
    [Parameter]
    public EventCallback<int> OnSelected { get; set; }
    [Parameter]
    public EventCallback<int> OnEdited { get; set; }

    public string Image { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Image = await SetProjectSampleImage(ProjectId);
    }

    private async Task<string> SetProjectSampleImage(int projectId)
    {
        var image = await DB.GetSampleImage(projectId);
        if (string.IsNullOrWhiteSpace(image))
        {
            var imageEntity = await DB.GetRandomFavorite(projectId);
            if (imageEntity != null)
                image ??= imageEntity.Path;
        }
        if (!string.IsNullOrWhiteSpace(image)) return $"data:image/png;base64,{await IM.LoadImageAsync(image)}";
        else return "./no_image.png";
    }
}
