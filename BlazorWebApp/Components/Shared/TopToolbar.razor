@inject AppState AppState
@inject SDAPIService SD
@inject DatabaseService DB
@inject IOService IO
@implements IDisposable

<div class="mt-6">
    <MudGrid Justify="Justify.FlexEnd">
        <MudItem xs="6">
            <MudSelect T=string Value=AppState.CurrentFolderName ValueChanged="HandleFolderSelected" Label="Folder" AdornmentIcon="fa-solid fa-folder" AdornmentColor="Color.Secondary" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                <MudSelectItem Value=@("")>All</MudSelectItem>
                @foreach (var folder in AppState.Folders)
                {
                    <MudSelectItem Value="@folder.Name">@folder.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6">
            <MudSelect T=string Value=AppState.CurrentProjectName ValueChanged="HandleProjectSelected" Label="Project" AdornmentIcon="fa-solid fa-layer-group" AdornmentColor="Color.Success" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                @foreach (var project in AppState.Projects)
                {
                    <MudSelectItem Value="@project.Name">@project.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        @if (AppState.Options != null)
        {
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="4">
                        @if (AppState.CurrentSDModel == "Loading...")
                        {
                            <MudStack Style="min-width:15rem;" AlignItems="AlignItems.Center">
                                <MudText Class="mb-n4 mt-2" Typo="Typo.overline">Loading Model...</MudText>
                                <MudProgressLinear Color="Color.Info" Size="Size.Large" Indeterminate Rounded />
                            </MudStack>
                        }
                        else
                        {
                            <MudSelect Value="AppState.CurrentSDModel" T="string" ValueChanged="HandleModelSelected" Label="Model" AdornmentIcon="fa-solid fa-flask" AdornmentColor="Color.Info" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" MaxHeight="600">
                                @if (AppState.SDModels != null)
                                {
                                    @foreach (var model in AppState.SDModels)
                                    {
                                        <MudSelectItem Value="model.Title">@model.Model_name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        }
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect Value="AppState.CurrentVae" T="string" ValueChanged="HandleVaeSelected" Label="VAE" AdornmentIcon="fa-solid fa-wand-sparkles" AdornmentColor="Color.Info" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" MaxHeight="600">
                            <MudSelectItem Value=@("None")>None</MudSelectItem>
                            <MudSelectItem Value=@("Automatic")>Automatic</MudSelectItem>
                            @foreach (var file in IO.GetFilesRecursive(_vaeDir))
                            {
                                <MudSelectItem Value="@file.Name">@file.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSlider Value="_clipSkip" T="int" ValueChanged=@((v) => HandleClipSkipChanged(v)) Min="AppState.Settings.Webui.ClipSkip.Min" Max="AppState.Settings.Webui.ClipSkip.Max" Step="AppState.Settings.Webui.ClipSkip.Step" TickMarks ValueLabel><small>Clip Skip:</small> @AppState.Options.ClipSkip</MudSlider>
                </MudItem>
            </MudGrid>
        </MudItem>
        }
    </MudGrid>
</div>

@code {
    private string _vaeDir;
    private int _clipSkip;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await AppState.GetOptions();
        await AppState.GetSDModels();
        await AppState.GetSamplers();
        await AppState.GetStyles();

        AppState.OnConverging += Refresh;
        AppState.OnOptionsChange += Refresh;
        AppState.OnFolderChange += Refresh;
        AppState.OnProjectChange += Refresh;
        AppState.OnProjectsChange += Refresh;
        AppState.OnStateHasChanged += Refresh;
        AppState.OnSDModelsChange += Refresh;

        _vaeDir = string.IsNullOrWhiteSpace(AppState.CmdFlags.VaeDir) ? Path.Join(AppState.CmdFlags.BaseDir, @"models/VAE") : AppState.CmdFlags.VaeDir;
        _clipSkip = (int)AppState.Options.ClipSkip;

        await AppState.GetFolders();
        await AppState.GetProjects();
        if (AppState.Projects != null && AppState.Projects.Count > 0)
        {
            if (AppState.CurrentProjectId == 0)
            {
                var latestProject = await DB.GetLatestProject();
                await AppState.SetCurrentProject(latestProject.Id);
            }
            else
            {
                await AppState.SetCurrentProject(AppState.CurrentProjectId);
            }
        }
        else
        {
            AppState.CurrentProjectName = "Create New Project...";
        }
        AppState.CurrentSDModel = AppState.Options.SDModelCheckpoint;
        AppState.CurrentVae = AppState.Options.SDVae;
    }

    private async Task HandleModelSelected(string selected) => await AppState.SetSDModel(selected);

    private async Task RefreshModels()
    {
        var currentModel = AppState.CurrentSDModel;
        AppState.CurrentSDModel = "Loading...";
        Refresh();
        _ = await SD.PostRefreshModels();
        await AppState.GetSDModels();
        AppState.CurrentSDModel = currentModel;
        Refresh();
    }

    private async Task HandleProjectSelected(string selected)
    {
        await AppState.SetCurrentProject(DB.GetProject(selected).Result.Id);
        Refresh();
    }

    private async Task HandleFolderSelected(string selected)
    {
        if (string.IsNullOrWhiteSpace(selected)) await AppState.SetCurrentFolder(0);
        else await AppState.SetCurrentFolder(DB.GetFolder(selected).Result.Id);
        Refresh();
    }

    private async Task HandleVaeSelected(string selected) => await AppState.SetVae(selected);

    private async Task HandleClipSkipChanged(int value)
    {
        _clipSkip = value;
        await AppState.PostOptions(new() { ClipSkip = (float)_clipSkip });
    }

    public void Dispose()
    {
        AppState.OnConverging -= Refresh;
        AppState.OnOptionsChange -= Refresh;
        AppState.OnFolderChange -= Refresh;
        AppState.OnProjectChange -= Refresh;
        AppState.OnProjectsChange -= Refresh;
        AppState.OnStateHasChanged -= Refresh;
        AppState.OnSDModelsChange -= Refresh;
    }

    private void Refresh() => InvokeAsync(StateHasChanged);
}
