@inject AppState AppState
@inject DatabaseService DB
@inject IOService IO
@inject ISnackbar Snackbar

<div>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6" Class="me-5"><MudIcon Icon="fa-solid fa-image" /> Image Info</MudText>
            <MudText Typo="Typo.caption" Style="opacity:0.3;">Id: @Image.Id</MudText>
        </TitleContent>
        <DialogContent>
            @if (Image.ModeId != 3)
            {
                <MudTabs Centered=true Rounded=true PanelClass="pa-3">
                    <MudTabPanel Text="Parameters">
                        <MudStack AlignItems="AlignItems.Center" Row=true>
                            <MudTextField T="string" Label="Prompt" Style="color: var(--mud-palette-success); font-size:0.8rem;" Text="@Image.Prompt" Lines="5" ReadOnly=true />
                            <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.Prompt)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" Vertical />
                        </MudStack>
                        <div class="spacer" />
                        <MudStack AlignItems="AlignItems.Center" Row=true>
                            <MudTextField T="string" Label="Negative Prompt" Style="color: var(--mud-palette-error); font-size: 0.8rem;" Text="@Image.NegativePrompt" Lines="5" ReadOnly=true />
                            <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.NegativePrompt)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" Vertical />
                        </MudStack>
                        <div class="spacer" />
                        <MudStack AlignItems="AlignItems.Center" Row=true>
                            <MudField Label="Sampler" Class="copy-btns">
                                @GetSampler()
                                <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.SamplerIndex)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                            </MudField>
                            <MudField Label="Steps" Class="copy-btns">
                                @Image.Steps.ToString()
                                <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.Steps)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                            </MudField>
                            <MudField Label="CFG Scale" Class="copy-btns">
                                @Image.CfgScale.ToString()
                                <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.CfgScale)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                            </MudField>
                            <MudField Label="Denoising Strength" Class="copy-btns">
                                @Image.DenoisingStrength.ToString()
                                <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.DenoisingStrength)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                            </MudField>
                        </MudStack>
                        <div class="spacer" />
                        <MudStack AlignItems="AlignItems.Center" Row=true>
                            <MudField Label="Seed" Class="copy-btns">
                                @Image.Seed.ToString()
                                <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.Seed)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                            </MudField>
                            <MudField Label="Width" Class="copy-btns">
                                @Image.Width.ToString() px
                                <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.Width)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                            </MudField>
                            <MudField Label="Height" Class="copy-btns">
                                @Image.Height.ToString() px
                                <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.Height)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                            </MudField>
                        </MudStack>
                        <div class="spacer" />
                        <MudStack AlignItems="AlignItems.Center" Row=true>
                            <MudTextField Label="Mode" Text="@GetMode()" T="string" ReadOnly=true />
                            <MudTextField Label="Path" Text="@Image.Path" T="string" ReadOnly=true />
                            <MudTextField Label="Created Date" Text="@Image.DateCreated.ToString()" T="string" ReadOnly=true />
                        </MudStack>
                    </MudTabPanel>
                    <MudTabPanel Text="Info Table">
                        <MudTable Items=_infoParams Style="max-height: 40vh; overflow: scroll;" Hover=true>
                            <HeaderContent>
                                <MudTh>Parameter</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Parameter">@context.Key</MudTd>
                                <MudTd DataLabel="Value">@context.Value</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>
                </MudTabs>
            }
            else
            {
                <MudTextField Label="Details" Text="@GetInfo()" Lines=3 T="string" ReadOnly=true />
                <div class="spacer" />
                <MudStack AlignItems="AlignItems.Center" Row=true>
                    <MudField Label="Width" Class="copy-btns">
                        @Image.Width.ToString() px
                        <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.Width)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                    </MudField>
                    <MudField Label="Height" Class="copy-btns">
                        @Image.Height.ToString() px
                        <ImageInfoCopyParameterButtons Property="@nameof(SharedParameters.Height)" OnTxt2ImgClicked="(e) => CopyParameter(e, isImg2Img: false)" OnImg2ImgClicked="(e) => CopyParameter(e, isImg2Img: true)" />
                    </MudField>
                </MudStack>
                <div class="spacer" />
                <MudStack AlignItems="AlignItems.Center" Row=true>
                    <MudTextField Label="Mode" Text="@GetMode()" T="string" ReadOnly=true />
                    <MudTextField Label="Path" Text="@Image.Path" T="string" ReadOnly=true />
                    <MudTextField Label="Created Date" Text="@Image.DateCreated.ToString()" T="string" ReadOnly=true />
                </MudStack>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => MudDialog.Cancel()">Close</MudButton>
            <MudButtonGroup Class="m-2" Color="Color.Warning" Variant="Variant.Text">
                <MudButton Class="px-4" OnClick="() => LoadParameters(ModeType.Txt2Img)" StartIcon="fa-solid fa-pen-to-square" IconColor="Color.Warning">Load Txt2Img</MudButton>
                <MudButton Class="px-4" OnClick="() => LoadParameters(ModeType.Img2Img)" StartIcon="fa-solid fa-square-pen" IconColor="Color.Warning">Load Img2Img</MudButton>
            </MudButtonGroup>
        </DialogActions>
    </MudDialog>
</div>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Image Image { get; set; }

    private Dictionary<string, string>? _infoParams;

    protected async override Task OnInitializedAsync()
    {
        if (Image.Info == null) await WriteImageInfo();
        _infoParams = Parser.ParseInfoParameters(Image.Info);
        if (!string.IsNullOrWhiteSpace(_infoParams["Seed"]) && Image.Seed != long.Parse(_infoParams["Seed"]))
        {
            Image.Seed = long.Parse(_infoParams["Seed"]);
            await DB.UpdateImage(Image);
        }
    }

    private async Task WriteImageInfo()
    {
        var mode = await DB.GetMode(Image.ModeId);
        var lines = Parser.ParseInfoStrings(IO.LoadText(Image.InfoPath), mode);
        if (!string.IsNullOrWhiteSpace(lines["prompt"]) && !Image.Prompt.Equals(lines["prompt"], StringComparison.InvariantCultureIgnoreCase)) Image.Prompt = lines["prompt"];
        if (!string.IsNullOrWhiteSpace(lines["negative"]) && !Image.NegativePrompt.Equals(lines["negative"], StringComparison.InvariantCultureIgnoreCase)) Image.NegativePrompt = lines["negative"];
        Image.Info = lines["param"];
        await DB.UpdateImage(Image);
    }

    private async Task LoadParameters(ModeType mode)
    {
        await AppState.LoadImageInfoParameters(Image, mode);
        Snackbar.Add($"All parameters copied to {(mode == ModeType.Img2Img ? "Img2Img" : "Txt2Img")}.");
        MudDialog.Cancel();
    }

    private void CopyParameter(string parameter, bool isImg2Img)
    {
        SharedParameters param = isImg2Img ? AppState.ParametersImg2Img : AppState.ParametersTxt2Img;
        switch (parameter)
        {
            case nameof(SharedParameters.Prompt):
                param.Prompt = Image.Prompt;
                break;
            case nameof(SharedParameters.NegativePrompt):
                param.NegativePrompt = Image.NegativePrompt;
                break;
            case nameof(SharedParameters.SamplerIndex):
                param.SamplerIndex = GetSampler();
                break;
            case nameof(SharedParameters.Seed):
                param.Seed = Image.Seed;
                break;
            case nameof(SharedParameters.Steps):
                param.Steps = Image.Steps;
                break;
            case nameof(SharedParameters.CfgScale):
                param.CfgScale = Image.CfgScale;
                break;
            case nameof(SharedParameters.Width):
                param.Width = Image.Width;
                break;
            case nameof(SharedParameters.Height):
                param.Height = Image.Height;
                break;
            case nameof(SharedParameters.DenoisingStrength):
                param.DenoisingStrength = Image.DenoisingStrength;
                break;
        }
        Snackbar.Add($"{parameter} copied to {(isImg2Img ? "Img2Img" : "Txt2Img")}.");
    }

    private string GetSampler() => DB.GetSampler(Image.SamplerId).Result;

    private string GetMode()
    {
        return Image.ModeId switch
        {
            1 => "Txt2Img",
            2 => "Img2Img",
            3 => "Upscale",
            _ => "Unknown"
        };
    }

    private string GetInfo() => IO.LoadText(Image.InfoPath);
}
