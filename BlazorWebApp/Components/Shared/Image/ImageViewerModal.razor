@inject ImageService ImageService
@inject DatabaseService DB

<div>
    <MudDialog Style="max-width: 95vw; max-height: 90vh;">
        <TitleContent>
            <MudButtonGroup>
                @if (Images.Count > 1)
                {
                    <MudButton OnClick="@(() => Carousel.Previous())"><MudIcon Icon="fa-solid fa-chevron-left" /></MudButton>
                    <MudButton OnClick="@(() => Carousel.Next())"><MudIcon Icon="fa-solid fa-chevron-right" /></MudButton>
                }
            </MudButtonGroup>
        </TitleContent>
        <DialogContent>
            <MudCarousel @ref=Carousel Class="mud-width-full" Style=@($"width: {_width}px; height: {_height + 20}px;") ShowArrows="false" ShowBullets=false TData="Image" AutoCycle=false>
                @foreach (var image in Images)
                {
                    <MudCarouselItem Style=@($"width: 100%; height: 100%; max-width: 85vw; max-height: 80vh;") Transition="Transition.Fade">
                        <MudImage Src="@("data:image/png;base64," + LoadCardImage(image.Path))" Style="width: 100%; height: 100%;" ObjectFit="ObjectFit.Contain" Elevation="0" Fluid />
                        <MudStack Class="overlay-icons">
                            <MudCheckBox T=bool CheckedChanged="HandleFavoriteChanged" Checked="image.Favorite" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Error" />
                            @if (Images.Count > 1)
                            {
                                <div class="image-number">@(Carousel.SelectedIndex + 1)</div>
                            }
                        </MudStack>
                    </MudCarouselItem>
                }
            </MudCarousel>
        </DialogContent>
    </MudDialog>
</div>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public List<Image> Images { get; set; }

    public MudCarousel<Image>? Carousel { get; set; } = new();

    private int _width;
    private int _height;

    protected override void OnInitialized()
    {
        ResizeCarousel();
    }

    private async Task HandleFavoriteChanged(bool isfavorite)
    {
        Images[Carousel.SelectedIndex].Favorite = isfavorite;
        await DB.UpdateImage(Images[Carousel.SelectedIndex]);
        await InvokeAsync(StateHasChanged);
    }

    private void ResizeCarousel()
    {
        if (Images == null || Images.Count == 0) return;
        if (Images.Count == 1)
        {
            _width = Images[0].Width;
            _height = Images[0].Height;
        }
        else
        {
            _width = Images.Max(i => i.Width);
            _height = Images.Max(i => i.Height);
        }
    }

    private string LoadCardImage(string path) => ImageService.LoadImage(path);
}
