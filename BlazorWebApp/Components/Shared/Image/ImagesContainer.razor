@inject DatabaseService DB
@inject ImageService ImageService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<div>
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudStack AlignItems="AlignItems.Center">
            <MudPagination BoundaryCount="2" MiddleCount="5" Count="Images.PageCount" Selected=_currentPage SelectedChanged="page => HandlePageChanged(page)" />
            @if (Images.Images is not null && Images.Images.Count > 0)
            {
                <MudGrid Spacing="1" Justify="Justify.Center">
                    @foreach (var image in Images.Images)
                    {
                        <ImageCard Image="@image" ImageData="@LoadCardImage(image.Path)" Target="fullscreen-modal" OnSelectImage="ShowImageViewerModal" OnDeleteImage="ShowDeleteImageModal" OnCoverChanged="async () => await OnCoverChanged.InvokeAsync()" />
                    }
                </MudGrid>
            }
            else
            {
                <MudProgressCircular Class="mt-10" Color="Color.Primary" Indeterminate/>
            }
            <MudPagination BoundaryCount="2" MiddleCount="5" Count="Images.PageCount" Selected=_currentPage SelectedChanged="page => HandlePageChanged(page)" />
        </MudStack>
    </MudContainer>
</div>

@code {
    [Parameter]
    public ImagesDto Images { get; set; }
    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }
    [Parameter]
    public EventCallback OnDeleteImage { get; set; }
    [Parameter]
    public EventCallback OnCoverChanged { get; set; }

    private int _currentPage = 1;

    private void HandlePageChanged(int page)
    {
        _currentPage = page;
        OnPageSelected.InvokeAsync(page);
    }

    private string LoadCardImage(string path) => ImageService.LoadImage(path);

    private List<string> LoadImageStrings()
    {
        List<string> imageStrings = new();
        Images.Images.ForEach(i => imageStrings.Add(LoadCardImage(i.Path)));
        return imageStrings;
    }

    private async Task ShowImageViewerModal(Image image)
    {
        var data = await ImageService.LoadImageAsync(image.Path);
        var param = new DialogParameters();
        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, CloseButton = true };
        param.Add("ImagesData", new List<string>() { data });
        DialogService.Show<ImageViewerModal>("", param, options);
        //Refresh();
    }

    private async Task ShowDeleteImageModal(Image image)
    {
        var parameters = new DialogParameters();
        parameters.Add("OkButtonText", "Yes");
        parameters.Add("CancelButtonText", "No");
        parameters.Add("OkButtonColor", Color.Error);
        parameters.Add("Content", new MarkupString(@"<span class='lead'>Are you sure you want to <strong class='text-danger'>delete</strong> this image?<br /></span><small>This action is irreversible!</small>"));
        var dialog = await DialogService.ShowAsync<ConfirmationDialogModal>("Delete Image", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small });
        var result = await dialog.Result;
        if (!result.Cancelled) await DeleteImage(image);
    }

    private async Task DeleteImage(Image image)
    {
        var response = await DB.DeleteImage(image);
        await OnDeleteImage.InvokeAsync();
        Snackbar.Add("Image deleted successfuly.", Severity.Success);
    }

    private async Task Refresh() => await InvokeAsync(StateHasChanged);
}
