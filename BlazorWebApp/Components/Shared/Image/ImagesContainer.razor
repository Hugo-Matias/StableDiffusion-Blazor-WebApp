@inject ManagerService M
@inject DatabaseService DB
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<div style="@Style">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudStack AlignItems="AlignItems.Center">
            @if (Images.Images is not null && Images.Images.Count > 0)
            {
                @if (Images.PageCount > 1)
                {
                    <MudPagination BoundaryCount="2" MiddleCount="5" Count="Images.PageCount" Selected=_currentPage SelectedChanged="page => HandlePageChanged(page)" />
                }
                <MudStack Row=true>
                    <MudButton OnClick="ShowAllImagesViewerDialog" StartIcon="fa-solid fa-window-maximize" Color="Color.Secondary">Fullscreen</MudButton>
                    @if (CanSelect && M.SelectedImageIds.Count > 0)
                    {
                        <MudButtonGroup OverrideStyles=false>
                            <MudButton OnClick="ShowSwitchProjectDialog" StartIcon="fa-solid fa-layer-group" Color="Color.Tertiary">Set Project</MudButton>
                            <MudButton OnClick="ShowDeleteImagesDialog" StartIcon="fa-solid fa-trash-can" Color="Color.Error">Delete</MudButton>
                        </MudButtonGroup>
                        <MudButtonGroup OverrideStyles=false>
                            <MudButton OnClick="M.ClearSelectedImages" StartIcon="fa-regular fa-square" Color="Color.Warning">Clear</MudButton>
                            <MudButton OnClick="SelectAll" StartIcon="fa-solid fa-check-double" Color="Color.Info">Select All</MudButton>
                        </MudButtonGroup>
                    }
                </MudStack>
                <MudGrid Class="mt-n7" Spacing="1" Justify="Justify.Center">
                    @if (Images.Images.Count > 0)
                    {
                        @foreach (var image in Images.Images)
                        {
                            <ImageCard Image="@image" Target="fullscreen-modal" OnSelectImage="ShowImageViewerDialog" OnDeleteImage="ShowDeleteImageDialog" OnCoverChanged="async () => await OnCoverChanged.InvokeAsync()" ShowSelectionCheckbox=CanSelect />
                        }
                    }
                </MudGrid>
                if (Images.PageCount > 1)
                {
                    <MudPagination BoundaryCount="2" MiddleCount="5" Count="Images.PageCount" Selected=_currentPage SelectedChanged="page => HandlePageChanged(page)" />
                }
            }
            else
            {
                <MudProgressCircular Class="mt-10" Color="Color.Primary" Indeterminate />
            }
        </MudStack>
    </MudContainer>
</div>

@code {
    [Parameter] public ImagesDto Images { get; set; }
    [Parameter] public EventCallback<int> OnPageSelected { get; set; }
    [Parameter] public EventCallback OnDeleteImage { get; set; }
    [Parameter] public EventCallback OnCoverChanged { get; set; }
    [Parameter] public string Style { get; set; }
    [Parameter] public bool CanSelect { get; set; }

    private int _currentPage = 1;

    protected override void OnInitialized()
    {
        M.OnSelectedImagesChanged += Refresh;
    }

    public void HandlePageChanged(int page)
    {
        _currentPage = page;
        OnPageSelected.InvokeAsync(page);
    }

    private void ShowImageViewerDialog(Image image)
    {
        var param = new DialogParameters();
        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, CloseButton = true };
        param.Add("Images", new List<Image>() { image });
        DialogService.Show<ImageViewerDialog>("", param, options);
    }

    private void ShowAllImagesViewerDialog()
    {
        var param = new DialogParameters();
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, CloseButton = true };
        param.Add("Images", Images.Images);
        DialogService.Show<ImageViewerDialog>("", param, options);
    }

    private async Task ShowDeleteImageDialog(Image image)
    {
        var parameters = new DialogParameters();
        parameters.Add("OkButtonText", "Yes");
        parameters.Add("CancelButtonText", "No");
        parameters.Add("OkButtonColor", Color.Error);
        parameters.Add("Content", new MarkupString(@"<span class='lead'>Are you sure you want to <strong class='text-danger'>delete</strong> this image?<br /></span><small>This action is irreversible!</small>"));
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Image", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small });
        var result = await dialog.Result;
        if (!result.Canceled) await DeleteImage(image, true);
        Refresh();
    }

    private async Task ShowDeleteImagesDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("OkButtonText", "Yes");
        parameters.Add("CancelButtonText", "No");
        parameters.Add("OkButtonColor", Color.Error);
        parameters.Add("Content", new MarkupString(@"<span class='lead'>Are you sure you want to <strong class='text-danger'>delete</strong> the selected images?<br /></span><small>This action is irreversible!</small>"));
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>($"Delete {M.SelectedImageIds.Count} Images", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var selectedImages = await DB.GetImages(M.SelectedImageIds);
            foreach (var image in selectedImages)
            {
                await DeleteImage(image, false);
            }
            Snackbar.Add("All selected images deleted successfully.", Severity.Success);
            M.ClearSelectedImages();
            Refresh();
        }
    }

    private void SelectAll()
    {
        var ids = Images.Images.Select(i => i.Id).ToList();
        foreach (var id in ids)
        {
            M.AddSelectedImage(id);
        }
    }

    private async Task DeleteImage(Image image, bool showSnack)
    {
        var response = await DB.DeleteImage(image);
        await OnDeleteImage.InvokeAsync();
        if (showSnack) Snackbar.Add("Image deleted successfuly.", Severity.Success);
    }

    private async Task ShowSwitchProjectDialog()
    {
        var param = new DialogParameters();
        var selectedImages = await DB.GetImages(M.SelectedImageIds);
        param.Add("Images", selectedImages);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ImageProjectDialog>("Switch Project", param, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var updatedImages = (List<Image>)result.Data;
            await DB.UpdateImages(updatedImages);
            Snackbar.Add("Images projects were changed.", Severity.Success);
            M.ClearSelectedImages();
            Refresh();
        }
    }

    private async void Refresh() => await InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        M.OnSelectedImagesChanged -= Refresh;
    }
}
