@inject DatabaseService DB
@inject JavascriptService JS
@inject ImageService ImageService

<div class="container">
    <div class="row justify-content-center">
        <div class="row justify-content-center align-items-center">
            <PaginationNav Pagination="Images" OnPageSelected="(p) => OnPageSelected.InvokeAsync(p)" />

            @if (Images.Images is not null && Images.Images.Count > 0)
            {

                <ImageCarouselFullScreen Images="@LoadImageStrings()" />
            }
        </div>
        @if (Images.Images is not null && Images.Images.Count > 0)
        {
            @foreach (var image in Images.Images)
            {
                <ImageCard Image="@image" ImageData="@LoadCardImage(image.Path)" Target="fullscreen-modal" OnSelectImage="ShowFullscreen" OnDeleteImage="ShowDeleteImageModal" OnCoverChanged="async () => await OnCoverChanged.InvokeAsync()" />
            }
        }

        <PaginationNav Pagination="Images" OnPageSelected="(p) => OnPageSelected.InvokeAsync(p)" />
    </div>
</div>

<!-- Fullscreen Viewer Modal -->
<div class="modal fade" id="fullscreen-modal" @onclick="HideFullscreen" tabindex="-1" aria-hidden="true">
    <div id="fullscreen-modal-dialog" class="modal-dialog modal-dialog-centered @(_modalMaxMinIcon == "fa-minimize" ? "expanded" : "")" style="max-width: @(_selectedImage.Width)px; max-height: @(_selectedImage.Height)px;">
        <div class="modal-content">
            <img src="data:image/png;base64,@_imageData" />
        </div>
    </div>
</div>
<div class="row modal-controls @(_isShowingModal?"show":"")">
    <div class="col">
        <button class="btn btn-outline-warning" @onclick="ToggleMaximize"><span class="fa-solid @_modalMaxMinIcon"></span></button>
        <button class="btn btn-outline-danger" @onclick="HideFullscreen"><span class="fa-solid fa-xmark"></span></button>
    </div>
</div>

<!-- Delete Image Confirmation Modal -->
<ConfirmationDialogModal Id="delete-image-modal" Title="Delete Image" OkButton="Yes" CancelButton="No" OnConfirm="DeleteImage">
    <span class="lead">Are you sure you want to <strong class="text-danger">delete</strong> this image?<br /></span>
    @if (_deleteImage.Favorite)
    {
        <span class="text-warning">It's one of your favorites!</span>

        <br />
    }
    <small>This action is irreversible!</small>
</ConfirmationDialogModal>


@code {
    [Parameter]
    public ImagesDto Images { get; set; }
    [Parameter]
    public EventCallback<int> OnPageSelected { get; set; }
    [Parameter]
    public EventCallback OnDeleteImage { get; set; }
    [Parameter]
    public EventCallback OnCoverChanged { get; set; }

    private Image _selectedImage = new();
    private Image _deleteImage = new();
    private bool _isShowingModal;
    private string _modalMaxMinIcon = "fa-maximize";
    private string _imageData = string.Empty;

    private string LoadCardImage(string path) => ImageService.LoadImage(path);

    private List<string> LoadImageStrings()
    {
        List<string> imageStrings = new();
        Images.Images.ForEach(i => imageStrings.Add(LoadCardImage(i.Path)));
        return imageStrings;
    }

    private async Task ShowFullscreen(Image image)
    {
        _selectedImage = image;
        _isShowingModal = true;
        _imageData = await ImageService.LoadImageAsync(_selectedImage.Path);
        Refresh();
    }

    private async Task HideFullscreen()
    {
        await JS.RunScript("HideModal", "#fullscreen-modal");
        _isShowingModal = false;
        Refresh();
        _selectedImage = new();
    }

    private void ToggleMaximize()
    {
        _modalMaxMinIcon = _modalMaxMinIcon == "fa-maximize" ? "fa-minimize" : "fa-maximize";
        Refresh();
    }

    private async Task ShowDeleteImageModal(Image image)
    {
        _deleteImage = image;
        await JS.RunScript("ShowModal", "#delete-image-modal");
    }

    private async Task DeleteImage()
    {
        var response = await DB.DeleteImage(_deleteImage);
        _deleteImage = new();
        await OnDeleteImage.InvokeAsync();
    }

    private async Task Refresh() => await InvokeAsync(StateHasChanged);
}
