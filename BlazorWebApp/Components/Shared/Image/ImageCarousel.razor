@inject DatabaseService DB
@inject IOService IO

<div>
    <MudCarousel @ref=Reference Class="mud-width-full" Style=@($"width: {_width}; height: {_height}; max-width: {MaxWidth}; max-height: {MaxHeight}") ShowArrows="ShowControls" ShowBullets=false TData="Image" AutoCycle=AutoCycle>
        @foreach (var image in Images)
        {
            <MudCarouselItem Style=@($"width: 100%; height: 100%; max-width: {MaxWidth}; max-height: {MaxHeight};") Transition="Transition.Fade">
                <MudImage Src="@(IO.GetImageStaticFile(image.Path))" Style="width: 100%; height: 100%;" ObjectFit="ObjectFit.Contain" Elevation="0" Fluid />
                <MudStack Class="overlay-icons">
                    <MudCheckBox T=bool CheckedChanged="HandleFavoriteChanged" Checked="image.Favorite" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Error" />
                    @*                    @if (Images.Count > 1)
                {
                <div class="image-number">@(Reference.SelectedIndex + 1)</div>
                }
                *@
                </MudStack>
            </MudCarouselItem>
        }
    </MudCarousel>
</div>

@code {
    [Parameter] public List<Image> Images { get; set; }
    [Parameter] public bool ShowControls { get; set; }
    [Parameter] public bool AutoCycle { get; set; }
    [Parameter] public string MaxWidth { get; set; }
    [Parameter] public string MaxHeight { get; set; }
    [Parameter] public bool IsExpanded { get; set; }

    public MudCarousel<Image>? Reference { get; set; } = new();

    private string _width;
    private string _height;

    protected override void OnInitialized()
    {
        ResizeCarousel();
    }

    private async Task HandleFavoriteChanged(bool isfavorite)
    {
        Images[Reference.SelectedIndex].Favorite = isfavorite;
        await DB.UpdateImage(Images[Reference.SelectedIndex]);
        await InvokeAsync(StateHasChanged);
    }

    public void Exand(bool expand)
    {
        IsExpanded = expand;
        ResizeCarousel();
    }

    private void ResizeCarousel()
    {
        if (Images == null || Images.Count == 0) return;
        if (IsExpanded)
        {
            _width = MaxWidth;
            _height = MaxHeight;
            return;
        }

        if (Images.Count == 1)
        {
            _width = Images[0].Width.ToString() + "px";
            _height = (Images[0].Height + 20).ToString() + "px";
        }
        else
        {
            _width = Images.Max(i => i.Width).ToString() + "px";
            _height = (Images.Max(i => i.Height) + 20).ToString() + "px";
        }
    }
}
