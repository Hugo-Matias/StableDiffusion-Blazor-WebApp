@using System.Diagnostics;
@inject ManagerService M
@inject DatabaseService DB
@inject IOService IO
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@implements IDisposable

<div>
    @if (Image.ModeId != 3)
    {
        <MudBadge Class="mb-n7 ms-7" Style="opacity: 0.5;" Content=@(DB.GetSampler(Image.SamplerId).Result.ToString()) Color=@(SetSamplerBadgeColor().Result) Overlap />
    }
    else
    {
        @*Spacing element to keep top margin consistency*@
        <MudBadge Style="opacity: 0;" Content="null" Overlap />
    }
    <MudCheckBox Class=@($"select-checkbox {(_isSelected ? "selected" : "")}") Checked=_isSelected T="bool" CheckedChanged="HandleSelected" Color="Color.Success" UnCheckedColor="Color.Default" />
    <MudCard Style="min-width: 12rem;" Elevation="4" Class="m-2">
        <MudCardMedia Image=@IO.GetImageStaticFile(Image.Path) />
        <MudCardContent Class="pb-n4">
            @if (Image.ModeId != 3)
            {
                <MudText Typo="Typo.caption"><MudIcon Icon="fa-solid fa-seedling info-icon" />@Image.Seed</MudText>
                <MudSpacer />
                <MudText Typo="Typo.caption">
                    <MudIcon Icon="fa-solid fa-stairs info-icon" />@Image.Steps
                    <span class="separator ms-2">|</span>
                    <MudIcon Icon="fa-solid fa-scale-unbalanced info-icon" />@Image.CfgScale
                    @if (Image.DenoisingStrength != null)
                    {
                        <span class="separator ms-2">|</span>
                        <MudIcon Icon="fa-solid fa-braille info-icon" />

                        @Image.DenoisingStrength
                    }
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.caption">Upscaled</MudText>
                <MudSpacer />
                <MudText Typo="Typo.caption">
                    <MudIcon Icon="fa-solid fa-arrows-left-right info-icon" />@($"{Image.Width} px")
                    <span class="separator ms-2">|</span>
                    <MudIcon Icon="fa-solid fa-arrows-up-down info-icon" />@($"{Image.Height} px")
                </MudText>
            }
        </MudCardContent>
        <MudCardActions>
            <MudCheckBox T="bool" CheckedChanged=@(e => ToggleFavorite(e)) Checked="Image.Favorite" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Error" />
            <MudIconButton OnClick=@(() => OnSelectImage.InvokeAsync(Image)) Icon="fa-solid fa-expand" Class="icon" ButtonType=ButtonType.Button Color=Color.Warning />
            <MudIconButton OnClick=@(() => OnDeleteImage.InvokeAsync(Image)) Icon="fa-solid fa-trash-can" Class="icon" ButtonType=ButtonType.Button Color=Color.Default />
            <MudSpacer />
            <MudTooltip Color="Color.Dark" Style="max-width:50vw">
                <ChildContent>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight">
                        <MudMenuItem OnClick=ShowSwitchProjectDialog Icon="fa-solid fa-layer-group" IconColor="Color.Tertiary">Set Project</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick=@(() => SendTo(img2img: true)) Icon="fa-solid fa-file-image" IconColor="Color.Warning">Send to Img2Img</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick=@(() => SendTo(img2img: false)) Icon="fa-solid fa-panorama" IconColor="Color.Warning">Send to Upsc.</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick=OpenFileInExplorer Icon="fa-solid fa-folder-open" IconColor="Color.Primary">Open Explorer</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick=SetProjectCover Icon="fa-solid fa-image-portrait" IconColor="Color.Secondary">Project Cover</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick=ShowImageInfoDialog Icon="fa-solid fa-circle-info" IconColor="Color.Info">Info</MudMenuItem>
                    </MudMenu>
                </ChildContent>
                <TooltipContent>
                    @if (Image.ModeId != 3)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Success">@Image.Prompt</MudText>
                        <br />
                        <MudText Typo="Typo.caption" Color="Color.Error">@Image.NegativePrompt</MudText>
                    }
                </TooltipContent>
            </MudTooltip>
        </MudCardActions>
    </MudCard>
</div>

@code {
    [Parameter] public Image Image { get; set; }
    [Parameter] public string Target { get; set; }
    [Parameter] public EventCallback<Image> OnSelectImage { get; set; }
    [Parameter] public EventCallback<Image> OnDeleteImage { get; set; }
    [Parameter] public EventCallback OnCoverChanged { get; set; }

    private bool _isSelected;

    protected override void OnInitialized()
    {
        _isSelected = M.SelectedImageIds.Contains(Image.ProjectId);
        M.OnSelectedImagesChanged += Refresh;
        M.OnRefreshImagesContainer += Refresh;
    }

    private async Task ToggleFavorite(bool isChecked)
    {
        Image.Favorite = !Image.Favorite;
        await DB.UpdateImage(Image);
        await InvokeAsync(StateHasChanged);
    }

    private void OpenFileInExplorer() => Process.Start("explorer.exe", $"/select, {Image.Path}");

    private async Task SetProjectCover()
    {
        await DB.SetProjectCover(M.State.Gallery.ProjectId, Image.Path);
        await OnCoverChanged.InvokeAsync();
        Snackbar.Add($"Cover image selected for project {M.State.Gallery.ProjectName}.", Severity.Success);
    }

    private void SendTo(bool img2img)
    {
        var data = $"data:image/png;base64,{IO.GetBase64FromFile(Image.Path)}";
        if (img2img) M.CanvasImageData = data;
        else M.UpscaleImageData = data;
    }

    private async Task<Color> SetSamplerBadgeColor()
    {
        switch (await DB.GetSampler(Image.SamplerId))
        {
            case "Euler":
            case "Euler a":
                return Color.Success;
            case "Heun":
                return Color.Secondary;
            case "DDIM":
                return Color.Dark;
            case "DPM2":
            case "DPM2 a":
                return Color.Warning;
            case "LMS":
            case "PLMS":
                return Color.Error;
            case "DPM++ 2S a":
            case "DPM++ 2M":
            case "DPM fast":
            case "DPM adaptive":
                return Color.Tertiary;
            default:
                return Color.Info;
        }
    }

    private void ShowImageInfoDialog()
    {
        var param = new DialogParameters();
        param.Add("Image", Image);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<ImageInfoDialog>("Image Info", param, options);
    }

    private async Task ShowSwitchProjectDialog()
    {
        var param = new DialogParameters();
        param.Add("Images", new List<Image>() { Image });
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ImageProjectDialog>("Switch Project", param, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var updatedImages = (List<Image>)result.Data;
            foreach (var image in updatedImages)
            {
                await DB.UpdateImage(image);
            }
            Snackbar.Add("Image project was changed.", Severity.Success);
        }
    }

    private void HandleSelected(bool isChecked)
    {
        if (isChecked) M.AddSelectedImage(Image.Id);
        else M.RemoveSelectedImage(Image.Id);
        _isSelected = isChecked;
    }

    private async void Refresh()
    {
        _isSelected = M.SelectedImageIds.Contains(Image.Id);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        M.OnSelectedImagesChanged -= Refresh;
        M.OnRefreshImagesContainer -= Refresh;
    }
}
