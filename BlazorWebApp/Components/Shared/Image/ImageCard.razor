@using System.Diagnostics;
@inject AppState AppState
@inject DatabaseService DB
@inject IOService IO
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div>
    @if (Image.ModeId != 3)
    {
        <MudBadge Class="mb-n7 ms-7" Style="opacity: 0.5;" Content="@(DB.GetSampler(Image.SamplerId).Result.ToString())" Color="@(SetSamplerBadgeColor().Result)" Overlap />
    }
    else
    {
        @*Spacing element to keep top margin consistency*@
        <MudBadge Style="opacity: 0;" Content="null" Overlap />
    }
    <MudCard Style="min-width: 12rem;" Elevation="4" Class="m-2">
        <MudCardMedia Image="@("data:image/png;base64," + ImageData)" />
        <MudCardContent Class="pb-n4">
            @if (Image.ModeId != 3)
            {
                <MudText Typo="Typo.caption"><MudIcon Icon="fa-solid fa-seedling info-icon" />@Image.Seed</MudText>
                <MudSpacer />
                <MudText Typo="Typo.caption">
                    <MudIcon Icon="fa-solid fa-stairs info-icon" />@Image.Steps
                    <span class="separator ms-2">|</span>
                    <MudIcon Icon="fa-solid fa-scale-unbalanced info-icon" />@Image.CfgScale
                    @if (Image.DenoisingStrength != null)
                    {
                        <span class="separator ms-2">|</span>
                        <MudIcon Icon="fa-solid fa-braille info-icon" />

                        @Image.DenoisingStrength
                    }
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.caption">Upscaled</MudText>
                <MudSpacer />
                <MudText Typo="Typo.caption">
                    <MudIcon Icon="fa-solid fa-arrows-left-right info-icon" />@($"{Image.Width} px")
                    <span class="separator ms-2">|</span>
                    <MudIcon Icon="fa-solid fa-arrows-up-down info-icon" />@($"{Image.Height} px")
                </MudText>
            }
        </MudCardContent>
        <MudCardActions>
            <MudCheckBox T="bool" CheckedChanged="e => ToggleFavorite(e)" Checked="Image.Favorite" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Error" />
            <MudIconButton OnClick="@(() => OnSelectImage.InvokeAsync(Image))" Icon="fa-solid fa-expand" Class="icon" ButtonType=ButtonType.Button Color=Color.Warning />
            <MudIconButton OnClick="@(() => OnDeleteImage.InvokeAsync(Image))" Icon="fa-solid fa-trash-can" Class="icon" ButtonType=ButtonType.Button Color=Color.Default />
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight">
                <MudMenuItem OnClick="OpenFileInExplorer" Icon="fa-solid fa-folder-open" IconColor="Color.Primary">Open Explorer</MudMenuItem> 
                <MudDivider />
                <MudMenuItem OnClick="SetProjectCover" Icon="fa-solid fa-image-portrait" IconColor="Color.Secondary">Project Cover</MudMenuItem> 
                <MudDivider />
                <MudMenuItem OnClick="ShowImageInfoModal" Icon="fa-solid fa-circle-info" IconColor="Color.Info">Info</MudMenuItem> 
            </MudMenu>
        </MudCardActions>
    </MudCard>
</div>

@*<div class="card m-1">
            @if (Image.ModeId != 3)
            {
                <h2 class="lead">@Image.Prompt</h2>
                <h3 class="lead">@Image.NegativePrompt</h3>
            }
            else
            {
                <h2 class="lead">@(IO.LoadText(Image.InfoPath))</h2>
            }
        </div>
*@

@code {
    [Parameter]
    public Image Image { get; set; }
    [Parameter]
    public string ImageData { get; set; }
    [Parameter]
    public string Target { get; set; }
    [Parameter]
    public EventCallback<Image> OnSelectImage { get; set; }
    [Parameter]
    public EventCallback<Image> OnDeleteImage { get; set; }
    [Parameter]
    public EventCallback OnCoverChanged { get; set; }

    private async Task ToggleFavorite(bool isChecked)
    {
        Image.Favorite = !Image.Favorite;
        await DB.UpdateImage(Image);
        await InvokeAsync(StateHasChanged);
    }

    private void OpenFileInExplorer() => Process.Start("explorer.exe", $"/select, {Image.Path}");

    private async Task SetProjectCover()
    {
        await DB.SetProjectCover(AppState.CurrentProjectId, Image.Path);
        await OnCoverChanged.InvokeAsync();
        Snackbar.Add($"Cover image selected for project {AppState.CurrentProjectName}.", Severity.Success);
    }

    private async Task<Color> SetSamplerBadgeColor()
    {
        switch (await DB.GetSampler(Image.SamplerId))
        {
            case "Euler":
            case "Euler a":
                return Color.Success;
            case "Heun":
                return Color.Secondary;
            case "DDIM":
                return Color.Dark;
            case "DPM2":
            case "DPM2 a":
                return Color.Warning;
            case "LMS":
            case "PLMS":
                return Color.Error;
            case "DPM++ 2S a":
            case "DPM++ 2M":
            case "DPM fast":
            case "DPM adaptive":
                return Color.Tertiary;
            default:
                return Color.Info;
        }
    }

    private void ShowImageInfoModal()
    {
        var param = new DialogParameters();
        param.Add("Image", Image);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth=true };
        DialogService.Show<ImageInfoModal>("Image Info", param, options);
    }
}
