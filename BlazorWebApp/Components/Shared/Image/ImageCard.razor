@using System.Diagnostics;
@inject AppState AppState
@inject DatabaseService DB
@inject IOService IO
@inject ToasterService Toaster

<div>
    @if (Image.ModeId != 3)
    {
        <MudBadge Class="mb-n2 ms-3" Content="@(DB.GetSampler(Image.SamplerId).Result.ToString())" Color="@(SetSamplerBadgeColor().Result)" Overlap />
    }
    <MudCard Style="min-width: 12rem;" Elevation="4" Class="m-2">
        <MudCardMedia Image="@("data:image/png;base64," + ImageData)" />
        <MudCardContent Class="pb-n4" >
            @if (Image.ModeId != 3)
            {
                <MudText Typo="Typo.caption"><MudIcon Icon="fa-solid fa-seedling info-icon" />@Image.Seed</MudText>
                <MudSpacer />
                <MudText Typo="Typo.caption">
                    <MudIcon Icon="fa-solid fa-stairs info-icon" />@Image.Steps
                    <span class="separator ms-2">|</span>
                    <MudIcon Icon="fa-solid fa-scale-unbalanced info-icon" />@Image.CfgScale
                    @if (Image.DenoisingStrength != null)
                    {
                        <span class="separator ms-2">|</span>
                        <MudIcon Icon="fa-solid fa-braille info-icon" />

                        @Image.DenoisingStrength
                    }
                </MudText>
            }
            else
            {
                <strong>Upscaled</strong>
                <br />
                <span class="fa-solid fa-arrows-left-right" /> @($"{Image.Width} px")
                <span class="ms-2">|</span> <span class="fa-solid fa-arrows-up-down" /> @($"{Image.Height} px")
            }
        </MudCardContent>
        <MudCardActions>
            <MudIconButton OnClick="@(() => OnSelectImage.InvokeAsync(Image))" Icon="fa-solid fa-expand" Class="icon" ButtonType=ButtonType.Button Color=Color.Success />
            <MudIconButton OnClick="@(() => OnDeleteImage.InvokeAsync(Image))" Icon="fa-solid fa-trash-can" Class="icon" ButtonType=ButtonType.Button Color=Color.Default />
            <MudSpacer />
            <MudCheckBox CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder" Checked="Image.Favorite" Color="Color.Error" />
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                @*//TODO*@
            </MudMenu>
        </MudCardActions>
    </MudCard>
</div>

@*<div class="card m-1">
    <div class="card-body p-1 pt-2">
        @if (Image.ModeId != 3)
        {
            <span class="sampler-badge rounded-pill" style="@(SetSamplerBadgeColor().Result) border: 2px solid var(--app-dark-1);">@(DB.GetSampler(Image.SamplerId).Result)</span>
        }
        <span class="favorite-icon @(Image.Favorite ? "active" : "")"><span class="fa-solid fa-star"></span></span>
        <img src="data:image/png;base64,@ImageData" class="card-img mb-3" alt="image">
        <h1>
            @if (Image.ModeId != 3)
            {
                <span class="fa-solid fa-seedling" />
                <strong>@Image.Seed</strong>
                <br />
                <span class="fa-solid fa-stairs" /> @Image.Steps
                <span class="ms-2">|</span> <span class="fa-solid fa-scale-unbalanced" /> @Image.CfgScale
                @if (Image.DenoisingStrength != null)
                {
                    <span class="ms-2">|</span>
                    <span class="fa-solid fa-braille" /> @Image.DenoisingStrength
                }
            }
            else
            {
                <strong>Upscaled</strong>
                <br />
                <span class="fa-solid fa-arrows-left-right" /> @($"{Image.Width} px")
                <span class="ms-2">|</span> <span class="fa-solid fa-arrows-up-down" /> @($"{Image.Height} px")
            }
        </h1>
        <div class="text-card">
            @if (Image.ModeId != 3)
            {
                <h2 class="lead">@Image.Prompt</h2>
                <h3 class="lead">@Image.NegativePrompt</h3>
            }
            else
            {
                <h2 class="lead">@(IO.LoadText(Image.InfoPath))</h2>
            }
        </div>
        <div class="row btn-container">
            <div class="col-6">
                <button @onclick="LoadParameters" class="btn btn-load"><span class="btn-icon fa-solid fa-pen-to-square"></span>Load</button>
            </div>
            <div class="col-6">
                <button class="btn btn-favorite" @onclick="ToggleFavorite"><span class="btn-icon fa-solid fa-star"></span>Favorite</button>
            </div>
            <div class="col-6">
                <button data-bs-toggle="modal" data-bs-target="#@Target" class="btn btn-show" @onclick="@(() => OnSelectImage.InvokeAsync(Image))"><span class="btn-icon fa-solid fa-expand"></span>Show</button>
            </div>
            <div class="col-6">
                <button class="btn btn-cover" @onclick="SetProjectCover"><span class="btn-icon fa-solid fa-image-portrait"></span>Cover</button>
            </div>
            <div class="col-6">
                <button class="btn btn-open" @onclick="OpenFileInExplorer"><span class="btn-icon fa-regular fa-folder-open"></span>File</button>
            </div>
            <div class="col-6">
                <button class="btn btn-delete" @onclick="@(() => OnDeleteImage.InvokeAsync(Image))"><span class="btn-icon fa-solid fa-trash-can"></span>Delete</button>
            </div>
        </div>
    </div>
</div>
*@
@code {
    [Parameter]
    public Image Image { get; set; }
    [Parameter]
    public string ImageData { get; set; }
    [Parameter]
    public string Target { get; set; }
    [Parameter]
    public EventCallback<Image> OnSelectImage { get; set; }
    [Parameter]
    public EventCallback<Image> OnDeleteImage { get; set; }
    [Parameter]
    public EventCallback OnCoverChanged { get; set; }

    private async Task LoadParameters()
    {
        await AppState.LoadImageInfoParameters(Image);
    }

    private async Task ToggleFavorite()
    {
        Image.Favorite = !Image.Favorite;
        await DB.UpdateImage(Image);
        await InvokeAsync(StateHasChanged);
    }

    private void OpenFileInExplorer() => Process.Start("explorer.exe", $"/select, {Image.Path}");

    private async Task SetProjectCover()
    {
        await DB.SetProjectCover(AppState.CurrentProjectId, Image.Path);
        await OnCoverChanged.InvokeAsync();
        Toaster.AddToast(Toast.NewToast("Cover Image", $"Cover image selected for project {AppState.CurrentProjectName}.", MessageColor.Success, 5));
    }

    private async Task<Color> SetSamplerBadgeColor()
    {
        switch (await DB.GetSampler(Image.SamplerId))
        {
            case "Euler":
            case "Euler a":
                return Color.Success;
            case "Heun":
                return Color.Secondary;
            case "DDIM":
                return Color.Dark;
            case "DPM2":
            case "DPM2 a":
                return Color.Warning;
            case "LMS":
            case "PLMS":
                return Color.Error;
            case "DPM++ 2S a":
            case "DPM++ 2M":
            case "DPM fast":
            case "DPM adaptive":
                return Color.Tertiary;
            default:
                return Color.Info;
        }
    }
}
