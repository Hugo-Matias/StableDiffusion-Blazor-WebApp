@inject ManagerService M
@implements IDisposable

<EditForm Model="Parameters" OnSubmit="@Generate" class="d-flex flex-column justify-content-center">
    <MudStack Class="d-flex flex-column justify-content-center align-items-center w-100 h-100">
        @if (!M.IsConverging)
        {
            <MudButton Variant="Variant.Filled" Color=Color.Success ButtonType="ButtonType.Submit" StartIcon="fa-solid fa-circle-half-stroke" Disabled=ButtonDisabled FullWidth>Generate</MudButton>
        }
        else
        {
            <MudButtonGroup Variant=Variant.Filled Color=Color.Primary OverrideStyles=false Class="w-100">
                <MudButton OnClick=@(() => OnSkip.InvokeAsync()) Variant=Variant.Filled Color=Color.Warning StartIcon="fa-solid fa-forward" ButtonType="ButtonType.Button" Class="w-100" FullWidth>Skip</MudButton>
            <MudButton OnClick=@(() => OnInterrupt.InvokeAsync()) Variant=Variant.Filled Color=Color.Error StartIcon="fa-solid fa-ban" ButtonType="ButtonType.Button" FullWidth>Interrupt</MudButton>
        </MudButtonGroup>
        }
    </MudStack>
</EditForm>

@code {
    [Parameter] public SharedParameters Parameters { get; set; }
    [Parameter] public EventCallback<SharedParameters> OnGenerate { get; set; }
    [Parameter] public EventCallback OnSkip { get; set; }
    [Parameter] public EventCallback OnInterrupt { get; set; }
    [Parameter] public bool ButtonDisabled { get; set; }

    protected override void OnInitialized()
    {
        M.OnConverging += Refresh;
    }

    public async void Generate()
    {
        await OnGenerate.InvokeAsync(Parameters);
    }

    private async void Refresh() => await InvokeAsync(StateHasChanged);

    public void Dispose() => M.OnConverging -= Refresh;
}
