@using System.Text.Json;
@inject IOService IO
@inject AppState AppState

<div>
    <EditForm Model="Parameters">
        <MudPaper Class="pa-6 mb-5 mt-n4">
            <MudGrid>
                <MudItem xs="9">
                    <MudStack>
                        <MudTextField Class="prompt" Lines=_promptLines Label="Prompt" OnAdornmentClick="() => PromptDrawer.Visible = true" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-tags" T="string" Value=@Parameters.Prompt ValueChanged="(v) => HandleInputChanged(v, isNegative: false)" Clearable Immediate />
                        <MudTextField Class="negative-prompt" Lines=_negativePromptLines Label="Negative Prompt" OnAdornmentClick="() => NegativePromptDrawer.Visible = true" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-tags" T="string" Value=@Parameters.NegativePrompt ValueChanged="(v) => HandleInputChanged(v, isNegative: true)" Clearable Immediate />
                    </MudStack>
                </MudItem>
                <MudItem xs="3">
                    <MudStack Class="h-100 w-100">
                        <MudSelect Label="Styles" Text="@_currentStyles" SelectedValuesChanged=@((e) => HandleStylesChanged(e)) T="PromptStyle" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" MultiSelection>
                            @if (AppState.Styles != null)
                            {
                                @foreach (var style in AppState.Styles)
                                {
                                    if (!(string.IsNullOrWhiteSpace(style.Prompt) && string.IsNullOrWhiteSpace(style.NegativePrompt)))
                                    {
                                        <MudSelectItem Value=style T="PromptStyle">@style.Name</MudSelectItem>
                                    }
                                }
                            }
                        </MudSelect>
                        <GenerateButton Parameters="Parameters" OnGenerate="OnGenerate" OnSkip="OnSkip" OnInterrupt="OnInterrupt" ButtonDisabled=ButtonDisabled />
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </EditForm>
</div>

<TagDrawer @ref="PromptDrawer" OnAppendTags="OnPromptTagAppended" HeaderBgColor="var(--mud-palette-success)" AutocompleteTags="@AppState.AutocompleteTags" ButtonTags=_tags/>
<TagDrawer @ref="NegativePromptDrawer" OnAppendTags="OnNegativePromptTagAppended" HeaderBgColor="var(--mud-palette-error)" AutocompleteTags="@AppState.AutocompleteTags" ButtonTags=_tags/>

@code {
    [Parameter]
    public SharedParameters Parameters { get; set; }
    [Parameter]
    public EventCallback OnGenerate { get; set; }
    [Parameter]
    public EventCallback OnSkip { get; set; }
    [Parameter]
    public EventCallback OnInterrupt { get; set; }
    [Parameter]
    public EventCallback<SharedParameters> ParametersChanged { get; set; }
    [Parameter]
    public EventCallback<AppendedTags> OnPromptTagAppended { get; set; }
    [Parameter]
    public EventCallback<AppendedTags> OnNegativePromptTagAppended { get; set; }
    [Parameter]
    public bool ButtonDisabled { get; set; }
    [Parameter]
    public TagDrawer? PromptDrawer { get; set; }
    [Parameter]
    public TagDrawer? NegativePromptDrawer { get; set; }

    private string _currentStyles;
    private int _promptLines = 2;
    private int _negativePromptLines = 2;
    private PromptButton _tags;

    protected override void OnInitialized()
    {
        GetButtonTags();
    }

    public void GetButtonTags() => _tags = JsonSerializer.Deserialize<PromptButton>(IO.GetJsonAsString("Data/danbooru.json"), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

    private void HandleInputChanged(string value, bool isNegative)
    {
        if (isNegative) Parameters.NegativePrompt = value;
        else Parameters.Prompt = value;
        GetInputLines(value, isNegative);
        StateHasChanged();
    }

    private void HandleStylesChanged(IEnumerable<PromptStyle> styles)
    {
        if (styles == null || styles.Count() == 0) _currentStyles = string.Empty;
        else _currentStyles = string.Join(", ", styles.Select(s => s.Name));
        AppState.CurrentStyles = styles;
    }

    private void GetInputLines(string characters, bool isNegative)
    {
        var lines = (int)(characters.Count() / 120f + 1);
        if (isNegative) _negativePromptLines = lines > 2 ? lines : 2;
        else _promptLines = lines > 2 ? lines : 2;
    }
}
