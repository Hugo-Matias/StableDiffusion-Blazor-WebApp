@inject ManagerService M

<MudText Typo="Typo.button" Style="opacity:0.2;">MultiDiffusion: Tiled Diffusion</MudText>
<MudGrid>
    <MudItem xs="6">
        <MudSelect @bind-Value=Parameters.Method Label="Method" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
            @foreach (var method in _s.Methods)
            {
                <MudSelectItem Value="method" />
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        @if (IsImg2Img)
        {
            <MudCheckBox @bind-Checked=Parameters.KeepInputSize Label="Keep Input Image Size" />
        }
        else
        {
            <MudCheckBox @bind-Checked=Parameters.OverwriteImageSize Label="Overwrite Image Size" />
        }
    </MudItem>
    @if (Parameters.OverwriteImageSize)
    {
        <MudItem xs="12">
            <MudStack Row=true>
                <MudSlider @bind-Value=Parameters.ImageWidth Min=_s.Image.Resolution.Min Max=_s.Image.Resolution.Max Step=_s.Image.Resolution.Step ValueLabel=true><small>Width:</small> @Parameters.ImageWidth px</MudSlider>
                <MudSlider @bind-Value=Parameters.ImageHeight Min=_s.Image.Resolution.Min Max=_s.Image.Resolution.Max Step=_s.Image.Resolution.Step ValueLabel=true><small>Height:</small> @Parameters.ImageHeight px</MudSlider>
            </MudStack>
        </MudItem>
    }
    <MudItem xs="12">
        <MudText Typo="Typo.caption">Latent Tile:</MudText>
    </MudItem>
    <MudItem xs="12">
        <MudStack Class="mt-n6" Row=true>
            <MudSlider @bind-Value=Parameters.TileWidth Min=_s.LatentTile.Resolution.Min Max=_s.LatentTile.Resolution.Max Step=_s.LatentTile.Resolution.Step ValueLabel=true><small>Width:</small> @Parameters.TileWidth px</MudSlider>
            <MudSlider @bind-Value=Parameters.TileHeight Min=_s.LatentTile.Resolution.Min Max=_s.LatentTile.Resolution.Max Step=_s.LatentTile.Resolution.Step ValueLabel=true><small>Height:</small> @Parameters.TileHeight px</MudSlider>
        </MudStack>
    </MudItem>
    <MudItem xs="12">
        <MudStack Row=true>
            <MudSlider @bind-Value=Parameters.Overlap Min=_s.LatentTile.Overlap.Min Max=_s.LatentTile.Overlap.Max Step=_s.LatentTile.Overlap.Step ValueLabel=true><small>Overlap:</small> @Parameters.Overlap px</MudSlider>
            <MudSlider @bind-Value=Parameters.TileBatchSize Min=_s.LatentTile.Batch.Min Max=_s.LatentTile.Batch.Max Step=_s.LatentTile.Batch.Step ValueLabel=true><small>Batch Size:</small> @Parameters.TileBatchSize</MudSlider>
        </MudStack>
    </MudItem>
    @if (IsImg2Img)
    {
        if (M.Upscalers != null)
        {
            <MudItem xs="6">
                <MudSelect @bind-Value=Parameters.UpscalerIndex Label="Upscaler" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    @foreach (var upscaler in M.Upscalers)
                    {
                        <MudSelectItem Value="upscaler.Name" />
                    }
                </MudSelect>
            </MudItem>
        }
        <MudItem xs="6">
            <MudSlider @bind-Value=Parameters.ScaleFactor Min=_s.Image.Scale.Min Max=_s.Image.Scale.Max Step=_s.Image.Scale.Step ValueLabel=true><small>Scale Factor:</small> @Parameters.ScaleFactor</MudSlider>
        </MudItem>
        <MudItem xs="6">
            <MudCheckBox @bind-Checked=Parameters.IsNoiseInverse Label="Noise Inverse" />
        </MudItem>
    }
    <MudItem xs="6">
        <MudCheckBox @bind-Checked=Parameters.ControlTensorCpu Label="Move ControlNet to CPU" />
    </MudItem>
    <MudItem xs="12" Class="@($"collapse {(Parameters.IsNoiseInverse ? "show" : "")}")">
        <MudGrid>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.NoiseInverseSteps Min=_s.NoiseInverse.Steps.Min Max=_s.NoiseInverse.Steps.Max Step=_s.NoiseInverse.Steps.Step ValueLabel=true><small>Steps: </small>@Parameters.NoiseInverseSteps </MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.NoiseInverseRetouch Min=_s.NoiseInverse.Retouch.Min Max=_s.NoiseInverse.Retouch.Max Step=_s.NoiseInverse.Retouch.Step ValueLabel=true>
                    <MudNumericField Label="Retouch" @bind-Value=Parameters.NoiseInverseRetouch Min=_s.NoiseInverse.Retouch.Min Max=_s.NoiseInverse.Retouch.Max Step=_s.NoiseInverse.Retouch.Step />
                </MudSlider>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.caption">Renoise</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.NoiseInverseRenoiseStrength Min=_s.NoiseInverse.Renoise.Strength.Min Max=_s.NoiseInverse.Renoise.Strength.Max Step=_s.NoiseInverse.Renoise.Strength.Step ValueLabel=true><small>Strength: </small>@Parameters.NoiseInverseRenoiseStrength </MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.NoiseInverseRenoiseKernel Min=_s.NoiseInverse.Renoise.Kernel.Min Max=_s.NoiseInverse.Renoise.Kernel.Max Step=_s.NoiseInverse.Renoise.Kernel.Step ValueLabel=true><small>Kernel Size: </small>@Parameters.NoiseInverseRenoiseKernel </MudSlider>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public ScriptParametersMultiDiffusionTiledDiffusion Parameters { get; set; }
    [Parameter] public bool IsImg2Img { get; set; }

    private MultiDiffusionTiledDiffusionSettingsModel _s;

    protected async override Task OnInitializedAsync()
    {
        if (M.Upscalers == null) await M.GetUpscalers();
        _s = M.Settings.Scripts.MultiDiffusion.TiledDiffusion;
    }
}
