@inject ManagerService M
@inject IOService IO
@inject SDAPIService SD
@inject DatabaseService DB
@inject IConfiguration Configuration
@inject IDialogService DialogService

<div>
    <MudGrid>
        <MudItem xs="3">
            <FileTree Files=_files OnFileSelected=HandleFileSelected OnDirectorySelected=HandleDirectorySelected StartIndex=@(_wildcardsPath.Length + 1) />
        </MudItem>
        <MudItem xs="9">
            <MudGrid Class="pa-4">
                <MudItem xs="12">
                    <MudTabs @bind-ActivePanelIndex=M.State.Prompts.Wildcards.ActivePromptTabIndex Elevation=1 Class="mt-4" Centered=true Rounded=true>
                        <MudTabPanel Text="Txt Prompt">
                            <MudTextField Lines="M.Settings.Prompts.Wildcards.PromptTextfieldLines" @bind-Value=M.ParametersTxt2Img.Prompt Adornment=Adornment.End AdornmentIcon="fa-solid fa-floppy-disk" OnAdornmentClick=@(() => ShowPromptDialog()) Label="Prompt" Clearable=true />
                        </MudTabPanel>
                        <MudTabPanel Text="Txt Negative">
                            <MudTextField Lines="M.Settings.Prompts.Wildcards.PromptTextfieldLines" @bind-Value=M.ParametersTxt2Img.NegativePrompt Adornment=Adornment.End AdornmentIcon="fa-solid fa-floppy-disk" OnAdornmentClick=@(() => ShowPromptDialog()) Label="Negative Prompt" Clearable=true />
                        </MudTabPanel>
                        <MudTabPanel Text="Img Prompt">
                            <MudTextField Lines="M.Settings.Prompts.Wildcards.PromptTextfieldLines" @bind-Value=M.ParametersImg2Img.Prompt Adornment=Adornment.End AdornmentIcon="fa-solid fa-floppy-disk" OnAdornmentClick=@(() => ShowPromptDialog()) Label="Prompt" Clearable=true />
                        </MudTabPanel>
                        <MudTabPanel Text="Img Negative">
                            <MudTextField Lines="M.Settings.Prompts.Wildcards.PromptTextfieldLines" @bind-Value=M.ParametersImg2Img.NegativePrompt Adornment=Adornment.End AdornmentIcon="fa-solid fa-floppy-disk" OnAdornmentClick=@(() => ShowPromptDialog()) Label="Negative Prompt" Clearable=true />
                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
                <MudItem xs="9">
                    <MudTextField @bind-Value=M.State.Prompts.Wildcards.Template Label="Template" Disabled=true ReadOnly=true />
                </MudItem>
                <MudItem xs="3">
                    <MudButtonGroup Class="w-100">
                        <MudButton Class="w-100" OnClick=@(() => AppendTemplate(toFront: false))><MudIcon Icon="fa-solid fa-chevron-left" /></MudButton>
                        <MudButton Class="w-100" OnClick=@(() => AppendTemplate(toFront: true))><MudIcon Icon="fa-solid fa-chevron-right" /></MudButton>
                    </MudButtonGroup>
                </MudItem>
                <MudItem xs="12">
                    <MudTabs @bind-ActivePanelIndex=M.State.Prompts.Wildcards.ActiveActionTabIndex Elevation=1 Class="mt-4" Centered=true Rounded=true>
                        <MudTabPanel Text="Generate">
                            <MudStack Row=true>
                                <MudSlider @bind-Value=M.State.Prompts.Wildcards.GenerationAmount Min=M.Settings.Prompts.Wildcards.Generation.Min Max=M.Settings.Prompts.Wildcards.Generation.Max Step=M.Settings.Prompts.Wildcards.Generation.Step ValueLabel=true><small>Amount:</small> @M.State.Prompts.Wildcards.GenerationAmount</MudSlider>
                                <MudButton Class="ma-4 w-100 h-100" OnClick=GeneratePrompts Color="Color.Success">Generate Prompts</MudButton>
                            </MudStack>
                            <MudStack>
                                @if (M.State.Prompts.Wildcards.GeneratedPrompts.Count > 0)
                                {
                                    foreach (var prompt in M.State.Prompts.Wildcards.GeneratedPrompts)
                                    {
                                        <MudStack AlignItems=AlignItems.Center Row=true>
                                            <MudMenu Icon="fa-solid fa-ellipsis-vertical" IconColor=Color.Secondary>
                                                <MudMenuItem Icon="fa-solid fa-file-lines" IconColor=Color.Success OnClick=@(() => M.ParametersTxt2Img.Prompt = prompt)>Txt2Img</MudMenuItem>
                                                <MudMenuItem Icon="fa-solid fa-file-lines" IconColor=Color.Error OnClick=@(() => M.ParametersTxt2Img.NegativePrompt = prompt)>Txt2Img</MudMenuItem>
                                                <MudMenuItem Icon="fa-solid fa-file-image" IconColor=Color.Success OnClick=@(() => M.ParametersImg2Img.Prompt = prompt)>Img2Img</MudMenuItem>
                                                <MudMenuItem Icon="fa-solid fa-file-image" IconColor=Color.Error OnClick=@(() => M.ParametersImg2Img.NegativePrompt = prompt)>Img2Img</MudMenuItem>
                                                <MudMenuItem Icon="fa-solid fa-floppy-disk" IconColor=Color.Info OnClick=@(() => ShowPromptDialog(prompt))>Preset</MudMenuItem>
                                            </MudMenu>
                                            <MudText Typo="Typo.body1">@prompt</MudText>
                                        </MudStack>
                                    }
                                }
                            </MudStack>
                        </MudTabPanel>
                        <MudTabPanel Text="Edit">
                            @if (_file != null)
                            {
                                <MudTextField Lines="40" Label="Wildcards" Value="_wildcardText" ValueChanged=@(v => HandleWildcardTextChanged(v)) T="string" />
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</div>

@code {
    private string _wildcardsPath;
    private List<FileInfo> _files;
    private DirectoryInfo? _dir;
    private FileInfo? _file;
    private string _wildcardText;

    protected async override Task OnInitializedAsync()
    {
        if (M.CmdFlags == null) await M.GetCmdFlags();
        _wildcardsPath = Path.Combine(M.CmdFlags.BaseDir, Configuration["WildcardsPath"]);
        _files = IO.GetFilesRecursive(_wildcardsPath, extensionsWhitelist: new() { ".txt" }).ToList();
    }

    private async Task HandleDirectorySelected(DirectoryInfo dir)
    {
        _dir = dir;
        _file = null;
        SetTemplate();
    }

    private async Task HandleFileSelected(FileInfo file)
    {
        _dir = null;
        _file = file;
        LoadWildcardText();
        SetTemplate();
    }

    private void AppendTemplate(bool toFront)
    {
        var template = M.State.Prompts.Wildcards.Template;
        switch (M.State.Prompts.Wildcards.ActivePromptTabIndex)
        {
            case 0:
                if (toFront) M.ParametersTxt2Img.Prompt += " " + template;
                else M.ParametersTxt2Img.Prompt = template + " " + M.ParametersTxt2Img.Prompt;
                break;
            case 1:
                if (toFront) M.ParametersTxt2Img.NegativePrompt += " " + template;
                else M.ParametersTxt2Img.NegativePrompt = template + " " + M.ParametersTxt2Img.NegativePrompt;
                break;
            case 2:
                if (toFront) M.ParametersImg2Img.Prompt += " " + template;
                else M.ParametersImg2Img.Prompt = template + " " + M.ParametersImg2Img.Prompt;
                break;
            case 3:
                if (toFront) M.ParametersImg2Img.NegativePrompt += " " + template;
                else M.ParametersImg2Img.NegativePrompt = template + " " + M.ParametersImg2Img.NegativePrompt;
                break;
        }
    }

    private void SetTemplate()
    {
        M.State.Prompts.Wildcards.Template = WriteTemplate();
    }

    private string WriteTemplate()
    {
        if (_dir != null) return $"__{_dir.FullName.Replace(_wildcardsPath + "\\", "").Replace("\\", "/")}/*__";
        else if (_file != null) return $"__{_file.FullName.Replace(_wildcardsPath + "\\", "").Replace(_file.Extension, "").Replace("\\", "/")}__";
        return string.Empty;
    }

    private async Task GeneratePrompts()
    {
        M.State.Prompts.Wildcards.GeneratedPrompts = await SD.GeneratePrompts(M.GetDynamicPromptsVersion(), GetPrompt(), M.State.Prompts.Wildcards.GenerationAmount);
    }

    private string GetPrompt()
    {
        return M.State.Prompts.Wildcards.ActivePromptTabIndex switch
        {
            0 => M.ParametersTxt2Img.Prompt,
            1 => M.ParametersTxt2Img.NegativePrompt,
            2 => M.ParametersImg2Img.Prompt,
            3 => M.ParametersImg2Img.NegativePrompt,
        };
    }

    private void HandleWildcardTextChanged(string value)
    {
        _wildcardText = value;
        SaveWildcardText();
    }

    private void LoadWildcardText() => _wildcardText = IO.LoadText(_file.FullName);

    private void SaveWildcardText() => IO.SaveText(_file.FullName, _wildcardText);

    private async Task ShowPromptDialog(string prompt = "")
    {
        var preset = new PromptResource();
        var tabIndex = M.State.Prompts.Wildcards.ActivePromptTabIndex;
        if (string.IsNullOrWhiteSpace(prompt))
        {
            if(tabIndex <= 1)
            {
                preset.Positive = M.ParametersTxt2Img.Prompt;
                preset.Negative = M.ParametersTxt2Img.NegativePrompt;
            }
            else
            {
                preset.Positive = M.ParametersImg2Img.Prompt;
                preset.Negative = M.ParametersImg2Img.NegativePrompt;
            }
        }
        else
        {
            preset.Positive = prompt;
        }
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };
        var param = new DialogParameters();
        param.Add("Prompt", preset);
        var dialog = await DialogService.ShowAsync<PromptDialog>("", param, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            switch (result.Data)
            {
                case "Create":
                    await DB.CreatePrompt(new(preset));
                    break;
            }
        }
        await M.GetStyles();
    }
}
