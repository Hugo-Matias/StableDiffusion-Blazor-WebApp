@inject ManagerService M

<div style="margin-bottom:15rem;">
    <EditForm Model="@Parameters">
        <MudGrid Class="pa-5">
            <MudItem xs="6">
                <MudText Typo="Typo.caption">Mode</MudText>
                <MudRadioGroup @bind-SelectedOption="M.State.Generation.Img2Img.Mode" Class="align-items-center">
                    <MudRadio Option=@("Paint") Color="Color.Primary">Paint</MudRadio>
                    <MudRadio Option=@("Mask") Color="Color.Secondary">Mask</MudRadio>
                </MudRadioGroup>
            </MudItem>
            <MudItem xs="6">
                <MudStack>
                    <MudButtonGroup Variant="Variant.Filled" OverrideStyles=false>
                        <MudButton OnClick=OnUndo StartIcon="fa-solid fa-pencil me-2" IconColor="Color.Warning" Class="w-100">Undo</MudButton>
                        <MudButton OnClick=OnClear StartIcon="fa-solid fa-eraser me-2" IconColor=Color.Error Class="w-100">Clear</MudButton>
                    </MudButtonGroup>
                    <MudButtonGroup Variant="Variant.Text" OverrideStyles=false>
                        <MudButton OnClick=OnSet StartIcon="fa-solid fa-file-image me-2" Class="w-100">Set</MudButton>
                        <MudButton OnClick=OnDelete StartIcon="fa-solid fa-trash-can me-2" Class="w-100">Delete</MudButton>
                    </MudButtonGroup>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.caption">Max Input Resolution</MudText>
                <MudStack Row=true>
                    <MudSlider @bind-Value=M.State.Generation.Img2Img.MaxInputWidth Min=M.Settings.Img2Img.InputResolution.Min Max=M.Settings.Img2Img.InputResolution.Max Step=M.Settings.Img2Img.InputResolution.Step ValueLabel=true><small>Width:</small> @M.State.Generation.Img2Img.MaxInputWidth px</MudSlider>
                    <MudSlider @bind-Value=M.State.Generation.Img2Img.MaxInputHeight Min=M.Settings.Img2Img.InputResolution.Min Max=M.Settings.Img2Img.InputResolution.Max Step=M.Settings.Img2Img.InputResolution.Step ValueLabel=true><small>Height:</small> @M.State.Generation.Img2Img.MaxInputHeight px</MudSlider>
                    <MudCheckBox Label="Downsize Input" @bind-Checked=M.State.Generation.Img2Img.DownsizeInput />
                </MudStack>
            </MudItem>
            <MudItem xs="4">
                <MudSlider @bind-Value=Parameters.MaskBlur Min="M.Settings.Img2Img.MaskBlur.Min" Max="M.Settings.Img2Img.MaskBlur.Max" Step="M.Settings.Img2Img.MaskBlur.Step" Variant="Variant.Filled" ValueLabel><small>Mask Blur:</small> @Parameters.MaskBlur</MudSlider>
            </MudItem>
            <MudItem xs="4">
                <MudSlider @bind-Value=M.State.Generation.Img2Img.BrushSize Min="M.Settings.Img2Img.Brush.Min" Max="M.Settings.Img2Img.Brush.Max" Variant=Variant.Filled ValueLabel><small>Brush Size:</small> @M.State.Generation.Img2Img.BrushSize</MudSlider>
            </MudItem>
            <MudItem xs="4">
                <MudColorPicker AnchorOrigin=Origin.BottomRight TransformOrigin=Origin.TopRight Label="Brush Color" @bind-Text="M.State.Generation.Img2Img.BrushColor" DisableAlpha />
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="int" Label="Resize Mode" @bind-Value=Parameters.ResizeMode>
                    @for (int i = 0; i <= 3; i++)
                    {
                        var value = i;
                        <MudSelectItem Value="@value">@Parser.ParseResizeModeValue(value)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="int" Label="Fill Mode" @bind-Value=Parameters.InpaintingFill>
                    @for (int i = 0; i <= 3; i++)
                    {
                        var value = i;
                        <MudSelectItem Value="@value">@Parser.ParseInpaintingFillValue(value)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudText Typo="Typo.caption">Inpainting</MudText>
                <MudChipSet SelectedChipsChanged="HandleInpaintingParameterChecked" MultiSelection Filter>
                    <MudChip Text="Full Res" Default="@Parameters.InpaintFullRes" Variant="Variant.Text" Color="Color.Primary">Full Res</MudChip>
                    <MudChip Text="Invert Mask" Default="@(Parameters.InpaintingMaskInvert > 0)" Variant="Variant.Text" Color="Color.Primary">Invert Mask</MudChip>
                </MudChipSet>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.InpaintFullResPadding Min="M.Settings.Img2Img.Inpainting.FullRes.Padding.Min" Max="M.Settings.Img2Img.Inpainting.FullRes.Padding.Max" Step="M.Settings.Img2Img.Inpainting.FullRes.Padding.Step" Variant="Variant.Filled" ValueLabel>
                    <small>Full Res Padding:</small> @Parameters.InpaintFullResPadding
                </MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.Steps Min=M.Settings.Shared.Steps.Min Max=M.Settings.Shared.Steps.Max Step=M.Settings.Shared.Steps.Step Variant="Variant.Filled" ValueLabel><small>Steps:</small> @Parameters.Steps</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" Label="Sampler" @bind-Value=Parameters.SamplerIndex AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    @if (M.Samplers != null)
                    {
                        @foreach (var sampler in M.Samplers)
                        {
                            <MudSelectItem Value=@sampler.Name />
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.CfgScale Min=M.Settings.Shared.CfgScale.Min Max=M.Settings.Shared.CfgScale.Max Step=M.Settings.Shared.CfgScale.Step Variant="Variant.Filled" ValueLabel TickMarks><small>CFG Scale:</small> @Parameters.CfgScale</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.DenoisingStrength Min=M.Settings.Shared.Denoising.Min Max=M.Settings.Shared.Denoising.Max Step=M.Settings.Shared.Denoising.Step Variant="Variant.Filled" ValueLabel><small>Denoising:</small> @Parameters.DenoisingStrength</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.Width Min=M.Settings.Shared.Resolution.Min Max=M.Settings.Shared.Resolution.Max Step=M.Settings.Shared.Resolution.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Width:</small> @(Parameters.Width)px</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.Height Min=M.Settings.Shared.Resolution.Min Max=M.Settings.Shared.Resolution.Max Step=M.Settings.Shared.Resolution.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Height:</small> @(Parameters.Height)px</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.NIter Min=M.Settings.Shared.Batch.Count.Min Max=M.Settings.Shared.Batch.Count.Max Step=M.Settings.Shared.Batch.Count.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Batch Count:</small> @Parameters.NIter</MudSlider>
            </MudItem>
            <MudItem xs="6">
                <MudSlider @bind-Value=Parameters.BatchSize Min=M.Settings.Shared.Batch.Size.Min Max=M.Settings.Shared.Batch.Size.Max Step=M.Settings.Shared.Batch.Size.Step Variant="Variant.Filled" ValueLabel TickMarks><small>Batch Size:</small> @Parameters.BatchSize</MudSlider>
            </MudItem>
            <MudItem xs="11">
                <MudNumericField @bind-Value=Parameters.Seed Label="Seed" Min="-1" Max="long.MaxValue" />
            </MudItem>
            <MudItem xs="1">
                <MudButtonGroup Variant="Variant.Text" VerticalAlign>
                    <MudIconButton OnClick=SetRandomSeed Icon="fa-solid fa-shuffle" ButtonType="ButtonType.Button" Class="icon" />
                    <MudIconButton OnClick=RestoreSeed Icon="fa-solid fa-rotate-left" ButtonType="ButtonType.Button" Class="icon" />
                </MudButtonGroup>
            </MudItem>
            <MudItem xs="12">
                <MudChipSet SelectedChipsChanged="HandleParameterChecked" MultiSelection Filter>
                    <MudChip Text="Restore Faces" Default="Parameters.RestoreFaces" Variant="Variant.Text" Color="Color.Primary">Restore Faces</MudChip>
                    <MudChip Text="Tiling" Default="Parameters.Tiling" Variant="Variant.Text" Color="Color.Primary">Tiling</MudChip>
                    <MudChip Text="Ultimate Upscale" Default="Parameters.Scripts.UltimateUpscale.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Ultimate Upscale</MudChip>
                    <MudChip Text="Tiled Diffusion" Default="Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Tiled Diffusion</MudChip>
                    <MudChip Text="Tiled VAE" Default="Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Tiled VAE</MudChip>
                    <MudChip Text="Cutoff" Default="Parameters.Scripts.Cutoff.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Cutoff</MudChip>
                    <MudChip Text="Regional Prompter" Default="Parameters.Scripts.RegionalPrompter.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Regional Prompter</MudChip>
                    <MudChip Text="Dynamic Prompts" Default="Parameters.Scripts.DynamicPrompts.IsEnabled" Variant="Variant.Text" Color="Color.Primary">Dynamic Prompts</MudChip>
                    <MudChip Text="ControlNet" Default="M.ControlNetEnabled" Variant="Variant.Text" Color="Color.Primary">ControlNet</MudChip>
                    <MudChip Text="XYZ Plot" Default="Parameters.Scripts.XYZPlot.IsEnabled" Variant="Variant.Text" Color="Color.Primary">X/Y/Z Plot</MudChip>
                </MudChipSet>
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.UltimateUpscale.IsEnabled ? "show" : "")}")">
                <UltimateUpscaleForm Parameters=Parameters.Scripts.UltimateUpscale />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled ? "show" : "")}")">
                <MultiDiffusionTiledDiffusionForm Parameters=Parameters.Scripts.MultiDiffusionTiledDiffusion IsImg2Img=true />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled ? "show" : "")}")">
                <MultiDiffusionTiledVaeForm Parameters=Parameters.Scripts.MultiDiffusionTiledVae />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.Cutoff.IsEnabled ? "show" : "")}")">
                <CutoffForm Parameters=Parameters.Scripts.Cutoff />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.RegionalPrompter.IsEnabled ? "show" : "")}")">
                <RegionalPrompterForm Parameters=Parameters.Scripts.RegionalPrompter />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.DynamicPrompts.IsEnabled ? "show" : "")}")">
                <DynamicPromptsForm Parameters=Parameters.Scripts.DynamicPrompts />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(M.ControlNetEnabled ? "show" : "")}")">
                <ControlNetTabs Units="Parameters.Scripts.ControlNet" />
            </MudItem>
            <MudItem xs="12" Class="@($"collapse {(Parameters.Scripts.XYZPlot.IsEnabled ? "show" : "")}")">
                <XYZPlotForm Parameters="Parameters.Scripts.XYZPlot" IsImg2Img=true />
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    [Parameter] public Img2ImgParameters Parameters { get; set; }
    [Parameter] public EventCallback<Img2ImgParameters> ParametersChanged { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnSet { get; set; }
    [Parameter, EditorRequired]
    public EventCallback OnDelete { get; set; }
    [Parameter, EditorRequired]
    public EventCallback OnClear { get; set; }
    [Parameter, EditorRequired]
    public EventCallback OnUndo { get; set; }

    private Options _options;
    private List<string> _modes = new List<string>() { "Inpaint", "Mask" };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _options = M.Options;
    }

    private void IncrementSeed() => Parameters.Seed++;
    private void DecrementSeed()
    {
        if (Parameters.Seed > -1)
            Parameters.Seed--;
    }
    private void SetRandomSeed() => Parameters.Seed = -1;

    private void RestoreSeed()
    {
        if (M.ImagesInfo != null && M.ImagesInfo.Seed != null)
            Parameters.Seed = M.ImagesInfo.Seed;
    }

    private void HandleInpaintingParameterChecked(MudChip[] checkboxes)
    {
        Parameters.InpaintFullRes = false;
        Parameters.InpaintingMaskInvert = 0;
        if (checkboxes == null || checkboxes.Count() == 0) return;
        foreach (var check in checkboxes)
        {
            switch (check.Text)
            {
                case "Full Res":
                    Parameters.InpaintFullRes = true;
                    break;
                case "Invert Mask":
                    Parameters.InpaintingMaskInvert = 1;
                    break;
            }
        }
    }

    private void HandleParameterChecked(MudChip[] checkboxes)
    {
        Parameters.RestoreFaces = false;
        Parameters.Tiling = false;
        Parameters.Scripts.UltimateUpscale.IsEnabled = false;
        Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled = false;
        Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled = false;
        Parameters.Scripts.Cutoff.IsEnabled = false;
        Parameters.Scripts.RegionalPrompter.IsEnabled = false;
        Parameters.Scripts.DynamicPrompts.IsEnabled = false;
        M.ControlNetEnabled = false;
        Parameters.Scripts.XYZPlot.IsEnabled = false;
        if (checkboxes == null || checkboxes.Count() == 0) return;
        foreach (var check in checkboxes)
        {
            switch (check.Text)
            {
                case "Restore Faces":
                    Parameters.RestoreFaces = true;
                    break;
                case "Tiling":
                    Parameters.Tiling = true;
                    break;
                case "Ultimate Upscale":
                    Parameters.Scripts.UltimateUpscale.IsEnabled = true;
                    break;
                case "Tiled Diffusion":
                    Parameters.Scripts.MultiDiffusionTiledDiffusion.IsEnabled = true;
                    break;
                case "Tiled VAE":
                    Parameters.Scripts.MultiDiffusionTiledVae.IsEnabled = true;
                    break;
                case "Cutoff":
                    Parameters.Scripts.Cutoff.IsEnabled = true;
                    break;
                case "Regional Prompter":
                    Parameters.Scripts.RegionalPrompter.IsEnabled = true;
                    break;
                case "Dynamic Prompts":
                    Parameters.Scripts.DynamicPrompts.IsEnabled = true;
                    break;
                case "ControlNet":
                    M.ControlNetEnabled = true;
                    break;
                case "XYZ Plot":
                    Parameters.Scripts.XYZPlot.IsEnabled = true;
                    break;
            }
        }
    }
}