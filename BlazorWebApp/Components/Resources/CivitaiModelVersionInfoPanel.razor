@inject ManagerService M
@inject CivitaiService Civitai
@inject IOService IO
@inject DatabaseService DB
@inject ImageService ImageService
@inject ProgressService Progress
@inject IConfiguration Configuration
@inject ISnackbar Snackbar
@using System.Text.Json;
@using System.Text.Json.Serialization;

<div>
    <MudTabs Class="tabs" Position="Position.Start" Rounded>
        @foreach (var version in Model.ModelVersions)
        {
            <MudTabPanel>
                <TabContent>
                    <MudText Class="d-flex align-items-center" Typo="Typo.caption"><MudIcon Style="font-size: 1rem; margin-right: 0.3rem;" Icon="fa-solid fa-server" Color=GetTabIconColor(version).Result /> @version.Name</MudText>
                </TabContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="8">
                            <MudButton Class="w-100 mb-4" Color="Color.Primary" OnClick="async () => await SaveAllImages(version, true)">@(_isSavingImages ? "Saving..." : "Save All")</MudButton>
                                <MudGrid Class="images-container">
                                    @foreach (var image in version.Images)
                                {
                                    <CivitaiModelImageCard Image="image" OnSaveImage=@(async () => await SaveImage(image, version.Id)) />
                                }
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="4">
                            <CivitaiFileButton Class="mb-4 mt-n4" Files="version.Files" OnDownload="@(async (file) => await DownloadFile(version, file))" />
                            <MudStack Class="mb-4" Row>
                            <MudStack>
                                <MudText Class="meta-label" Typo="Typo.caption">Created</MudText>
                                <MudText Typo="Typo.subtitle2">@(version.CreatedAt.ToString("dd MMMMM yyyy"))</MudText>
                                    </MudStack>
                                    <MudSpacer />
                                    @if (version.UpdatedAt != null)
                                {

                                    <MudStack>
                                        <MudText Class="meta-label" Typo="Typo.caption">Updated</MudText>
                                        <MudText Typo="Typo.subtitle2">@(version.UpdatedAt.ToString("dd MMMM yyyy"))</MudText>
                                        </MudStack>
                                }
                            </MudStack>
                            @if (version.TrainedWords != null && version.TrainedWords.Count > 0)
                            {
                                <MudStack Class="mb-4">
                                    <MudText Class="meta-label" Typo="Typo.caption">Trigger Words</MudText>
                                    <MudChipSet Style="max-height:10vh; overflow:scroll;">
                                        @foreach (var word in version.TrainedWords)
                                        {
                                            <MudChip Style="font-size: 0.75rem; max-width:20vw;" Color="Color.Primary" Text="@word">@word</MudChip>
                                        }
                                    </MudChipSet>
                                </MudStack>
                            }
                            <MudStack Class="description">
                                @((MarkupString)version.Description)
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
        }
    </MudTabs>
</div>

@code {
    [Parameter] public CivitaiModelDto Model { get; set; }
    public bool _isSavingImages;

    private async Task DownloadFile(CivitaiModelVersionDto version, CivitaiModelVersionFileDto file)
    {
        var isSuccess = await Civitai.DownloadResource(Model, version, file, M.State.Civitai.ResourceSubtype);
        switch (isSuccess)
        {
            case CivitaiDownloadStatus.Success:
                Snackbar.Add($"{file.Name} downloaded successfully!", Severity.Success);
                break;
            case CivitaiDownloadStatus.Database:
                Snackbar.Add($"New database record created for {file.Name}!", Severity.Info);
                break;
            case CivitaiDownloadStatus.Exists:
                Snackbar.Add($"File already downloaded {file.Name}!", Severity.Warning);
                break;
            case CivitaiDownloadStatus.Error:
                Snackbar.Add($"Something went wrong downloading {file.Name}!", Severity.Error);
                break;
        }
        await SaveImage(version.Images[0], version.Id, isPreview: true, showSnackbar: false);
        await SaveAllImages(version, false);
        M.InvokeDownloadComplete();
    }

    private async Task SaveAllImages(CivitaiModelVersionDto version, bool showProgress)
    {
        _isSavingImages = true;
        var index = 1;
        var progress = new BaseProgress() { BarColor = Color.Secondary };
        if (showProgress) Progress.Add(progress);
        foreach (var image in version.Images)
        {
            var currentProgress = (index * 100) / version.Images.Count;
            if (showProgress) Progress.Update(progress.Id, currentProgress);
            try
            {
                await SaveImage(image, version.Id, filename: index.ToString(), showSnackbar: false);
            }
            catch (Exception)
            {
                Console.WriteLine("Couldn't save image:\n" + image.Url);
                Snackbar.Add("Couldn't save image:\n" + image.Url, Severity.Error);
                continue;
            }
            index++;
        }
        if (showProgress) Progress.Remove(progress.Id);
        Snackbar.Add("All images saved!\n" + Model.Name, Severity.Success);
        _isSavingImages = false;
    }

    private async Task SaveImage(CivitaiModelVersionImageDto image, int versionId, string filename = "", bool isPreview = false, bool showSnackbar = true)
    {
        string path = Path.Combine(Configuration["ImagesPathVault"], "Saved", Model.Type, $"{Model.Id}-{Parser.SanitizePath(Model.Name)}");
        var imageFilename = string.IsNullOrWhiteSpace(filename) ? Parser.SanitizePath(image.Hash) : filename;
        if (isPreview) path = Path.Combine(path, versionId.ToString());
        else path = Path.Combine(path, versionId.ToString(), imageFilename);
        var url = Parser.ParseCivitaiImageFullSize(image.Url, image.Width, image.Meta != null ? image.Meta.Size : null);
        var imagePath = path + ".png";
        if (File.Exists(imagePath) && showSnackbar)
        {
            Snackbar.Add("Image and parameters already saved!", Severity.Warning);
        }
        else
        {
            await ImageService.DownloadImageAsPng(url, imagePath, overwrite: false);
            if (!isPreview)
            {
                var parameters = JsonSerializer.Serialize(image.MetaObject, new JsonSerializerOptions()
                    {
                        WriteIndented = true,
                        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
                    });
                var jsonPath = path + ".json";
                IO.SaveText(jsonPath, parameters, overwrite: false);
            }
            if (showSnackbar) Snackbar.Add("Image saved!", Severity.Success);
        }

        if (!isPreview)
        {
            // Add to Db
            var entity = new ResourceImage(image);
            entity.CivitaiModelId = Model.Id;
            entity.CivitaiModelVersionID = versionId;
            entity.Path = imagePath.Replace(Configuration["ImagesPathVault"], "/image/vault/").Replace(@"\", "/");
            if (image.Meta != null) entity.Prompt = Parser.ParseCivitaiImageResources(image.Meta.Prompt, image.Meta.Resources);
            await DB.CreateResourceImage(entity);
        }
    }

    private async Task<Color> GetTabIconColor(CivitaiModelVersionDto version)
    {
        var fileExists = await DB.CheckResourceExistsByModelVersionId(version.Id);
        var imageCount = await DB.ResourceImageByModelVersionIdCount(version.Id);
        Color color = Color.Default;
        if (fileExists)
        {
            if (imageCount == version.Images.Count) color = Color.Success;
            else if (imageCount == 0) color = Color.Error;
            else if (imageCount < version.Images.Count) color = Color.Info;
            else color = Color.Warning;
        }
        return color;
    }
}
