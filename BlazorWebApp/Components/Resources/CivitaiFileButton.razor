@inject ManagerService M
@inject DatabaseService DB
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<div>
    <MudStack Class=@Class>
        <MudAutocomplete Label="Sub-Type" T="string" @bind-Value=M.State.Civitai.ResourceSubtype SearchFunc="DB.GetResourceSubtypeNames" MaxItems="50" MaxHeight="900" CoerceValue ResetValueOnEmptyText Clearable />
        <MudTextField Label="Filename" @bind-Value=_selected.Name />
        <MudButtonGroup Variant="Variant.Filled" OverrideStyles=false>
            <MudButton Class="w-100" OnClick=@(async () => await OnDownload.InvokeAsync(_selected)) Variant="Variant.Filled" StartIcon="@_icon" Color="_color" Style="text-transform: none !important">
                @_buttonText
            </MudButton>
            @if (Files.Count > 1)
            {
                <MudMenu Color="_color" Icon="@Icons.Material.Filled.KeyboardArrowDown" TransformOrigin="Origin.TopRight" AnchorOrigin="Origin.BottomRight">
                    @foreach (var file in Files)
                    {
                        <MudMenuItem OnClick=@(() => SelectFile(file)) IconColor=GetVersionButtonColor(file) Icon="@Parser.ParseCivitaiScanIcon(Parser.ParseCivitaiScanResult(file.VirusScanResult))">@($"{file.Type}{(file.Metadata.Format != "Other" ? $" {file.Metadata.Format }" : "")} ({Parser.ParseCivitaiFilesize(file.SizeKb)})")</MudMenuItem>
                    }
                </MudMenu>
            }
        </MudButtonGroup>
        @if (_selected.PickleScanResult != "Success")
        {
            <MudText Typo="Typo.subtitle2">@_selected.PickleScanMessage</MudText>
        }
        @if (Files.Any(f => f.Type == "Config"))
        {
            <MudText Typo="Typo.subtitle2" Color="Color.Info">Config file available!</MudText>
        }
        <MudStack Row>
            <MudStack>
                <MudText Class="meta-label" Typo="Typo.caption">Verified</MudText>
                @if (_selected.ScannedAt != null)
                {
                    <MudText Typo="Typo.subtitle2">@($"{Parser.ParseCivitaiScanTimespan((DateTime)_selected.ScannedAt)}")</MudText>
                }
                else
                {
                    <MudText Typo="Typo.subtitle2">Pending verification...</MudText>
                }
            </MudStack>
            <MudSpacer />
            <MudStack>
                <MudText Class="meta-label" Typo="Typo.caption">Size</MudText>
                <MudText Typo="Typo.subtitle2">@Parser.ParseCivitaiFilesize(_selected.SizeKb)</MudText>
            </MudStack>
        </MudStack>
        @if (_selected.Hashes != null)
        {
            <MudText Class="meta-label" Typo="Typo.caption">Hashes</MudText>
            <MudSimpleTable>
                <tbody>
                    <tr>
                        <td><MudText Typo="Typo.caption">AutoV1</MudText></td>
                        <td><MudButton OnClick="@(async () => await CopyToClipboard(_selected.Hashes.AutoV1))" EndIcon="fa-regular fa-clipboard">@_selected.Hashes.AutoV1</MudButton></td>
                    </tr>
                    <tr>
                        <td><MudText Typo="Typo.caption">AutoV2</MudText></td>
                        <td><MudButton OnClick="@(async () => await CopyToClipboard(_selected.Hashes.AutoV2))" EndIcon="fa-regular fa-clipboard">@_selected.Hashes.AutoV2</MudButton></td>
                    </tr>
                    @if (_showMoreHashes)
                    {
                        <tr>
                            <td><MudText Typo="Typo.caption">SHA256</MudText></td>
                            <td><MudButton OnClick="@(async () => await CopyToClipboard(_selected.Hashes.SHA256))" EndIcon="fa-regular fa-clipboard">@_selected.Hashes.SHA256</MudButton></td>
                        </tr>
                        <tr>
                            <td><MudText Typo="Typo.caption">CRC32</MudText></td>
                            <td><MudButton OnClick="@(async () => await CopyToClipboard(_selected.Hashes.CRC32))" EndIcon="fa-regular fa-clipboard">@_selected.Hashes.CRC32</MudButton></td>
                        </tr>
                        <tr>
                            <td><MudText Typo="Typo.caption">BLAKE3</MudText></td>
                            <td><MudButton OnClick="@(async () => await CopyToClipboard(_selected.Hashes.BLAKE3))" EndIcon="fa-regular fa-clipboard">@_selected.Hashes.BLAKE3</MudButton></td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
            <MudButton OnClick=@(() => _showMoreHashes = !_showMoreHashes)>@(!_showMoreHashes ? "Show More" : "Show Less")</MudButton>
        }
    </MudStack>
</div>

@code {
    [Parameter] public string Class { get; set; }
    [Parameter] public List<CivitaiModelVersionFileDto> Files { get; set; }
    [Parameter] public EventCallback<CivitaiModelVersionFileDto> OnDownload { get; set; }
    private CivitaiModelVersionFileDto _selected;
    private string _icon;
    private Color _color;
    private bool _showMoreHashes = false;
    private string _buttonText;

    protected override void OnInitialized()
    {
        foreach (var file in Files)
        {
            if (file.Primary != null && file.Primary == true)
                SelectFile(file);
        }
        ParseButtonText();
    }

    private void SelectFile(CivitaiModelVersionFileDto file)
    {
        _selected = file;
        ParseScanResults();
        ParseButtonText();
    }

    private void ParseScanResults()
    {
        var scanResult = Parser.ParseCivitaiScanResult(_selected.VirusScanResult);
        _color = Parser.ParseCivitaiScanColor(scanResult);
        _icon = Parser.ParseCivitaiScanIcon(scanResult);
    }

    private void ParseButtonText()
    {
        if (_selected.Metadata.Format == "Other")
            _buttonText = _selected.Type;
        else if (_selected.Type == "Model") _buttonText = _selected.Metadata.Format;
        else if (_selected.Type == "Pruned Model") _buttonText = $"{_selected.Metadata.Format} (Pruned)";
        else _buttonText = $"{_selected.Metadata.Format} | {_selected.Type}";
    }

    private Color GetVersionButtonColor(CivitaiModelVersionFileDto file)
    {
        if (file.Metadata.Format == "Other")
        {
            if (file.Type == "Config") return Color.Info;
            else if (file.Type == "Training Data") return Color.Secondary;
        }
        else if (file.Metadata.Format == "SafeTensor") return Color.Primary;
        return Color.Default;
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("clipboardCopy.copyText", text);
        Snackbar.Add("Hash copied to the clipboard.", Severity.Info);
    }
}
