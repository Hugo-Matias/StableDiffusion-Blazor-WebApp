@using System.Diagnostics;
@inject AppState AppState
@inject ISnackbar Snackbar
@inject IConfiguration Configuration

<div>
    <MudDialog Style="max-width: 85vw; max-height: 85vh;" Class="pa-3">
        <DialogContent>
            <MudStack Row>
                <MudStack Style="justify-content:center;">
                    <MudImage id="image" Class="full-image" Src=@Image.Path ObjectFit="ObjectFit.Contain" Fluid />
                </MudStack>
                <MudStack>
                    <MudChip Text="@Parser.ParseCivitaiImageGenerationProcess(Image.GenerationProcess)" Color="@Parser.ParseCivitaiImageGenerationProcessColor(Image.GenerationProcess)" Label />
                    <MudButtonGroup Variant="Variant.Filled" OverrideStyles=false>
                        <MudButton Class="w-100 pa-2" StartIcon="fa-solid fa-file-lines" Color=Color.Info OnClick="@(() => LoadSettings(ModeType.Txt2Img))">Txt2Img</MudButton>
                        <MudButton Class="w-100 pa-2" StartIcon="fa-solid fa-file-image" Color=Color.Warning OnClick="@(() => LoadSettings(ModeType.Img2Img))">Img2Img</MudButton>
                        <MudButton Class="w-100 pa-2" StartIcon="fa-solid fa-download" Color=Color.Secondary OnClick=OpenFileInExplorer>Open File</MudButton>
                    </MudButtonGroup>
                    <MudStack Row>
                        <MudStack Class="mt-3" Style="align-content:flex-start;">
                            @if (Image.Prompt != null)
                            {
                                <MudTextField Label="Prompt" Lines="6" Value="@Image.Prompt" T="string" ReadOnly />
                            }
                            @if (Image.NegativePrompt != null)
                            {
                                <MudTextField Label="Negative Prompt" Lines="6" Value="@Image.NegativePrompt" T="string" ReadOnly />
                            }
                            @if (Image.HiresUpscale != null)
                            {
                                @if (Image.HiresUpscale != null)
                                {
                                    <MudTextField Label="Upscaler" Value=@Image.HiresUpscaler T="string" ReadOnly />
                                }
                                @if (Image.HiresUpscale != null)
                                {
                                    <MudTextField Label="Scale" Value=@Image.HiresUpscale T="string" ReadOnly />
                                }
                                @if (Image.HiresSteps != null && int.Parse(Image.HiresSteps) != Image.Steps)
                                {
                                    <MudTextField Label="Second Pass Steps" Value=@Image.HiresSteps T="string" ReadOnly />
                                }
                                @if (Image.DenoisingStrength != null)
                                {
                                    <MudTextField Label="Denoising Strength" Value=@Image.DenoisingStrength T="string" ReadOnly />
                                }
                            }
                        </MudStack>
                        <MudStack Class="mt-3">
                            <MudTextField Label="Resolution" Value=@(Parser.ParseCivitaiImageSize(null, (int)Image.Width, (int)Image.Height)) T="string" ReadOnly />
                            @if (Image.Model != null)
                            {
                                <MudTextField Label="Model" Value=@Image.Model T="string" ReadOnly />
                            }
                            @if (Image.ModelHash != null)
                            {
                                <MudTextField Label="Hash" Value=@Image.ModelHash T="string" ReadOnly />
                            }
                            @if (Image.Seed != null)
                            {
                                <MudTextField Label="Seed" Value=@Image.Seed.ToString() T="string" ReadOnly />
                            }
                            @if (Image.Sampler != null)
                            {
                                <MudTextField Label="Sampler" Value=@Image.Sampler T="string" ReadOnly />
                            }
                            @if (Image.Steps != null)
                            {
                                <MudTextField Label="Steps" Value=@Image.Steps.ToString() T="string" ReadOnly />
                            }
                            @if (Image.CfgScale != null)
                            {
                                <MudTextField Label="CFG Scale" Value=@Image.CfgScale.ToString() T="string" ReadOnly />
                            }
                            @if (Image.ClipSkip != null)
                            {
                                <MudTextField Label="Clip Skip" Value=@Image.ClipSkip T="string" ReadOnly />
                            }
                            @if (Image.ENSD != null)
                            {
                                <MudTextField Label="ENSD" Value=@Image.ENSD T="string" ReadOnly />
                            }
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudStack>
        </DialogContent>
    </MudDialog>
</div>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public ResourceImage Image { get; set; }

    private void LoadSettings(ModeType mode)
    {
        if (mode == ModeType.Txt2Img)
        {
            AppState.InitializeParameters(new ModeType[1] { ModeType.Txt2Img });
            AppState.ParametersTxt2Img.Prompt = Image.Prompt;
            AppState.ParametersTxt2Img.NegativePrompt = Image.NegativePrompt;
            AppState.ParametersTxt2Img.Seed = Image.Seed;
            AppState.ParametersTxt2Img.SamplerIndex = Image.Sampler;
            AppState.ParametersTxt2Img.Steps = Image.Steps;
            AppState.ParametersTxt2Img.CfgScale = Image.CfgScale;
            AppState.ParametersTxt2Img.Width = Image.Width;
            AppState.ParametersTxt2Img.Height = Image.Height;
            if (Image.HiresUpscale != null)
            {
                AppState.ParametersTxt2Img.EnableHR = true;
                AppState.ParametersTxt2Img.HRUpscaler = Image.HiresUpscaler;
                AppState.ParametersTxt2Img.HRScale = double.Parse(Image.HiresUpscale);
                if (Image.HiresSteps != null)
                    AppState.ParametersTxt2Img.HRSecondPassSteps = int.Parse(Image.HiresSteps);
                else
                    AppState.ParametersTxt2Img.HRSecondPassSteps = 0;
                AppState.ParametersTxt2Img.DenoisingStrength = double.Parse(Image.DenoisingStrength);
            }
        }
        else if (mode == ModeType.Img2Img)
        {
            AppState.InitializeParameters(new ModeType[1] { ModeType.Img2Img });
            AppState.ParametersImg2Img.Prompt = Image.Prompt;
            AppState.ParametersImg2Img.NegativePrompt = Image.NegativePrompt;
            AppState.ParametersImg2Img.Seed = Image.Seed;
            AppState.ParametersImg2Img.SamplerIndex = Image.Sampler;
            AppState.ParametersImg2Img.Steps = Image.Steps;
            AppState.ParametersImg2Img.CfgScale = Image.CfgScale;
            AppState.ParametersImg2Img.DenoisingStrength = double.Parse(Image.DenoisingStrength);
            AppState.ParametersImg2Img.Width = Image.Width;
            AppState.ParametersImg2Img.Height = Image.Height;
        }
        Snackbar.Add($"Settings copied to {mode}", Severity.Success);
    }

    private void OpenFileInExplorer() => Process.Start("explorer.exe", $"/select, {Image.Path.Replace("/image/vault/", Configuration["ImagesPathVault"]).Replace("/", @"\")}");
}
