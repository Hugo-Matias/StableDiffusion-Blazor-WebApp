@inject ManagerService M
@inject IOService IO
@inject DatabaseService DB
@inject IConfiguration Configuration
@inject IDialogService DialogService

<MudDialog Class="pa-4">
    <TitleContent>
        <MudStack Row=true>
            <MudStack>
                <MudText Typo="Typo.h6">@Resource.Title</MudText>
                @if (Resource.CivitaiId != null)
                {
                    <MudLink Target="_blank" Href=@($"https://civitai.com/models/{Resource.CivitaiId}") Color="Color.Info" Typo="Typo.caption" Style="opacity: 0.3; font-size:0.7rem; margin-top: -1.2rem;">@($"Model: {Resource.CivitaiId}{(File.CivitaiId != null ? $" | File: {File.CivitaiId}" : "")}")</MudLink>
                }
            </MudStack>
            <MudSpacer />
            <MudChip Text="@Resource.Type.Name" Color="Parser.ParseCivitaiResourceColorAsColor((CivitaiModelType)Enum.Parse(typeof(CivitaiModelType), Resource.Type.Name))" Label=true />
            @if (Resource.SubType != null)
            {
                <MudChip Text="@Resource.SubType.Name" Color="Color.Tertiary" Label=true />
            }
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudTabs Elevation="0" PanelClass="mt-4" Rounded Centered>
            <MudTabPanel Text="Data">
                <MudText Class="mb-4" Style="text-align:center;" Color="Color.Primary" Typo="Typo.button">@File.Filename @((File.SizeKb != 0 ? $"({Parser.ParseSizeKb(File.SizeKb)})" : ""))</MudText>
                    @if (File.Description != null)
                {
                    <MudContainer Class="my-4" Style="max-height: 200px; overflow: scroll;">
                        @((MarkupString)File.Description)
                    </MudContainer>
                }
                <MudChipSet ReadOnly=true>
                    @foreach (var tag in Resource.Tags)
                    {
                        <MudChip Variant="Variant.Text" Text="@tag" Label=true />
                    }
                </MudChipSet>
                @if (File.TriggerWords != null && File.TriggerWords.Count >= 1)
                {
                    <MudStack Row=true>
                        <MudCheckBox Checked="M.State.Resources.LoadTriggerWords" CheckedChanged="HandleLoadTriggerWordsChanged" T="bool">Trigger Words</MudCheckBox>
                        <MudChipSet ReadOnly=true>
                            @foreach (var word in File.TriggerWords)
                            {
                                <MudChip Color="Color.Primary" Text="@word" Label=true />
                            }
                        </MudChipSet>
                    </MudStack>
                }
                @if (Resource.Type.Name.Equals("Checkpoint", StringComparison.InvariantCultureIgnoreCase))
                {
                    <MudButton Class="w-100 ma-4" OnClick=@(() => MudDialog.Close("Load")) Color="Color.Success" ButtonType="ButtonType.Button" Disabled=@(!M.IsWebuiUp || !File.IsEnabled)>Load Checkpoint</MudButton>
                }
                else
                {
                    <MudSlider T="float" ValueChanged=@((value) => HandleResourceWeightChanged(value)) Value=M.State.Resources.Weight Min="M.Settings.Resources.Weight.Min" Max="M.Settings.Resources.Weight.Max" Step="M.Settings.Resources.Weight.Step" ValueLabel><small>Resource Weight: </small> @M.State.Resources.Weight</MudSlider>
                }
                @if (!(Resource.Type.Name.Equals("Checkpoint", StringComparison.InvariantCultureIgnoreCase) && File.TriggerWords.Count == 0))
                {
                    <MudStack Class="align-items-center justify-content-center mt-4 mb-2" Row=true>
                        <MudText Typo="Typo.caption"><MudIcon Icon="fa-solid fa-file-lines" Class="me-1" Style="font-size:1rem;" />Txt2Img:</MudText>
                        <MudButtonGroup Variant="Variant.Filled" OverrideStyles=false>
                            <MudButton OnClick="@(() => LoadResource(ModeType.Txt2Img, true))" ButtonType="ButtonType.Button" Color="Color.Success" Disabled=@(!M.IsWebuiUp || !File.IsEnabled)>Prompt</MudButton>
                            <MudButton OnClick="@(() => LoadResource(ModeType.Txt2Img, false))" ButtonType="ButtonType.Button" Color="Color.Error" Disabled=@(!M.IsWebuiUp || !File.IsEnabled)>Negative Prompt</MudButton>
                        </MudButtonGroup>
                    </MudStack>
                    <MudStack Class="align-items-center justify-content-center" Row=true>
                        <MudText Typo="Typo.caption"><MudIcon Icon="fa-solid fa-file-image" Class="me-1" Style="font-size:1rem;" />Img2Img:</MudText>
                        <MudButtonGroup Variant="Variant.Filled" OverrideStyles=false>
                            <MudButton OnClick="@(() => LoadResource(ModeType.Img2Img, true))" ButtonType="ButtonType.Button" Color="Color.Success" Disabled=@(!M.IsWebuiUp || !File.IsEnabled)>Prompt</MudButton>
                            <MudButton OnClick="@(() => LoadResource(ModeType.Img2Img, false))" ButtonType="ButtonType.Button" Color="Color.Error" Disabled=@(!M.IsWebuiUp || !File.IsEnabled)>Negative Prompt</MudButton>
                        </MudButtonGroup>
                    </MudStack>
                }
            </MudTabPanel>
            <MudTabPanel Text="Images">
                <MudGrid Style="width: 100%; max-height:80vh; overflow: scroll; justify-content:center !important;">
                    @foreach (var image in _images)
                    {
                        <ResourceImageCard Image="image" />
                    }
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" IconColor=@(File.IsEnabled ? Color.Success : Color.Error) StartIcon=@(File.IsEnabled ? "fa-solid fa-circle" : "fa-solid fa-circle-dot") Color=Color.Dark OnClick="ToggleFile">@(File.IsEnabled ? "Disable" : "Enable")</MudButton>
            <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=@(() => MudDialog.Close("Edit"))>Edit</MudButton>
        </DialogActions>
    </MudDialog>

    @code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public LocalResource Resource { get; set; }
    [Parameter] public LocalResourceFile File { get; set; }

    private List<ResourceImage> _images;

    protected async override Task OnInitializedAsync() => _images = File.CivitaiId != null ? await DB.GetResourceImages((int)File.CivitaiId) : new();

    private void LoadResource(ModeType source, bool isPrompt) => MudDialog.Close((source, isPrompt));

    private void HandleResourceWeightChanged(float value)
    {
        M.State.Resources.Weight = value;
        M.SaveSettings();
    }

    private void HandleLoadTriggerWordsChanged(bool value)
    {
        M.State.Resources.LoadTriggerWords = value;
        M.SaveSettings();
    }

    private async Task ToggleFile()
    {
        if (M.ResourceTypeDirectories == null) await M.GetResourceTypeDirectories();
        string destPath = string.Empty;
        if (File.IsEnabled) destPath = Path.Combine(Configuration["ResourcesPath"], "_storage", Resource.Type.Name);
        else destPath = M.ResourceTypeDirectories.FirstOrDefault(p => p.Key.Equals(Resource.Type.Name, StringComparison.InvariantCultureIgnoreCase)).Value;
        if (Resource.SubType != null) destPath = Path.Combine(destPath, Resource.SubType.Name);
        destPath = Path.Combine(destPath, File.Filename);
        IO.MoveFile(File.File.FullName, destPath);
        await DB.ToggleResourceState(File.ResourceId);
        MudDialog.Close("Toggle");
    }
}
