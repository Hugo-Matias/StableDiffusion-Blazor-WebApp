@inject AppState AppState
@inject IOService IO
@inject IConfiguration Configuration

<MudDialog Class="pa-4">
    <TitleContent>
        <MudStack Row>
            <MudStack>
                <MudText Typo="Typo.h6">@Resource.Title</MudText>
                @if (Resource.CivitaiId != null)
                {
                    <MudLink Target="_blank" Href=@($"https://civitai.com/models/{Resource.CivitaiId}") Color="Color.Info" Typo="Typo.caption" Style="opacity: 0.3; font-size:0.7rem; margin-top: -1.2rem;">@($"Model: {Resource.CivitaiId}{(File.CivitaiId != null ? $" | File: {File.CivitaiId}" : "")}")</MudLink>
                }
            </MudStack>
            <MudSpacer />
            <MudChip Text="@Resource.Type.Name" Color="Parser.ParseCivitaiResourceColorAsColor((CivitaiModelType)Enum.Parse(typeof(CivitaiModelType), Resource.Type.Name))" Label />
            @if (Resource.SubType != null)
            {
                <MudChip Text="@Resource.SubType.Name" Color="Color.Tertiary" Label />
            }
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudText Class="mb-4" Style="text-align:center;" Color="Color.Primary" Typo="Typo.button">@File.Filename</MudText>
        @if (File.Description != null)
        {
            <MudContainer Class="my-4" Style="max-height: 200px; overflow: scroll;">
                @((MarkupString)File.Description)
            </MudContainer>
        }
        <MudChipSet ReadOnly>
            @foreach (var tag in Resource.Tags)
            {
                <MudChip Variant="Variant.Text" Text="@tag" Label />
            }
        </MudChipSet>
        @if (Resource.Type.Name.Equals("Checkpoint", StringComparison.InvariantCultureIgnoreCase))
        {
            <MudButton Class="w-100 ma-4" OnClick=@(() => MudDialog.Close()) Color="Color.Success" ButtonType="ButtonType.Button" Disabled=@(!AppState.IsWebuiUp && !File.IsEnabled)>Load Checkpoint</MudButton>
        }
        else
        {
            <MudSlider T="float" ValueChanged=@((value) => HandleResourceWeightChanged(value)) Value=AppState.Settings.Resources.Weight.Value Min="AppState.Settings.Resources.Weight.Min" Max="AppState.Settings.Resources.Weight.Max" Step="AppState.Settings.Resources.Weight.Step" ValueLabel><small>Resource Weight: </small> @AppState.Settings.Resources.Weight.Value</MudSlider>
            @if (File.TriggerWords != null && File.TriggerWords.Count > 1)
            {
                <MudStack Row>
                <MudCheckBox Checked="AppState.Settings.Resources.LoadTriggerWords" CheckedChanged="HandleLoadTriggerWordsChanged" T="bool">Trigger Words</MudCheckBox>
                <MudChipSet ReadOnly>
                    @foreach (var word in File.TriggerWords)
                        {
                            <MudChip Color="Color.Primary" Text="@word" Label />
                        }
                    </MudChipSet>
                </MudStack>
            }
            <MudStack Class="align-items-center justify-content-center mt-4 mb-2" Row>
            <MudText Typo="Typo.caption"><MudIcon Icon="fa-solid fa-file-lines" Class="me-1" Style="font-size:1rem;" />Txt2Img:</MudText>
            <MudButtonGroup Variant="Variant.Filled" OverrideStyles=false>
                <MudButton OnClick="@(() => LoadResource(ModeType.Txt2Img, true))" ButtonType="ButtonType.Button" Color="Color.Success" Disabled=!AppState.IsWebuiUp>Prompt</MudButton>
                <MudButton OnClick="@(() => LoadResource(ModeType.Txt2Img, false))" ButtonType="ButtonType.Button" Color="Color.Error" Disabled=!AppState.IsWebuiUp>Negative Prompt</MudButton>
            </MudButtonGroup>
        </MudStack>
            <MudStack Class="align-items-center justify-content-center" Row>
            <MudText Typo="Typo.caption"><MudIcon Icon="fa-solid fa-file-image" Class="me-1" Style="font-size:1rem;" />Img2Img:</MudText>
            <MudButtonGroup Variant="Variant.Filled" OverrideStyles=false>
                <MudButton OnClick="@(() => LoadResource(ModeType.Img2Img, true))" ButtonType="ButtonType.Button" Color="Color.Success" Disabled=!AppState.IsWebuiUp>Prompt</MudButton>
                <MudButton OnClick="@(() => LoadResource(ModeType.Img2Img, false))" ButtonType="ButtonType.Button" Color="Color.Error" Disabled=!AppState.IsWebuiUp>Negative Prompt</MudButton>
            </MudButtonGroup>
        </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" IconColor=@(File.IsEnabled ? Color.Success : Color.Error) StartIcon=@(File.IsEnabled ? "fa-solid fa-circle" : "fa-solid fa-circle-dot") Color=Color.Dark OnClick="ToggleFile">@(File.IsEnabled ? "Disable" : "Enable")</MudButton>
        </DialogActions>
    </MudDialog>

    @code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public LocalResource Resource { get; set; }
    [Parameter] public LocalResourceFile File { get; set; }

    private void LoadResource(ModeType source, bool isPrompt) => MudDialog.Close((source, isPrompt));

    private void HandleResourceWeightChanged(float value)
    {
        AppState.Settings.Resources.Weight.Value = value;
        AppState.SaveSettings();
    }

    private void HandleLoadTriggerWordsChanged(bool value)
    {
        AppState.Settings.Resources.LoadTriggerWords = value;
        AppState.SaveSettings();
    }

    private async Task ToggleFile()
    {
        if (AppState.ResourceTypeDirectories == null) await AppState.GetResourceTypeDirectories();
        string destPath = string.Empty;
        if (File.IsEnabled) destPath = Path.Combine(Configuration["ResourcesPath"], "_storage", Resource.Type.Name);
        else destPath = AppState.ResourceTypeDirectories.FirstOrDefault(p => p.Key.Equals(Resource.Type.Name, StringComparison.InvariantCultureIgnoreCase)).Value;
        if (Resource.SubType != null) destPath = Path.Combine(destPath, Resource.SubType.Name);
        destPath = Path.Combine(destPath, File.Filename);
        IO.MoveFile(File.File.FullName, destPath);
        File.File = new FileInfo(destPath);
        File.IsEnabled = !File.IsEnabled;
    }
}
