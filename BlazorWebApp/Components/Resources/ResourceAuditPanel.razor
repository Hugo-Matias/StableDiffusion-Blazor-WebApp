@inject IConfiguration Configuration
@inject DatabaseService DB
@inject IOService IO
@inject IDialogService DialogService

<MudStack Row>
    @if (_missing != null)
    {
        <MudStack>
            <MudText Typo="Typo.h6" Color="Color.Error">Missing from Database:</MudText>
            <FileTree Files="_missing" OnFileSelected="async v => await HandleFileSelected(v)" StartIndex=@(_resourcesPath.Length + 1) />
        </MudStack>
    }
    @if (_added != null)
    {
        <MudStack>
            <MudText Typo="Typo.h6" Color="Color.Success">Exist in Database:</MudText>
            <FileTree Files="_added" StartIndex=@(_resourcesPath.Length + 1) />
        </MudStack>
    }
</MudStack>

@code {
    private List<FileInfo> _missing;
    private List<FileInfo> _added;
    private string _resourcesPath;

    protected async override Task OnInitializedAsync()
    {
        _resourcesPath = Parser.ConvertCloudMount(Configuration["ResourcesPath"]);
        await Audit();
    }

    private async Task Audit()
    {
        var localModels = IO.GetFilesRecursive(_resourcesPath, ".git", extensionsBlacklist: null, extensionsWhitelist: new() { ".pt", ".ckpt", ".safetensors" });
        var dbModels = await DB.GetResources();
        _missing = new();
        _added = new List<FileInfo>();
        foreach (var file in localModels)
        {
            if (!dbModels.Any(m => file.Name.Equals(m.Filename, StringComparison.InvariantCultureIgnoreCase))) _missing.Add(file);
            else _added.Add(file);
        }
    }

    private async Task HandleFileSelected(FileInfo file)
    {
        var splitPath = Path.GetRelativePath(_resourcesPath, file.FullName).Split("\\");
        var type = splitPath[0];
        var subType = splitPath[1] != file.Name ? splitPath[1] : string.Empty;
        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        var param = new DialogParameters();
        var resource = new Resource()
            {
                Filename = file.Name,
                Title = file.Name,
                Type = new() { Name = type },
                SubType = new() { Name = subType },
                Tags = new(),
                TriggerWords = new()
            };
        param.Add("Resource", resource);
        var dialog = await DialogService.ShowAsync<ResourceInfoDialog>("Resource", param, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await DB.CreateResource((Resource)result.Data);
            await InvokeAsync(StateHasChanged);
        }
    }
}
