@inject ManagerService M

@if (Resources != null)
{
    <MudGrid Class="my-3 pa-2">
        <MudItem xs="4">
            <MudTextField Label="Title" Value="M.State.Resources.Title" ValueChanged=HandleSearchTitle T="string" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-magnifying-glass" Clearable Immediate />
        </MudItem>
        <MudItem xs="2">
            <MudAutocomplete T="string" Value="M.State.Resources.Subtype" ValueChanged=HandleSearchSubtype SearchFunc="GetSubtypes" Label="Sub-Type" MaxItems="100" MaxHeight="1200" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-list" ResetValueOnEmptyText Clearable Dense />
        </MudItem>
        <MudItem xs="2">
            <MudAutocomplete T="string" Value="M.State.Resources.Tag" ValueChanged=HandleSearchTag SearchFunc="GetTags" Label="Tag" MaxItems="100" MaxHeight="900" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-tag" AdornmentColor=@(M.State.Resources.IsInclusive ? Color.Success : Color.Error) OnAdornmentClick=HandleTagInclusiveChanged ResetValueOnEmptyText Clearable Dense />
        </MudItem>
        <MudItem xs="2">
            <MudSlider T=int ValueChanged=@(v => HandleLimitChanged(v)) Value=M.State.Resources.Limit Min="M.Settings.Resources.Search.Limit.Min" Max="M.Settings.Resources.Search.Limit.Max" Step="M.Settings.Resources.Search.Limit.Step"><small>Quantity:</small> @M.State.Resources.Limit</MudSlider>
        </MudItem>
        <MudItem xs="1">
            <MudCheckBox T="bool?" Checked=M.State.Resources.ResourceIsEnabledFilter CheckedChanged=@(v => HandleEnabledChecked(v)) Color=@(M.State.Resources.ResourceIsEnabledFilter == null ? Color.Default : (bool)M.State.Resources.ResourceIsEnabledFilter ? Color.Success : Color.Error) TriState=true>Active</MudCheckBox>
        </MudItem>
        <MudItem xs="1">
            <MudButton Style="width:100%; height:100%;" OnClick="Search" Color="Color.Success">Search</MudButton>
        </MudItem>
    </MudGrid>

    @if (M.State.Resources.TotalPages > 1)
    {
        <div class="d-flex flex-column align-center pa-3">
            <MudPagination SelectedChanged=HandlePageSelected Selected=M.State.Resources.Page BoundaryCount="2" MiddleCount="5" Count=M.State.Resources.TotalPages />
        </div>
    }
    <MudGrid Spacing="1" Justify="Justify.Center">
        @foreach (var resource in _filteredResources)
        {
            <ResourceCard Resource=resource OnLoad="@(async () => await OnLoad.InvokeAsync(resource))" />
        }
    </MudGrid>
    @if (M.State.Resources.TotalPages > 1)
    {
        <div class="d-flex flex-column align-center pa-3">
            <MudPagination SelectedChanged=HandlePageSelected Selected=M.State.Resources.Page BoundaryCount="2" MiddleCount="5" Count=M.State.Resources.TotalPages />
        </div>
    }
}

@code {
    [Parameter] public List<LocalResource> Resources { get; set; }
    [Parameter] public EventCallback<LocalResource> OnLoad { get; set; }

    private List<LocalResource> _filteredResources;

    protected override void OnParametersSet()
    {
        Search();
    }

    private async Task<IEnumerable<string>> GetSubtypes(string value)
    {
        var query = Resources.Select(r => r.SubType.Name).Distinct();
        if (!string.IsNullOrWhiteSpace(value)) query = query.Where(t => t.Equals(value, StringComparison.InvariantCultureIgnoreCase));
        return query.OrderBy(t => t);
    }

    private async Task<IEnumerable<string>> GetTags(string value)
    {
        var query = _filteredResources.SelectMany(r => r.Tags).Distinct();
        if (!string.IsNullOrWhiteSpace(value)) query = query.Where(t => t.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return query.OrderBy(t => t);
    }

    private async Task HandleSearchTitle(string value)
    {
        M.State.Resources.Title = value;
        M.State.Resources.Page = 1;
        await Search();
    }

    private async Task HandleSearchSubtype(string value)
    {
        M.State.Resources.Subtype = value;
        M.State.Resources.Page = 1;
        await Search();
    }

    private async Task HandleSearchTag(string value)
    {
        M.State.Resources.Tag = value;
        M.State.Resources.Page = 1;
        await Search();
    }

    private async Task HandleTagInclusiveChanged()
    {
        M.State.Resources.IsInclusive = !M.State.Resources.IsInclusive;
        M.State.Resources.Page = 1;
        await Search();
    }

    private async Task HandleLimitChanged(int value)
    {
        M.State.Resources.Limit = value;
        M.State.Resources.Page = 1;
        M.SaveSettings();
        await Search();
    }

    private async Task HandleEnabledChecked(bool? value)
    {
        M.State.Resources.ResourceIsEnabledFilter = value;
        M.State.Resources.Page = 1;
        await Search();
    }

    private async Task HandlePageSelected(int value)
    {
        M.State.Resources.Page = value;
        await Search();
    }

    private async Task Search()
    {
        var query = Resources.AsQueryable();
        if (!string.IsNullOrWhiteSpace(M.State.Resources.Title)) query = query.Where(r => r.Title.Contains(M.State.Resources.Title, StringComparison.InvariantCultureIgnoreCase));
        if (!string.IsNullOrWhiteSpace(M.State.Resources.Subtype)) query = query.Where(r => r.SubType.Name.Equals(M.State.Resources.Subtype, StringComparison.InvariantCultureIgnoreCase));
        if (!string.IsNullOrWhiteSpace(M.State.Resources.Tag))
        {
            if (M.State.Resources.IsInclusive) query = query.Where(r => r.Tags.Contains(M.State.Resources.Tag));
            else query = query.Where(r => !r.Tags.Contains(M.State.Resources.Tag));
        }
        if (M.State.Resources.ResourceIsEnabledFilter != null) query = query.Where(r => r.Files.Any(f => f.IsEnabled == M.State.Resources.ResourceIsEnabledFilter));
        PaginateResults(query.OrderBy(r => r.Title).ToArray());
        await M.SaveState();
    }

    private void PaginateResults(LocalResource[] resources)
    {
        var limit = M.State.Resources.Limit;
        M.State.Resources.TotalPages = (int)((resources.Length + limit) / limit);
        _filteredResources = resources.Skip(limit * (M.State.Resources.Page - 1)).Take(limit).ToList();
    }
}
