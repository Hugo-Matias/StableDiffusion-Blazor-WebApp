@inject AppState AppState

@if (Resources != null)
{
    <MudGrid Class="my-3 pa-2">
        <MudItem xs="4">
            <MudTextField Label="Title" Value="AppState.Settings.Resources.Search.SearchTitle" ValueChanged=HandleSearchTitle T="string" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-magnifying-glass" Clearable Immediate />
        </MudItem>
        <MudItem xs="2">
            <MudAutocomplete T="string" Value="AppState.Settings.Resources.Search.SearchSubtype" ValueChanged=HandleSearchSubtype SearchFunc="GetSubtypes" Label="Sub-Type" MaxItems="100" MaxHeight="1200" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-list" ResetValueOnEmptyText Clearable Dense />
        </MudItem>
        <MudItem xs="2">
            <MudAutocomplete T="string" Value="AppState.Settings.Resources.Search.SearchTag" ValueChanged=HandleSearchTag SearchFunc="GetTags" Label="Tag" MaxItems="100" MaxHeight="900" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-tag" AdornmentColor=@(AppState.Settings.Resources.Search.IsInclusive ? Color.Success : Color.Error) OnAdornmentClick=HandleTagInclusiveChanged ResetValueOnEmptyText Clearable Dense />
        </MudItem>
        <MudItem xs="2">
            <MudSlider T=int ValueChanged=@(v => HandleLimitChanged(v)) Value=AppState.Settings.Resources.Search.Limit.Value Min="AppState.Settings.Resources.Search.Limit.Min" Max="AppState.Settings.Resources.Search.Limit.Max" Step="AppState.Settings.Resources.Search.Limit.Step"><small>Quantity:</small> @AppState.Settings.Resources.Search.Limit.Value</MudSlider>
        </MudItem>
        <MudItem xs="1">
            <MudCheckBox T="bool?" Checked=AppState.ResourceIsEnabledFilter CheckedChanged=@(v => HandleEnabledChecked(v)) Color=@(AppState.ResourceIsEnabledFilter == null ? Color.Default : (bool)AppState.ResourceIsEnabledFilter ? Color.Success : Color.Error) TriState=true>Active</MudCheckBox>
        </MudItem>
        <MudItem xs="1">
            <MudButton Style="width:100%; height:100%;" OnClick="Search" Color="Color.Success">Search</MudButton>
        </MudItem>
    </MudGrid>

    @if (AppState.Settings.Resources.Search.TotalPages > 1)
    {
        <div class="d-flex flex-column align-center pa-3">
            <MudPagination SelectedChanged=HandlePageSelected Selected=AppState.Settings.Resources.Search.CurrentPage BoundaryCount="2" MiddleCount="5" Count=AppState.Settings.Resources.Search.TotalPages />
        </div>
    }
    <MudGrid Spacing="1" Justify="Justify.Center">
        @foreach (var resource in _filteredResources)
        {
            <ResourceCard Resource=resource OnLoad="@(async () => await OnLoad.InvokeAsync(resource))" />
        }
    </MudGrid>
    @if (AppState.Settings.Resources.Search.TotalPages > 1)
    {
        <div class="d-flex flex-column align-center pa-3">
            <MudPagination SelectedChanged=HandlePageSelected Selected=AppState.Settings.Resources.Search.CurrentPage BoundaryCount="2" MiddleCount="5" Count=AppState.Settings.Resources.Search.TotalPages />
        </div>
    }
}

@code {
    [Parameter] public List<LocalResource> Resources { get; set; }
    [Parameter] public EventCallback<LocalResource> OnLoad { get; set; }

    private List<LocalResource> _filteredResources;

    protected override void OnParametersSet()
    {
        Search();
    }

    private async Task<IEnumerable<string>> GetSubtypes(string value)
    {
        var query = Resources.Select(r => r.SubType.Name).Distinct();
        if (!string.IsNullOrWhiteSpace(value)) query = query.Where(t => t.Equals(value, StringComparison.InvariantCultureIgnoreCase));
        return query.OrderBy(t => t);
    }

    private async Task<IEnumerable<string>> GetTags(string value)
    {
        var query = _filteredResources.SelectMany(r => r.Tags).Distinct();
        if (!string.IsNullOrWhiteSpace(value)) query = query.Where(t => t.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return query.OrderBy(t => t);
    }

    private void HandleSearchTitle(string value)
    {
        AppState.Settings.Resources.Search.SearchTitle = value;
        Search();
    }

    private void HandleSearchSubtype(string value)
    {
        AppState.Settings.Resources.Search.SearchSubtype = value;
        Search();
    }

    private void HandleSearchTag(string value)
    {
        AppState.Settings.Resources.Search.SearchTag = value;
        Search();
    }

    private void HandleTagInclusiveChanged()
    {
        AppState.Settings.Resources.Search.IsInclusive = !AppState.Settings.Resources.Search.IsInclusive;
        Search();
    }

    private void HandleLimitChanged(int value)
    {
        AppState.Settings.Resources.Search.Limit.Value = value;
        AppState.SaveSettings();
        Search();
    }

    private void HandleEnabledChecked(bool? value)
    {
        AppState.ResourceIsEnabledFilter = value;
        Search();
    }

    private void HandlePageSelected(int value)
    {
        AppState.Settings.Resources.Search.CurrentPage = value;
        Search();
    }

    private void Search()
    {
        var query = Resources.AsQueryable();
        if (!string.IsNullOrWhiteSpace(AppState.Settings.Resources.Search.SearchTitle)) query = query.Where(r => r.Title.Contains(AppState.Settings.Resources.Search.SearchTitle, StringComparison.InvariantCultureIgnoreCase));
        if (!string.IsNullOrWhiteSpace(AppState.Settings.Resources.Search.SearchSubtype)) query = query.Where(r => r.SubType.Name.Equals(AppState.Settings.Resources.Search.SearchSubtype, StringComparison.InvariantCultureIgnoreCase));
        if (!string.IsNullOrWhiteSpace(AppState.Settings.Resources.Search.SearchTag))
        {
            if (AppState.Settings.Resources.Search.IsInclusive) query = query.Where(r => r.Tags.Contains(AppState.Settings.Resources.Search.SearchTag));
            else query = query.Where(r => !r.Tags.Contains(AppState.Settings.Resources.Search.SearchTag));
        }
        if (AppState.ResourceIsEnabledFilter != null) query = query.Where(r => r.Files.Any(f => f.IsEnabled == AppState.ResourceIsEnabledFilter));
        PaginateResults(query.OrderBy(r => r.Title).ToArray());
    }

    private void PaginateResults(LocalResource[] resources)
    {
        var limit = AppState.Settings.Resources.Search.Limit.Value;
        AppState.Settings.Resources.Search.TotalPages = (int)((resources.Length + limit) / limit);
        _filteredResources = resources.Skip(limit * (AppState.Settings.Resources.Search.CurrentPage - 1)).Take(limit).ToList();
    }
}
